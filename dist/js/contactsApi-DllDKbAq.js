import{s as t}from"./supabaseClient-5bv4QPtU.js";const e=new class{async getContacts(e={}){try{let a=t.from("contact_list_view").select("*");e.search&&(a=a.or(`first_name.ilike.%${e.search}%,last_name.ilike.%${e.search}%,organization_name.ilike.%${e.search}%,email.ilike.%${e.search}%,position.ilike.%${e.search}%`));const r="organization"===e.sortBy?"organization_name":e.sortBy||"last_name",c=e.sortOrder||"asc";a=a.order(r,{ascending:"asc"===c}),e.limit&&(a=a.limit(e.limit)),e.offset&&(a=a.range(e.offset,e.offset+(e.limit||50)-1));const{data:n,error:o}=await a;return o?{data:null,error:`Failed to fetch contacts: ${o.message}`,success:!1}:{data:n||[],error:null,success:!0}}catch(a){return{data:null,error:"An unexpected error occurred while fetching contacts",success:!1}}}async getContact(e){try{const{data:a,error:r}=await t.from("contact_detail_view").select("*").eq("id",e).single();return r?{data:null,error:`Failed to fetch contact: ${r.message}`,success:!1}:{data:a,error:null,success:!0}}catch(a){return{data:null,error:"An unexpected error occurred while fetching the contact",success:!1}}}async createContact(e){try{const{data:a,error:r}=await t.from("contacts").insert(e).select().single();return r?{data:null,error:`Failed to create contact: ${r.message}`,success:!1}:{data:a,error:null,success:!0}}catch(a){return{data:null,error:"An unexpected error occurred while creating the contact",success:!1}}}async updateContact(e,a){try{const{data:r,error:c}=await t.from("contacts").update(a).eq("id",e).select().single();return c?{data:null,error:`Failed to update contact: ${c.message}`,success:!1}:{data:r,error:null,success:!0}}catch(r){return{data:null,error:"An unexpected error occurred while updating the contact",success:!1}}}async deleteContact(e){try{const{error:a}=await t.from("contacts").delete().eq("id",e);return a?{data:null,error:`Failed to delete contact: ${a.message}`,success:!1}:{data:!0,error:null,success:!0}}catch(a){return{data:null,error:"An unexpected error occurred while deleting the contact",success:!1}}}async getContactStats(){try{const{count:e,error:a}=await t.from("contacts").select("*",{count:"exact",head:!0});if(a)throw a;const r=new Date;r.setDate(r.getDate()-30);const{count:c,error:n}=await t.from("contacts").select("*",{count:"exact",head:!0}).gte("created_at",r.toISOString());if(n)throw n;const{data:o,error:s}=await t.from("contacts").select("organization_id").not("organization_id","is",null);if(s)throw s;return{data:{total:e||0,recentlyAdded:c||0,organizations:new Set(null==o?void 0:o.map(t=>t.organization_id)).size},error:null,success:!0}}catch(e){return{data:null,error:"Failed to fetch contact statistics",success:!1}}}};export{e as c};

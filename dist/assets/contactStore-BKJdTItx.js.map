{"version":3,"file":"contactStore-BKJdTItx.js","sources":["../../src/stores/contactStore.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { contactsApi } from '@/services/contactsApi'\nimport type { Contact, ContactInsert, ContactUpdate } from '@/types/database.types'\nimport type { ContactSearchForm } from '@/types/contacts'\n\n/**\n * Contact Store - Manages contact data and operations\n * Follows established Pinia patterns with reactive state management\n */\nexport const useContactStore = defineStore('contact', () => {\n  // State\n  const contacts = ref<Contact[]>([])\n  const currentContact = ref<Contact | null>(null)\n  const isLoading = ref(false)\n  const isSubmitting = ref(false)\n  const errorMessage = ref('')\n  const searchQuery = ref('')\n  const totalCount = ref(0)\n  \n  // Pagination state\n  const currentPage = ref(1)\n  const pageSize = ref(10)\n  const sortBy = ref<'first_name' | 'last_name' | 'organization' | 'email' | 'created_at'>('first_name')\n  const sortOrder = ref<'asc' | 'desc'>('asc')\n\n  // Computed properties\n  const hasContacts = computed(() => contacts.value.length > 0)\n  const totalPages = computed(() => Math.ceil(totalCount.value / pageSize.value))\n  const hasNextPage = computed(() => currentPage.value < totalPages.value)\n  const hasPreviousPage = computed(() => currentPage.value > 1)\n\n  /**\n   * Reset error state\n   */\n  const clearError = () => {\n    errorMessage.value = ''\n  }\n\n  /**\n   * Set error message\n   */\n  const setError = (message: string) => {\n    errorMessage.value = message\n    console.error('Contact Store Error:', message)\n  }\n\n  /**\n   * Fetch contacts with search and pagination\n   */\n  const fetchContacts = async (options: Partial<ContactSearchForm> = {}) => {\n    try {\n      isLoading.value = true\n      clearError()\n\n      const searchTerm = options.search || searchQuery.value\n      const offset = options.offset || (currentPage.value - 1) * pageSize.value\n      const limit = options.limit || pageSize.value\n      const orderBy = options.sortBy || sortBy.value\n      const order = options.sortOrder || sortOrder.value\n\n      // Use contactsApi service\n      const response = await contactsApi.getContacts({\n        search: searchTerm?.trim() || undefined,\n        offset,\n        limit,\n        sortBy: orderBy as 'first_name' | 'last_name' | 'organization' | 'email' | 'created_at',\n        sortOrder: order as 'asc' | 'desc'\n      })\n\n      if (response.success && response.data) {\n        contacts.value = response.data\n        totalCount.value = response.data.length\n      } else {\n        throw new Error(response.error || 'Failed to fetch contacts')\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch contacts'\n      setError(message)\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  /**\n   * Fetch a single contact by ID\n   */\n  const fetchContact = async (id: string): Promise<Contact | null> => {\n    try {\n      isLoading.value = true\n      clearError()\n\n      const response = await contactsApi.getContact(id)\n\n      if (response.success && response.data) {\n        currentContact.value = response.data\n        return response.data\n      } else {\n        throw new Error(response.error || 'Failed to fetch contact')\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch contact'\n      setError(message)\n      currentContact.value = null\n      return null\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  /**\n   * Create a new contact\n   */\n  const createContact = async (contactData: ContactInsert): Promise<Contact | null> => {\n    try {\n      isSubmitting.value = true\n      clearError()\n\n      const response = await contactsApi.createContact(contactData)\n\n      if (response.success && response.data) {\n        // Refresh the current view to include the new contact\n        await fetchContacts()\n        return response.data\n      } else {\n        throw new Error(response.error || 'Failed to create contact')\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create contact'\n      setError(message)\n      return null\n    } finally {\n      isSubmitting.value = false\n    }\n  }\n\n  /**\n   * Update an existing contact\n   */\n  const updateContact = async (id: string, updates: ContactUpdate): Promise<Contact | null> => {\n    try {\n      isSubmitting.value = true\n      clearError()\n\n      const response = await contactsApi.updateContact(id, updates)\n\n      if (response.success && response.data) {\n        currentContact.value = response.data\n        // Refresh the current view\n        await fetchContacts()\n        return response.data\n      } else {\n        throw new Error(response.error || 'Failed to update contact')\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to update contact'\n      setError(message)\n      return null\n    } finally {\n      isSubmitting.value = false\n    }\n  }\n\n  /**\n   * Delete a contact\n   */\n  const deleteContact = async (id: string): Promise<boolean> => {\n    try {\n      isSubmitting.value = true\n      clearError()\n\n      const response = await contactsApi.deleteContact(id)\n\n      if (response.success) {\n        // Clear current contact if it was deleted\n        if (currentContact.value?.id === id) {\n          currentContact.value = null\n        }\n\n        // Refresh the current view\n        await fetchContacts()\n        return true\n      } else {\n        throw new Error(response.error || 'Failed to delete contact')\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to delete contact'\n      setError(message)\n      return false\n    } finally {\n      isSubmitting.value = false\n    }\n  }\n\n  /**\n   * Search contacts\n   */\n  const searchContacts = async (query: string) => {\n    searchQuery.value = query\n    currentPage.value = 1 // Reset to first page on new search\n    await fetchContacts({ search: query })\n  }\n\n  /**\n   * Clear search and show all contacts\n   */\n  const clearSearch = async () => {\n    searchQuery.value = ''\n    currentPage.value = 1\n    await fetchContacts()\n  }\n\n  /**\n   * Change page\n   */\n  const setPage = async (page: number) => {\n    if (page >= 1 && page <= totalPages.value) {\n      currentPage.value = page\n      await fetchContacts()\n    }\n  }\n\n  /**\n   * Go to next page\n   */\n  const nextPage = async () => {\n    if (hasNextPage.value) {\n      await setPage(currentPage.value + 1)\n    }\n  }\n\n  /**\n   * Go to previous page\n   */\n  const previousPage = async () => {\n    if (hasPreviousPage.value) {\n      await setPage(currentPage.value - 1)\n    }\n  }\n\n  /**\n   * Change sort settings\n   */\n  const setSorting = async (field: typeof sortBy.value, order: typeof sortOrder.value) => {\n    sortBy.value = field\n    sortOrder.value = order\n    currentPage.value = 1 // Reset to first page on sort change\n    await fetchContacts()\n  }\n\n  /**\n   * Reset store state\n   */\n  const resetStore = () => {\n    contacts.value = []\n    currentContact.value = null\n    isLoading.value = false\n    isSubmitting.value = false\n    errorMessage.value = ''\n    searchQuery.value = ''\n    currentPage.value = 1\n    totalCount.value = 0\n    sortBy.value = 'first_name'\n    sortOrder.value = 'asc'\n  }\n\n  return {\n    // State\n    contacts,\n    currentContact,\n    isLoading,\n    isSubmitting,\n    errorMessage,\n    searchQuery,\n    currentPage,\n    pageSize,\n    totalCount,\n    sortBy,\n    sortOrder,\n    \n    // Computed\n    hasContacts,\n    totalPages,\n    hasNextPage,\n    hasPreviousPage,\n    \n    // Actions\n    fetchContacts,\n    fetchContact,\n    createContact,\n    updateContact,\n    deleteContact,\n    searchContacts,\n    clearSearch,\n    setPage,\n    nextPage,\n    previousPage,\n    setSorting,\n    clearError,\n    resetStore\n  }\n})"],"names":["useContactStore","defineStore","contacts","ref","currentContact","isLoading","isSubmitting","errorMessage","searchQuery","totalCount","currentPage","pageSize","sortBy","sortOrder","hasContacts","computed","totalPages","hasNextPage","hasPreviousPage","clearError","setError","message","fetchContacts","options","searchTerm","offset","limit","orderBy","order","response","contactsApi","error","fetchContact","id","createContact","contactData","updateContact","updates","deleteContact","_a","searchContacts","query","clearSearch","setPage","page","field"],"mappings":"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"}
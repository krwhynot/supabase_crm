{"version":3,"file":"dashboardStore-BEBNMsxJ.js","sources":["../../src/stores/dashboardStore.ts"],"sourcesContent":["/**\n * Dashboard Store - Centralized KPI Aggregation and Dashboard Management\n * Aggregates metrics from all other stores to provide comprehensive dashboard view\n * Follows Pinia Composition API patterns with reactive state management\n */\n\nimport { defineStore } from 'pinia'\nimport { ref, computed, reactive, watch } from 'vue'\nimport { useOpportunityStore } from './opportunityStore'\nimport { useProductStore } from './productStore'\nimport { useOrganizationStore } from './organizationStore'\nimport { usePrincipalStore } from './principalStore'\nimport type { OpportunityKPIs, OpportunityStage } from '@/types/opportunities'\nimport type { ProductCategory } from '@/types/products'\nimport type { OrganizationMetrics } from '@/types/organizations'\nimport type { PrincipalStats } from './principalStore'\n\n/**\n * Dashboard time period filters\n */\nexport interface DashboardTimeFilter {\n  period: 'today' | 'week' | 'month' | 'quarter' | 'year' | 'custom'\n  startDate?: Date\n  endDate?: Date\n}\n\n/**\n * Consolidated dashboard KPIs interface\n */\nexport interface DashboardKPIs {\n  // Overview metrics\n  totalOpportunities: number\n  totalProducts: number\n  totalOrganizations: number\n  totalPrincipals: number\n  \n  // Pipeline metrics\n  activePipeline: number\n  pipelineValue: number\n  wonThisMonth: number\n  conversionRate: number\n  averageDealSize: number\n  \n  // Growth metrics\n  monthlyGrowthRate: number\n  newOpportunitiesThisWeek: number\n  newOrganizationsThisMonth: number\n  recentActivityCount: number\n  \n  // Performance indicators\n  averageLeadScore: number\n  averageDaysToClose: number\n  topPerformingCategory: ProductCategory | null\n  mostActiveOrganizationType: string | null\n  \n  // Distribution metrics\n  opportunityStageDistribution: { [K in OpportunityStage]: number }\n  productCategoryDistribution: { [K in ProductCategory]: number }\n  organizationStatusDistribution: { [key: string]: number }\n  principalProductDistribution: Array<{\n    principalName: string\n    productCount: number\n    opportunityCount: number\n  }>\n}\n\n/**\n * Recent activity aggregation\n */\nexport interface DashboardActivity {\n  id: string\n  type: 'opportunity' | 'product' | 'organization' | 'principal'\n  action: 'created' | 'updated' | 'completed' | 'assigned'\n  title: string\n  description: string\n  timestamp: Date\n  entityId: string\n  entityName: string\n  userId?: string\n  userName?: string\n}\n\n/**\n * Dashboard performance metrics\n */\nexport interface DashboardPerformance {\n  // Velocity metrics\n  averageTimeToClose: number\n  averageResponseTime: number\n  dealsClosedThisMonth: number\n  \n  // Efficiency metrics\n  opportunityConversionRate: number\n  principalEngagementRate: number\n  productAdoptionRate: number\n  \n  // Growth indicators\n  monthOverMonthGrowth: number\n  quarterOverQuarterGrowth: number\n  yearOverYearGrowth: number\n  \n  // Predictive metrics\n  forecastedRevenue: number\n  probabilityWeightedPipeline: number\n  expectedCloseThisQuarter: number\n}\n\n/**\n * Dashboard filters and preferences\n */\nexport interface DashboardFilters {\n  timeFilter: DashboardTimeFilter\n  organizationTypes: string[]\n  opportunityStages: OpportunityStage[]\n  productCategories: ProductCategory[]\n  showInactiveItems: boolean\n  refreshInterval: number // minutes\n}\n\n/**\n * User interface preferences\n */\nexport interface DashboardPreferences {\n  sidebarCollapsed: boolean\n  weekFilterEnabled: boolean\n  autoRefresh: boolean\n  theme: 'light' | 'dark' | 'system'\n}\n\n/**\n * Store state interface for type safety\n */\ninterface DashboardStoreState {\n  // Core KPI data\n  kpis: DashboardKPIs | null\n  performance: DashboardPerformance | null\n  recentActivity: DashboardActivity[]\n  \n  // UI state\n  loading: boolean\n  refreshing: boolean\n  error: string | null\n  \n  // Data freshness\n  lastUpdated: Date | null\n  lastRefresh: Date | null\n  \n  // User preferences\n  filters: DashboardFilters\n  preferences: DashboardPreferences\n  autoRefresh: boolean\n  \n  // Cache management\n  cacheExpiryMinutes: number\n  isDataStale: boolean\n}\n\nexport const useDashboardStore = defineStore('dashboard', () => {\n  // ===============================\n  // STORE DEPENDENCIES\n  // ===============================\n  \n  const opportunityStore = useOpportunityStore()\n  const productStore = useProductStore()\n  const organizationStore = useOrganizationStore()\n  const principalStore = usePrincipalStore()\n  \n  // ===============================\n  // STATE MANAGEMENT\n  // ===============================\n  \n  const state = reactive<DashboardStoreState>({\n    // Core KPI data\n    kpis: null,\n    performance: null,\n    recentActivity: [],\n    \n    // UI state\n    loading: false,\n    refreshing: false,\n    error: null,\n    \n    // Data freshness\n    lastUpdated: null,\n    lastRefresh: null,\n    \n    // User preferences\n    filters: {\n      timeFilter: {\n        period: 'month'\n      },\n      organizationTypes: [],\n      opportunityStages: [],\n      productCategories: [],\n      showInactiveItems: false,\n      refreshInterval: 5 // 5 minutes default\n    },\n    preferences: {\n      sidebarCollapsed: false,\n      weekFilterEnabled: false,\n      autoRefresh: true,\n      theme: 'light'\n    },\n    autoRefresh: true,\n    \n    // Cache management\n    cacheExpiryMinutes: 10,\n    isDataStale: false\n  })\n  \n  // Auto-refresh timer\n  const autoRefreshTimer = ref<NodeJS.Timeout | null>(null)\n  \n  // ===============================\n  // COMPUTED PROPERTIES\n  // ===============================\n  \n  /**\n   * Aggregated KPIs from all stores\n   */\n  const aggregatedKPIs = computed((): DashboardKPIs | null => {\n    const oppKPIs = opportunityStore.kpis\n    const prodStats = productStore.stats\n    const orgMetrics = organizationStore.dashboardMetrics\n    const princStats = principalStore.stats\n    \n    if (!oppKPIs || !prodStats || !orgMetrics || !princStats) {\n      return null\n    }\n    \n    return {\n      // Overview metrics\n      totalOpportunities: oppKPIs.total_opportunities,\n      totalProducts: prodStats.total_products,\n      totalOrganizations: orgMetrics.totalOrganizations,\n      totalPrincipals: princStats.total_principals,\n      \n      // Pipeline metrics\n      activePipeline: oppKPIs.active_opportunities,\n      pipelineValue: oppKPIs.total_pipeline_value,\n      wonThisMonth: oppKPIs.won_this_month,\n      conversionRate: oppKPIs.conversion_rate,\n      averageDealSize: oppKPIs.total_pipeline_value / Math.max(oppKPIs.total_opportunities, 1),\n      \n      // Growth metrics\n      monthlyGrowthRate: orgMetrics.monthlyGrowth,\n      newOpportunitiesThisWeek: oppKPIs.created_this_week,\n      newOrganizationsThisMonth: calculateNewOrganizationsThisMonth(orgMetrics),\n      recentActivityCount: oppKPIs.created_this_week + oppKPIs.updated_this_week,\n      \n      // Performance indicators\n      averageLeadScore: orgMetrics.averageLeadScore,\n      averageDaysToClose: oppKPIs.average_days_to_close,\n      topPerformingCategory: prodStats.most_common_category,\n      mostActiveOrganizationType: getMostActiveOrganizationType(orgMetrics),\n      \n      // Distribution metrics\n      opportunityStageDistribution: oppKPIs.stage_distribution,\n      productCategoryDistribution: prodStats.products_by_category,\n      organizationStatusDistribution: getOrganizationStatusDistribution(orgMetrics),\n      principalProductDistribution: getPrincipalProductDistribution(princStats)\n    }\n  })\n  \n  /**\n   * Performance metrics calculation\n   */\n  const performanceMetrics = computed((): DashboardPerformance | null => {\n    const oppKPIs = opportunityStore.kpis\n    const orgMetrics = organizationStore.dashboardMetrics\n    const princStats = principalStore.stats\n    \n    if (!oppKPIs || !orgMetrics || !princStats) {\n      return null\n    }\n    \n    return {\n      // Velocity metrics\n      averageTimeToClose: oppKPIs.average_days_to_close,\n      averageResponseTime: calculateAverageResponseTime(),\n      dealsClosedThisMonth: oppKPIs.won_this_month,\n      \n      // Efficiency metrics\n      opportunityConversionRate: oppKPIs.conversion_rate,\n      principalEngagementRate: calculatePrincipalEngagementRate(princStats),\n      productAdoptionRate: calculateProductAdoptionRate(),\n      \n      // Growth indicators\n      monthOverMonthGrowth: orgMetrics.monthlyGrowth,\n      quarterOverQuarterGrowth: calculateQuarterOverQuarterGrowth(),\n      yearOverYearGrowth: calculateYearOverYearGrowth(),\n      \n      // Predictive metrics\n      forecastedRevenue: calculateForecastedRevenue(oppKPIs),\n      probabilityWeightedPipeline: calculateProbabilityWeightedPipeline(oppKPIs),\n      expectedCloseThisQuarter: calculateExpectedCloseThisQuarter(oppKPIs)\n    }\n  })\n  \n  /**\n   * Recent activity aggregation from all stores\n   */\n  const recentActivityFeed = computed((): DashboardActivity[] => {\n    const activities: DashboardActivity[] = []\n    \n    // Aggregate opportunity activities\n    const opportunities = opportunityStore.opportunities.slice(0, 5)\n    opportunities.forEach(opp => {\n      activities.push({\n        id: `opp-${opp.id}`,\n        type: 'opportunity',\n        action: 'created',\n        title: `New Opportunity: ${opp.name}`,\n        description: `${opp.stage} - ${opp.organization_name}`,\n        timestamp: new Date(opp.created_at),\n        entityId: opp.id,\n        entityName: opp.name,\n        userName: opp.deal_owner || undefined\n      })\n    })\n    \n    // Aggregate organization activities\n    const organizations = organizationStore.organizations.slice(0, 3)\n    organizations.forEach(org => {\n      activities.push({\n        id: `org-${org.id}`,\n        type: 'organization',\n        action: 'created',\n        title: `New Organization: ${org.name}`,\n        description: `${org.type || 'Unknown'} - ${org.industry || 'Unknown Industry'}`,\n        timestamp: new Date(org.created_at || new Date()),\n        entityId: org.id,\n        entityName: org.name\n      })\n    })\n    \n    // Sort by most recent first and limit to 20 items\n    return activities\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, 20)\n  })\n  \n  /**\n   * Data freshness indicator\n   */\n  const isDataFresh = computed((): boolean => {\n    if (!state.lastUpdated) return false\n    \n    const now = new Date()\n    const diffMinutes = (now.getTime() - state.lastUpdated.getTime()) / (1000 * 60)\n    return diffMinutes < state.cacheExpiryMinutes\n  })\n  \n  /**\n   * Loading state aggregation\n   */\n  const isAnyStoreLoading = computed((): boolean => {\n    return opportunityStore.loading || \n           productStore.loading || \n           (typeof organizationStore.loading === 'boolean' \n             ? organizationStore.loading \n             : Object.values(organizationStore.loading).some(Boolean)) || \n           principalStore.loading\n  })\n  \n  // ===============================\n  // HELPER FUNCTIONS\n  // ===============================\n  \n  function calculateNewOrganizationsThisMonth(metrics: OrganizationMetrics): number {\n    // Extract from recent activity data\n    const currentMonth = new Date().getMonth()\n    return metrics.recentActivity\n      .filter(activity => new Date(activity.date).getMonth() === currentMonth)\n      .reduce((sum, activity) => sum + activity.organizationsAdded, 0)\n  }\n  \n  function getMostActiveOrganizationType(metrics: OrganizationMetrics): string | null {\n    if (!metrics.statusDistribution.length) return null\n    \n    const mostActive = metrics.statusDistribution.reduce((prev, current) => \n      current.count > prev.count ? current : prev\n    )\n    return mostActive.status\n  }\n  \n  function getOrganizationStatusDistribution(metrics: OrganizationMetrics): { [key: string]: number } {\n    const distribution: { [key: string]: number } = {}\n    metrics.statusDistribution.forEach(item => {\n      distribution[item.status] = item.count\n    })\n    return distribution\n  }\n  \n  function getPrincipalProductDistribution(stats: PrincipalStats): Array<{\n    principalName: string\n    productCount: number\n    opportunityCount: number\n  }> {\n    return stats.top_organizations_by_principals.map(org => ({\n      principalName: org.organization_name,\n      productCount: Math.floor(Math.random() * 10) + 1, // Would come from actual data\n      opportunityCount: Math.floor(Math.random() * 5) + 1 // Would come from actual data\n    }))\n  }\n  \n  function calculateAverageResponseTime(): number {\n    // Would calculate from interaction data - placeholder for now\n    return 2.5 // days\n  }\n  \n  function calculatePrincipalEngagementRate(stats: PrincipalStats): number {\n    return (stats.principals_with_opportunities / Math.max(stats.total_principals, 1)) * 100\n  }\n  \n  function calculateProductAdoptionRate(): number {\n    // Would calculate from product-opportunity relationships - placeholder\n    return 65.5 // percentage\n  }\n  \n  function calculateQuarterOverQuarterGrowth(): number {\n    // Would calculate from historical data - placeholder\n    return 12.3 // percentage\n  }\n  \n  function calculateYearOverYearGrowth(): number {\n    // Would calculate from historical data - placeholder\n    return 28.7 // percentage\n  }\n  \n  function calculateForecastedRevenue(kpis: OpportunityKPIs): number {\n    // Calculate based on probability-weighted pipeline\n    return kpis.total_pipeline_value * (kpis.conversion_rate / 100)\n  }\n  \n  function calculateProbabilityWeightedPipeline(kpis: OpportunityKPIs): number {\n    // Calculate weighted pipeline based on stage probabilities\n    return kpis.total_pipeline_value * (kpis.average_probability / 100)\n  }\n  \n  function calculateExpectedCloseThisQuarter(kpis: OpportunityKPIs): number {\n    // Estimate based on current pipeline and historical patterns\n    return kpis.total_pipeline_value * 0.25 // 25% of pipeline expected to close\n  }\n  \n  // ===============================\n  // ACTIONS\n  // ===============================\n  \n  /**\n   * Refresh all dashboard data\n   */\n  const refreshDashboard = async (): Promise<void> => {\n    if (state.refreshing) return\n    \n    state.refreshing = true\n    state.error = null\n    \n    try {\n      // Refresh all dependent stores in parallel\n      await Promise.all([\n        opportunityStore.fetchKPIs(),\n        productStore.fetchStats(),\n        organizationStore.fetchDashboardMetrics(),\n        principalStore.fetchStats()\n      ])\n      \n      // Update aggregated data\n      state.kpis = aggregatedKPIs.value\n      state.performance = performanceMetrics.value\n      state.recentActivity = recentActivityFeed.value\n      \n      state.lastRefresh = new Date()\n      state.lastUpdated = new Date()\n      state.isDataStale = false\n      \n    } catch (error) {\n      console.error('Failed to refresh dashboard:', error)\n      state.error = error instanceof Error ? error.message : 'Failed to refresh dashboard data'\n    } finally {\n      state.refreshing = false\n    }\n  }\n  \n  /**\n   * Initialize dashboard data\n   */\n  const initializeDashboard = async (): Promise<void> => {\n    if (state.loading) return\n    \n    state.loading = true\n    state.error = null\n    \n    try {\n      // Initialize all stores if needed\n      await Promise.all([\n        opportunityStore.fetchOpportunities(),\n        productStore.fetchProducts(),\n        organizationStore.fetchOrganizations(),\n        principalStore.fetchPrincipals()\n      ])\n      \n      // Initial KPI calculation\n      await refreshDashboard()\n      \n    } catch (error) {\n      console.error('Failed to initialize dashboard:', error)\n      state.error = error instanceof Error ? error.message : 'Failed to initialize dashboard'\n    } finally {\n      state.loading = false\n    }\n  }\n  \n  /**\n   * Update dashboard filters\n   */\n  const updateFilters = (newFilters: Partial<DashboardFilters>): void => {\n    state.filters = { ...state.filters, ...newFilters }\n    \n    // Mark data as stale when filters change\n    state.isDataStale = true\n    \n    // Refresh data with new filters\n    refreshDashboard()\n  }\n  \n  /**\n   * Update time filter\n   */\n  const updateTimeFilter = (timeFilter: DashboardTimeFilter): void => {\n    updateFilters({ timeFilter })\n  }\n\n  /**\n   * Update user interface preferences\n   */\n  const updatePreferences = (newPreferences: Partial<DashboardPreferences>): void => {\n    state.preferences = { ...state.preferences, ...newPreferences }\n    \n    // Sync autoRefresh state with preferences\n    if (newPreferences.autoRefresh !== undefined) {\n      state.autoRefresh = newPreferences.autoRefresh\n      toggleAutoRefresh(newPreferences.autoRefresh)\n    }\n  }\n  \n  /**\n   * Toggle auto-refresh\n   */\n  const toggleAutoRefresh = (enabled: boolean): void => {\n    state.autoRefresh = enabled\n    \n    if (enabled) {\n      startAutoRefresh()\n    } else {\n      stopAutoRefresh()\n    }\n  }\n  \n  /**\n   * Start auto-refresh timer\n   */\n  const startAutoRefresh = (): void => {\n    stopAutoRefresh() // Clear any existing timer\n    \n    if (state.autoRefresh && state.filters.refreshInterval > 0) {\n      autoRefreshTimer.value = setInterval(() => {\n        if (!state.refreshing && !state.loading) {\n          refreshDashboard()\n        }\n      }, state.filters.refreshInterval * 60 * 1000) // Convert minutes to milliseconds\n    }\n  }\n  \n  /**\n   * Stop auto-refresh timer\n   */\n  const stopAutoRefresh = (): void => {\n    if (autoRefreshTimer.value) {\n      clearInterval(autoRefreshTimer.value)\n      autoRefreshTimer.value = null\n    }\n  }\n  \n  /**\n   * Export dashboard data\n   */\n  const exportDashboard = async (format: 'json' | 'csv' = 'json'): Promise<string> => {\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      kpis: state.kpis,\n      performance: state.performance,\n      recentActivity: state.recentActivity,\n      filters: state.filters\n    }\n    \n    if (format === 'json') {\n      return JSON.stringify(exportData, null, 2)\n    } else {\n      // Convert to CSV format - simplified implementation\n      const csvRows = [\n        'Metric,Value',\n        `Total Opportunities,${state.kpis?.totalOpportunities || 0}`,\n        `Total Products,${state.kpis?.totalProducts || 0}`,\n        `Total Organizations,${state.kpis?.totalOrganizations || 0}`,\n        `Pipeline Value,${state.kpis?.pipelineValue || 0}`,\n        `Conversion Rate,${state.kpis?.conversionRate || 0}`,\n        `Monthly Growth,${state.kpis?.monthlyGrowthRate || 0}`\n      ]\n      return csvRows.join('\\n')\n    }\n  }\n  \n  /**\n   * Reset dashboard to default state\n   */\n  const resetDashboard = (): void => {\n    state.kpis = null\n    state.performance = null\n    state.recentActivity = []\n    state.error = null\n    state.lastUpdated = null\n    state.lastRefresh = null\n    state.isDataStale = false\n    \n    // Reset filters to defaults\n    state.filters = {\n      timeFilter: { period: 'month' },\n      organizationTypes: [],\n      opportunityStages: [],\n      productCategories: [],\n      showInactiveItems: false,\n      refreshInterval: 5\n    }\n    \n    // Reset preferences to defaults\n    state.preferences = {\n      sidebarCollapsed: false,\n      weekFilterEnabled: false,\n      autoRefresh: true,\n      theme: 'light'\n    }\n    \n    stopAutoRefresh()\n  }\n  \n  // ===============================\n  // WATCHERS\n  // ===============================\n  \n  // Watch for changes in dependent stores and update KPIs\n  watch(\n    [\n      () => opportunityStore.kpis,\n      () => productStore.stats,\n      () => organizationStore.dashboardMetrics,\n      () => principalStore.stats\n    ],\n    () => {\n      if (aggregatedKPIs.value) {\n        state.kpis = aggregatedKPIs.value\n        state.performance = performanceMetrics.value\n        state.recentActivity = recentActivityFeed.value\n        state.lastUpdated = new Date()\n      }\n    },\n    { deep: true }\n  )\n  \n  // Watch for data freshness\n  watch(isDataFresh, (fresh) => {\n    state.isDataStale = !fresh\n  })\n  \n  // ===============================\n  // LIFECYCLE\n  // ===============================\n  \n  // Start auto-refresh when store is created\n  if (state.autoRefresh) {\n    startAutoRefresh()\n  }\n  \n  // ===============================\n  // RETURN PUBLIC API\n  // ===============================\n  \n  return {\n    // State\n    kpis: computed(() => state.kpis),\n    performance: computed(() => state.performance),\n    recentActivity: computed(() => state.recentActivity),\n    loading: computed(() => state.loading),\n    refreshing: computed(() => state.refreshing),\n    error: computed(() => state.error),\n    lastUpdated: computed(() => state.lastUpdated),\n    lastRefresh: computed(() => state.lastRefresh),\n    filters: computed(() => state.filters),\n    preferences: computed(() => state.preferences),\n    autoRefresh: computed(() => state.autoRefresh),\n    isDataStale: computed(() => state.isDataStale),\n    isDataFresh,\n    isAnyStoreLoading,\n    \n    // Computed aggregations\n    aggregatedKPIs,\n    performanceMetrics,\n    recentActivityFeed,\n    \n    // Actions\n    initializeDashboard,\n    refreshDashboard,\n    updateFilters,\n    updateTimeFilter,\n    updatePreferences,\n    toggleAutoRefresh,\n    exportDashboard,\n    resetDashboard,\n    \n    // Internal methods for testing\n    startAutoRefresh,\n    stopAutoRefresh\n  }\n})\n\n// Export types are already declared in the interface definitions above\n// No need for duplicate export declarations"],"names":["useDashboardStore","defineStore","opportunityStore","useOpportunityStore","productStore","useProductStore","organizationStore","useOrganizationStore","principalStore","usePrincipalStore","state","reactive","autoRefreshTimer","ref","aggregatedKPIs","computed","oppKPIs","prodStats","orgMetrics","princStats","calculateNewOrganizationsThisMonth","getMostActiveOrganizationType","getOrganizationStatusDistribution","getPrincipalProductDistribution","performanceMetrics","calculateAverageResponseTime","calculatePrincipalEngagementRate","calculateProductAdoptionRate","calculateQuarterOverQuarterGrowth","calculateYearOverYearGrowth","calculateForecastedRevenue","calculateProbabilityWeightedPipeline","calculateExpectedCloseThisQuarter","recentActivityFeed","activities","opp","org","b","isDataFresh","isAnyStoreLoading","metrics","currentMonth","activity","sum","prev","current","distribution","item","stats","kpis","refreshDashboard","error","initializeDashboard","updateFilters","newFilters","updateTimeFilter","timeFilter","updatePreferences","newPreferences","toggleAutoRefresh","enabled","startAutoRefresh","stopAutoRefresh","exportDashboard","format","exportData","_a","_b","_c","_d","_e","_f","resetDashboard","watch","fresh"],"mappings":"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"}
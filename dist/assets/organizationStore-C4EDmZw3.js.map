{"version":3,"file":"organizationStore-C4EDmZw3.js","sources":["../../src/types/organizations.ts","../../src/stores/organizationStore.ts"],"sourcesContent":["// =============================================================================\n// Organization Types and Validation Schemas\n// =============================================================================\n// TypeScript types and Yup validation schemas for organizations functionality\n// Generated from Supabase database schema - Stage 3 Enhanced Implementation\n// Updated for Organization Form Redesign with A/B/C/D Priority System\n// =============================================================================\n\nimport * as yup from 'yup';\nimport type { \n  Organization, \n  OrganizationType,\n  OrganizationSize,\n  OrganizationStatus,\n  InteractionType,\n  InteractionDirection\n} from './database.types';\n\n// =============================================================================\n// Enhanced Organization Types for Form Redesign - Stage 3.1\n// =============================================================================\n\n// Priority mapping types (A/B/C/D system)\nexport type OrganizationPriority = 'A' | 'B' | 'C' | 'D';\n\nexport interface PriorityOption {\n  value: number; // 90, 70, 50, 30\n  label: OrganizationPriority; // A, B, C, D\n  description: string;\n}\n\n// Enhanced status options for new business requirements\nexport type EnhancedOrganizationStatus = \n  | 'Prospect' \n  | 'Active Customer' \n  | 'Inactive Customer' \n  | 'Other'\n  | 'Principal'\n  | 'Distributor';\n\n// Principal/Distributor custom fields interface\nexport interface OrganizationCustomFields {\n  is_principal?: boolean;\n  is_distributor?: boolean;\n  distributor_id?: string; // Reference to distributor organization\n  account_manager_id?: string;\n  food_beverage_segment?: string;\n  [key: string]: any;\n}\n\n// =============================================================================\n// Organization Validation Schemas\n// =============================================================================\n\n// Base organization schema for creation/updates\nexport const organizationSchema = yup.object({\n  name: yup\n    .string()\n    .required('Organization name is required')\n    .trim()\n    .min(1, 'Organization name cannot be empty')\n    .max(255, 'Organization name must be less than 255 characters'),\n  \n  legal_name: yup\n    .string()\n    .nullable()\n    .max(255, 'Legal name must be less than 255 characters'),\n  \n  description: yup\n    .string()\n    .nullable(),\n  \n  industry: yup\n    .string()\n    .nullable()\n    .max(255, 'Industry must be less than 255 characters'),\n  \n  type: yup\n    .mixed<OrganizationType>()\n    .oneOf(['B2B', 'B2C', 'B2B2C', 'Non-Profit', 'Government', 'Other'])\n    .nullable(),\n  \n  size: yup\n    .mixed<OrganizationSize>()\n    .oneOf(['Startup', 'Small', 'Medium', 'Large', 'Enterprise'])\n    .nullable(),\n  \n  status: yup\n    .mixed<OrganizationStatus>()\n    .oneOf(['Active', 'Inactive', 'Prospect', 'Customer', 'Partner', 'Vendor'])\n    .nullable(),\n  \n  website: yup\n    .string()\n    .nullable()\n    .matches(/^https?:\\/\\/[^\\s]+$/, 'Website must be a valid URL starting with http:// or https://'),\n  \n  email: yup\n    .string()\n    .nullable()\n    .email('Email must be a valid email address'),\n  \n  primary_phone: yup\n    .string()\n    .nullable()\n    .max(50, 'Primary phone must be less than 50 characters'),\n  \n  secondary_phone: yup\n    .string()\n    .nullable()\n    .max(50, 'Secondary phone must be less than 50 characters'),\n  \n  address_line_1: yup\n    .string()\n    .nullable()\n    .max(255, 'Address line 1 must be less than 255 characters'),\n  \n  address_line_2: yup\n    .string()\n    .nullable()\n    .max(255, 'Address line 2 must be less than 255 characters'),\n  \n  city: yup\n    .string()\n    .nullable()\n    .max(100, 'City must be less than 100 characters'),\n  \n  state_province: yup\n    .string()\n    .nullable()\n    .max(100, 'State/Province must be less than 100 characters'),\n  \n  postal_code: yup\n    .string()\n    .nullable()\n    .max(20, 'Postal code must be less than 20 characters'),\n  \n  country: yup\n    .string()\n    .nullable()\n    .max(100, 'Country must be less than 100 characters'),\n  \n  founded_year: yup\n    .number()\n    .nullable()\n    .integer('Founded year must be a whole number')\n    .min(1800, 'Founded year must be 1800 or later')\n    .max(new Date().getFullYear() + 1, 'Founded year cannot be in the future'),\n  \n  employees_count: yup\n    .number()\n    .nullable()\n    .integer('Employee count must be a whole number')\n    .min(0, 'Employee count cannot be negative'),\n  \n  annual_revenue: yup\n    .number()\n    .nullable()\n    .min(0, 'Annual revenue cannot be negative'),\n  \n  currency_code: yup\n    .string()\n    .nullable()\n    .matches(/^[A-Z]{3}$/, 'Currency code must be 3 uppercase letters (e.g., USD)'),\n  \n  lead_source: yup\n    .string()\n    .nullable()\n    .max(255, 'Lead source must be less than 255 characters'),\n  \n  lead_score: yup\n    .number()\n    .nullable()\n    .integer('Lead score must be a whole number')\n    .min(0, 'Lead score cannot be negative')\n    .max(100, 'Lead score cannot exceed 100'),\n  \n  tags: yup\n    .array()\n    .of(yup.string())\n    .nullable(),\n  \n  custom_fields: yup\n    .object()\n    .nullable(),\n  \n  parent_org_id: yup\n    .string()\n    .nullable()\n    .uuid('Parent organization ID must be a valid UUID'),\n  \n  assigned_user_id: yup\n    .string()\n    .nullable()\n    .uuid('Assigned user ID must be a valid UUID'),\n  \n  last_contact_date: yup\n    .date()\n    .nullable(),\n  \n  next_follow_up_date: yup\n    .date()\n    .nullable(),\n\n  // Principal/Distributor fields for new business logic\n  is_principal: yup\n    .boolean()\n    .nullable(),\n\n  is_distributor: yup\n    .boolean()\n    .nullable(),\n\n  distributor_id: yup\n    .string()\n    .nullable()\n    .uuid('Distributor ID must be a valid UUID'),\n\n  account_manager_id: yup\n    .string()\n    .nullable()\n    .uuid('Account Manager ID must be a valid UUID')\n});\n\n// Schema for creating new organizations\nexport const createOrganizationSchema = organizationSchema;\n\n// Schema for updating organizations (all fields optional except constraints)\nexport const updateOrganizationSchema = organizationSchema.partial();\n\n// =============================================================================\n// Organization Interaction Validation Schemas\n// =============================================================================\n\nexport const organizationInteractionSchema = yup.object({\n  organization_id: yup\n    .string()\n    .required('Organization ID is required')\n    .uuid('Organization ID must be a valid UUID'),\n  \n  contact_id: yup\n    .string()\n    .nullable()\n    .uuid('Contact ID must be a valid UUID'),\n  \n  type: yup\n    .mixed<InteractionType>()\n    .oneOf(['Email', 'Phone', 'Meeting', 'Demo', 'Proposal', 'Contract', 'Note', 'Task', 'Event', 'Social', 'Website', 'Other'])\n    .required('Interaction type is required'),\n  \n  direction: yup\n    .mixed<InteractionDirection>()\n    .oneOf(['Inbound', 'Outbound'])\n    .nullable(),\n  \n  subject: yup\n    .string()\n    .nullable()\n    .max(500, 'Subject must be less than 500 characters')\n    .test('not-empty', 'Subject cannot be empty if provided', function(value) {\n      return value === null || value === undefined || value.trim().length > 0;\n    }),\n  \n  description: yup\n    .string()\n    .nullable(),\n  \n  interaction_date: yup\n    .date()\n    .required('Interaction date is required'),\n  \n  duration_minutes: yup\n    .number()\n    .nullable()\n    .integer('Duration must be a whole number of minutes')\n    .min(0, 'Duration cannot be negative'),\n  \n  tags: yup\n    .array()\n    .of(yup.string())\n    .nullable(),\n  \n  metadata: yup\n    .object()\n    .nullable(),\n  \n  created_by_user_id: yup\n    .string()\n    .nullable()\n    .uuid('Created by user ID must be a valid UUID')\n});\n\nexport const createOrganizationInteractionSchema = organizationInteractionSchema;\nexport const updateOrganizationInteractionSchema = organizationInteractionSchema.partial().shape({\n  organization_id: yup.string().uuid('Organization ID must be a valid UUID'), // Keep required for updates\n});\n\n// =============================================================================\n// Organization Document Validation Schemas\n// =============================================================================\n\nexport const organizationDocumentSchema = yup.object({\n  organization_id: yup\n    .string()\n    .required('Organization ID is required')\n    .uuid('Organization ID must be a valid UUID'),\n  \n  name: yup\n    .string()\n    .required('Document name is required')\n    .trim()\n    .min(1, 'Document name cannot be empty')\n    .max(500, 'Document name must be less than 500 characters'),\n  \n  description: yup\n    .string()\n    .nullable(),\n  \n  file_type: yup\n    .string()\n    .nullable()\n    .max(50, 'File type must be less than 50 characters'),\n  \n  file_size_bytes: yup\n    .number()\n    .nullable()\n    .integer('File size must be a whole number')\n    .min(0, 'File size cannot be negative'),\n  \n  storage_path: yup\n    .string()\n    .nullable()\n    .max(1000, 'Storage path must be less than 1000 characters'),\n  \n  external_url: yup\n    .string()\n    .nullable()\n    .matches(/^https?:\\/\\/[^\\s]+$/, 'External URL must be a valid URL starting with http:// or https://')\n    .max(1000, 'External URL must be less than 1000 characters'),\n  \n  category: yup\n    .string()\n    .nullable()\n    .max(255, 'Category must be less than 255 characters'),\n  \n  tags: yup\n    .array()\n    .of(yup.string())\n    .nullable(),\n  \n  is_public: yup\n    .boolean()\n    .nullable(),\n  \n  access_level: yup\n    .string()\n    .nullable()\n    .max(50, 'Access level must be less than 50 characters'),\n  \n  version: yup\n    .string()\n    .nullable()\n    .max(50, 'Version must be less than 50 characters'),\n  \n  parent_document_id: yup\n    .string()\n    .nullable()\n    .uuid('Parent document ID must be a valid UUID'),\n  \n  uploaded_by_user_id: yup\n    .string()\n    .nullable()\n    .uuid('Uploaded by user ID must be a valid UUID')\n}).test('has-location', 'Document must have either a storage path or external URL', function(value) {\n  return !!(value.storage_path || value.external_url);\n});\n\nexport const createOrganizationDocumentSchema = organizationDocumentSchema;\nexport const updateOrganizationDocumentSchema = organizationDocumentSchema.partial().shape({\n  organization_id: yup.string().uuid('Organization ID must be a valid UUID'), // Keep required for updates\n});\n\n// =============================================================================\n// Organization Analytics Validation Schemas\n// =============================================================================\n\nexport const organizationAnalyticsSchema = yup.object({\n  organization_id: yup\n    .string()\n    .required('Organization ID is required')\n    .uuid('Organization ID must be a valid UUID'),\n  \n  period_start: yup\n    .date()\n    .required('Period start date is required'),\n  \n  period_end: yup\n    .date()\n    .required('Period end date is required')\n    .test('after-start', 'Period end must be after period start', function(value) {\n      const { period_start } = this.parent;\n      if (!period_start || !value) return true;\n      return value > period_start;\n    }),\n  \n  period_type: yup\n    .string()\n    .required('Period type is required')\n    .oneOf(['daily', 'weekly', 'monthly', 'quarterly', 'yearly'], 'Period type must be one of: daily, weekly, monthly, quarterly, yearly'),\n  \n  total_interactions: yup\n    .number()\n    .nullable()\n    .integer('Total interactions must be a whole number')\n    .min(0, 'Total interactions cannot be negative'),\n  \n  email_interactions: yup\n    .number()\n    .nullable()\n    .integer('Email interactions must be a whole number')\n    .min(0, 'Email interactions cannot be negative'),\n  \n  phone_interactions: yup\n    .number()\n    .nullable()\n    .integer('Phone interactions must be a whole number')\n    .min(0, 'Phone interactions cannot be negative'),\n  \n  meeting_interactions: yup\n    .number()\n    .nullable()\n    .integer('Meeting interactions must be a whole number')\n    .min(0, 'Meeting interactions cannot be negative'),\n  \n  revenue_generated: yup\n    .number()\n    .nullable()\n    .min(0, 'Revenue generated cannot be negative'),\n  \n  deals_closed: yup\n    .number()\n    .nullable()\n    .integer('Deals closed must be a whole number')\n    .min(0, 'Deals closed cannot be negative'),\n  \n  deals_in_progress: yup\n    .number()\n    .nullable()\n    .integer('Deals in progress must be a whole number')\n    .min(0, 'Deals in progress cannot be negative'),\n  \n  lead_score_change: yup\n    .number()\n    .nullable()\n    .integer('Lead score change must be a whole number'),\n  \n  conversion_events: yup\n    .number()\n    .nullable()\n    .integer('Conversion events must be a whole number')\n    .min(0, 'Conversion events cannot be negative'),\n  \n  documents_added: yup\n    .number()\n    .nullable()\n    .integer('Documents added must be a whole number')\n    .min(0, 'Documents added cannot be negative'),\n  \n  documents_accessed: yup\n    .number()\n    .nullable()\n    .integer('Documents accessed must be a whole number')\n    .min(0, 'Documents accessed cannot be negative'),\n  \n  new_contacts_added: yup\n    .number()\n    .nullable()\n    .integer('New contacts added must be a whole number')\n    .min(0, 'New contacts added cannot be negative'),\n  \n  active_contacts: yup\n    .number()\n    .nullable()\n    .integer('Active contacts must be a whole number')\n    .min(0, 'Active contacts cannot be negative'),\n  \n  custom_metrics: yup\n    .object()\n    .nullable()\n});\n\nexport const createOrganizationAnalyticsSchema = organizationAnalyticsSchema;\nexport const updateOrganizationAnalyticsSchema = organizationAnalyticsSchema.partial().shape({\n  organization_id: yup.string().uuid('Organization ID must be a valid UUID'), // Keep required for updates\n});\n\n// =============================================================================\n// Type Inference from Schemas\n// =============================================================================\n\n// Infer TypeScript types from Yup schemas for form handling\nexport type OrganizationFormData = yup.InferType<typeof organizationSchema>;\nexport type CreateOrganizationFormData = yup.InferType<typeof createOrganizationSchema>;\nexport type UpdateOrganizationFormData = yup.InferType<typeof updateOrganizationSchema>;\n\nexport type OrganizationInteractionFormData = yup.InferType<typeof organizationInteractionSchema>;\nexport type CreateOrganizationInteractionFormData = yup.InferType<typeof createOrganizationInteractionSchema>;\nexport type UpdateOrganizationInteractionFormData = yup.InferType<typeof updateOrganizationInteractionSchema>;\n\nexport type OrganizationDocumentFormData = yup.InferType<typeof organizationDocumentSchema>;\nexport type CreateOrganizationDocumentFormData = yup.InferType<typeof createOrganizationDocumentSchema>;\nexport type UpdateOrganizationDocumentFormData = yup.InferType<typeof updateOrganizationDocumentSchema>;\n\nexport type OrganizationAnalyticsFormData = yup.InferType<typeof organizationAnalyticsSchema>;\nexport type CreateOrganizationAnalyticsFormData = yup.InferType<typeof createOrganizationAnalyticsSchema>;\nexport type UpdateOrganizationAnalyticsFormData = yup.InferType<typeof updateOrganizationAnalyticsSchema>;\n\n// =============================================================================\n// Form Type Aliases for Composables\n// =============================================================================\n\n// Form types used by composables and components\nexport type OrganizationCreateForm = CreateOrganizationFormData;\nexport type OrganizationUpdateForm = UpdateOrganizationFormData;\nexport type OrganizationInteractionCreateForm = CreateOrganizationInteractionFormData;\n\n// Enhanced form data interface for redesigned form\nexport interface EnhancedOrganizationCreateForm extends Omit<OrganizationCreateForm, 'status' | 'custom_fields'> {\n  status: EnhancedOrganizationStatus;\n  custom_fields: OrganizationCustomFields;\n  priority_letter: OrganizationPriority; // UI-friendly priority representation\n  assigned_contacts?: string[]; // Array of contact IDs to associate\n}\n\n// Schema exports for composables\nexport const organizationCreateSchema = createOrganizationSchema;\nexport const organizationUpdateSchema = updateOrganizationSchema;\nexport const organizationInteractionCreateSchema = createOrganizationInteractionSchema;\n\n// Enhanced validation schema for redesigned form\nexport const enhancedOrganizationCreateSchema = organizationCreateSchema.shape({\n  status: yup.mixed<EnhancedOrganizationStatus>()\n    .oneOf(['Prospect', 'Active Customer', 'Inactive Customer', 'Other', 'Principal', 'Distributor'])\n    .required('Organization status is required'),\n  \n  custom_fields: yup.object({\n    is_principal: yup.boolean().nullable(),\n    is_distributor: yup.boolean().nullable(),\n    distributor_id: yup.string().nullable().uuid('Distributor ID must be valid UUID'),\n    account_manager_id: yup.string().nullable().uuid('Account Manager ID must be valid UUID'),\n    food_beverage_segment: yup.string().nullable().max(255)\n  }).test('principal-distributor-exclusive', 'Cannot be both Principal and Distributor', function(value) {\n    return !(value?.is_principal && value?.is_distributor);\n  }),\n  \n  priority_letter: yup.mixed<OrganizationPriority>()\n    .oneOf(['A', 'B', 'C', 'D'])\n    .required('Priority is required'),\n    \n  assigned_contacts: yup.array().of(yup.string().uuid()).nullable()\n});\n\n// =============================================================================\n// Organization List and Detail Types\n// =============================================================================\n\n// Organization list item for tables and cards\nexport interface OrganizationListItem {\n  id: string;\n  name: string;\n  legal_name: string | null;\n  industry: string | null;\n  type: OrganizationType | null;\n  size: OrganizationSize | null;\n  status: OrganizationStatus | null;\n  website: string | null;\n  email: string | null;\n  primary_phone: string | null;\n  city: string | null;\n  country: string | null;\n  employees_count: number | null;\n  annual_revenue: number | null;\n  lead_score: number | null;\n  contact_count?: number;\n  last_interaction_date: string | null;\n  next_follow_up_date: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n}\n\n// Organization detail data with relationships\nexport interface OrganizationDetailData extends Organization {\n  contact_count: number;\n  interaction_count: number;\n  document_count: number;\n  recent_interactions: Array<{\n    id: string;\n    type: InteractionType | null;\n    subject: string | null;\n    interaction_date: string | null;\n    contact_name?: string;\n  }>;\n}\n\n// Organization creation data\nexport interface OrganizationCreateData {\n  name: string;\n  legal_name?: string | null;\n  description?: string | null;\n  industry?: string | null;\n  type?: OrganizationType | null;\n  size?: OrganizationSize | null;\n  status?: OrganizationStatus | null;\n  website?: string | null;\n  email?: string | null;\n  primary_phone?: string | null;\n  secondary_phone?: string | null;\n  address_line_1?: string | null;\n  address_line_2?: string | null;\n  city?: string | null;\n  state_province?: string | null;\n  postal_code?: string | null;\n  country?: string | null;\n  founded_year?: number | null;\n  employees_count?: number | null;\n  annual_revenue?: number | null;\n  currency_code?: string | null;\n  lead_source?: string | null;\n  lead_score?: number | null;\n  parent_org_id?: string | null;\n  tags?: string[] | null;\n  next_follow_up_date?: Date | null;\n}\n\n// =============================================================================\n// Filter and Sort Types\n// =============================================================================\n\n// Organization filters interface\nexport interface OrganizationFilters {\n  search?: string;\n  industry?: string[];\n  type?: OrganizationType[];\n  size?: OrganizationSize[];\n  status?: OrganizationStatus[];\n  country?: string[];\n  tags?: string[];\n  leadScoreRange?: {\n    min?: number;\n    max?: number;\n  };\n  employeeRange?: {\n    min?: number;\n    max?: number;\n  };\n  revenueRange?: {\n    min?: number;\n    max?: number;\n  };\n  foundedYearRange?: {\n    min?: number;\n    max?: number;\n  };\n  lastContactDateRange?: {\n    start?: Date;\n    end?: Date;\n  };\n}\n\n// Sort configuration\nexport type OrganizationSortField = \n  | 'name' \n  | 'legal_name' \n  | 'industry' \n  | 'type' \n  | 'size' \n  | 'status' \n  | 'lead_score' \n  | 'employees_count' \n  | 'annual_revenue' \n  | 'founded_year' \n  | 'created_at' \n  | 'updated_at' \n  | 'last_contact_date' \n  | 'next_follow_up_date';\n\nexport type SortOrder = 'asc' | 'desc';\n\nexport interface OrganizationSortConfig {\n  field: OrganizationSortField;\n  order: SortOrder;\n}\n\n// =============================================================================\n// Pagination and Response Types\n// =============================================================================\n\n// Pagination configuration\nexport interface PaginationConfig {\n  page: number;\n  limit: number;\n  total: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\n// Organization list response\nexport interface OrganizationListResponse {\n  data: OrganizationListItem[];\n  pagination: PaginationConfig;\n  filters: OrganizationFilters;\n  sort: OrganizationSortConfig;\n}\n\n// =============================================================================\n// Search and Validation Types\n// =============================================================================\n\n// Organization search form\nexport interface OrganizationSearchForm {\n  search?: string | null;\n  industry?: string | null;\n  type?: OrganizationType | null;\n  size?: OrganizationSize | null;\n  status?: OrganizationStatus | null;\n  country?: string | null;\n  min_employees?: number | null;\n  max_employees?: number | null;\n  min_revenue?: number | null;\n  max_revenue?: number | null;\n  min_lead_score?: number | null;\n  max_lead_score?: number | null;\n  tags?: string[] | null;\n  limit?: number;\n  offset?: number;\n  sortBy?: OrganizationSortField;\n  sortOrder?: SortOrder;\n}\n\n// Search schema\nexport const organizationSearchSchema = yup.object({\n  search: yup.string().nullable().optional(),\n  industry: yup.string().nullable().optional(),\n  type: yup.mixed<OrganizationType>().oneOf(['B2B', 'B2C', 'B2B2C', 'Non-Profit', 'Government', 'Other']).nullable().optional(),\n  size: yup.mixed<OrganizationSize>().oneOf(['Startup', 'Small', 'Medium', 'Large', 'Enterprise']).nullable().optional(),\n  status: yup.mixed<OrganizationStatus>().oneOf(['Active', 'Inactive', 'Prospect', 'Customer', 'Partner', 'Vendor']).nullable().optional(),\n  country: yup.string().nullable().optional(),\n  min_employees: yup.number().min(0).nullable().optional(),\n  max_employees: yup.number().min(0).nullable().optional(),\n  min_revenue: yup.number().min(0).nullable().optional(),\n  max_revenue: yup.number().min(0).nullable().optional(),\n  min_lead_score: yup.number().min(0).max(100).nullable().optional(),\n  max_lead_score: yup.number().min(0).max(100).nullable().optional(),\n  tags: yup.array().of(yup.string()).nullable().optional(),\n  limit: yup.number().min(1).max(100).optional().default(20),\n  offset: yup.number().min(0).optional().default(0),\n  sortBy: yup.mixed<OrganizationSortField>().oneOf(['name', 'legal_name', 'industry', 'type', 'size', 'status', 'lead_score', 'employees_count', 'annual_revenue', 'founded_year', 'created_at', 'updated_at', 'last_contact_date', 'next_follow_up_date']).optional().default('name'),\n  sortOrder: yup.mixed<SortOrder>().oneOf(['asc', 'desc']).optional().default('asc')\n});\n\n// Validation error type\nexport interface OrganizationValidationError {\n  field: string;\n  message: string;\n}\n\n// Form validation result\nexport interface OrganizationFormValidationResult<T> {\n  isValid: boolean;\n  data?: T;\n  errors: OrganizationValidationError[];\n}\n\n// =============================================================================\n// Metrics and Analytics Types\n// =============================================================================\n\n// Organization metrics for dashboard and analytics\nexport interface OrganizationMetrics {\n  totalOrganizations: number;\n  activeOrganizations: number;\n  prospects: number;\n  customers: number;\n  partners: number;\n  averageLeadScore: number;\n  totalRevenue: number;\n  monthlyGrowth: number;\n  industryDistribution: Array<{\n    industry: string;\n    count: number;\n    percentage: number;\n  }>;\n  statusDistribution: Array<{\n    status: OrganizationStatus;\n    count: number;\n    percentage: number;\n  }>;\n  recentActivity: Array<{\n    date: string;\n    organizationsAdded: number;\n    interactionsLogged: number;\n  }>;\n}\n\n// =============================================================================\n// Bulk Operations Types\n// =============================================================================\n\n// Bulk operation types\nexport interface BulkOrganizationOperationData {\n  type: 'delete' | 'update_status' | 'update_assigned_user' | 'add_tags' | 'remove_tags' | 'export';\n  organizationIds: string[];\n  data?: {\n    status?: OrganizationStatus;\n    assigned_user_id?: string;\n    tags?: string[];\n  };\n}\n\nexport type BulkOrganizationOperation = BulkOrganizationOperationData;\n\nexport interface BulkOperationResult {\n  operation: BulkOrganizationOperation;\n  success: boolean;\n  total: number;\n  successful: number;\n  failed: number;\n  errors: Array<{\n    id: string;\n    error: string;\n  }>;\n}\n\n// =============================================================================\n// Enum Arrays for Form Options\n// =============================================================================\n\nexport const ORGANIZATION_TYPES: OrganizationType[] = [\n  'B2B', 'B2C', 'B2B2C', 'Non-Profit', 'Government', 'Other'\n];\n\nexport const ORGANIZATION_SIZES: OrganizationSize[] = [\n  'Startup', 'Small', 'Medium', 'Large', 'Enterprise'\n];\n\nexport const ORGANIZATION_STATUSES: OrganizationStatus[] = [\n  'Active', 'Inactive', 'Prospect', 'Customer', 'Partner', 'Vendor'\n];\n\n// Enhanced status options for redesigned form\nexport const ENHANCED_ORGANIZATION_STATUSES: EnhancedOrganizationStatus[] = [\n  'Prospect', 'Active Customer', 'Inactive Customer', 'Other', 'Principal', 'Distributor'\n];\n\n// Priority options with mapping values\nexport const PRIORITY_OPTIONS: PriorityOption[] = [\n  { value: 90, label: 'A', description: 'Highest priority - Strategic accounts' },\n  { value: 70, label: 'B', description: 'High priority - Major opportunities' },\n  { value: 50, label: 'C', description: 'Medium priority - Qualified prospects' },\n  { value: 30, label: 'D', description: 'Lower priority - New prospects' }\n];\n\nexport const INTERACTION_TYPES: InteractionType[] = [\n  'Email', 'Phone', 'Meeting', 'Demo', 'Proposal', 'Contract', \n  'Note', 'Task', 'Event', 'Social', 'Website', 'Other'\n];\n\nexport const INTERACTION_DIRECTIONS: InteractionDirection[] = [\n  'Inbound', 'Outbound'\n];\n\nexport const PERIOD_TYPES = [\n  'daily', 'weekly', 'monthly', 'quarterly', 'yearly'\n] as const;\n\n// =============================================================================\n// Helper Functions\n// =============================================================================\n\n/**\n * Validates organization data against the schema\n */\nexport const validateOrganization = async (data: unknown): Promise<OrganizationFormData> => {\n  return await organizationSchema.validate(data, { abortEarly: false });\n};\n\n/**\n * Validates organization interaction data against the schema\n */\nexport const validateOrganizationInteraction = async (data: unknown): Promise<OrganizationInteractionFormData> => {\n  return await organizationInteractionSchema.validate(data, { abortEarly: false });\n};\n\n/**\n * Validates organization document data against the schema\n */\nexport const validateOrganizationDocument = async (data: unknown): Promise<OrganizationDocumentFormData> => {\n  return await organizationDocumentSchema.validate(data, { abortEarly: false });\n};\n\n/**\n * Validates organization analytics data against the schema\n */\nexport const validateOrganizationAnalytics = async (data: unknown): Promise<OrganizationAnalyticsFormData> => {\n  return await organizationAnalyticsSchema.validate(data, { abortEarly: false });\n};\n\n/**\n * Gets display label for organization type\n */\nexport const getOrganizationTypeLabel = (type: OrganizationType | null): string => {\n  if (!type) return 'Not specified';\n  return type;\n};\n\n/**\n * Gets display label for organization status\n */\nexport const getOrganizationStatusLabel = (status: OrganizationStatus | null): string => {\n  if (!status) return 'Not specified';\n  return status;\n};\n\n/**\n * Gets CSS class for organization status badge\n */\nexport const getOrganizationStatusClass = (status: OrganizationStatus | null): string => {\n  switch (status) {\n    case 'Active': return 'bg-green-100 text-green-800';\n    case 'Customer': return 'bg-blue-100 text-blue-800';\n    case 'Prospect': return 'bg-yellow-100 text-yellow-800';\n    case 'Partner': return 'bg-purple-100 text-purple-800';\n    case 'Vendor': return 'bg-indigo-100 text-indigo-800';\n    case 'Inactive': return 'bg-gray-100 text-gray-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n};\n\n/**\n * Gets CSS class for enhanced organization status badge\n */\nexport const getEnhancedOrganizationStatusClass = (status: EnhancedOrganizationStatus | null): string => {\n  switch (status) {\n    case 'Active Customer': return 'bg-green-100 text-green-800';\n    case 'Inactive Customer': return 'bg-gray-100 text-gray-800';\n    case 'Prospect': return 'bg-yellow-100 text-yellow-800';\n    case 'Principal': return 'bg-purple-100 text-purple-800';\n    case 'Distributor': return 'bg-indigo-100 text-indigo-800';\n    case 'Other': return 'bg-blue-100 text-blue-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n};\n\n/**\n * Maps priority letter to lead score value\n */\nexport const priorityLetterToScore = (letter: OrganizationPriority): number => {\n  const mapping = { 'A': 90, 'B': 70, 'C': 50, 'D': 30 };\n  return mapping[letter];\n};\n\n/**\n * Maps lead score to priority letter\n */\nexport const scoreToPriorityLetter = (score: number | null): OrganizationPriority => {\n  if (!score) return 'D';\n  if (score >= 90) return 'A';\n  if (score >= 70) return 'B';\n  if (score >= 50) return 'C';\n  return 'D';\n};\n\n/**\n * Gets CSS class for priority badge\n */\nexport const getPriorityClass = (priority: OrganizationPriority): string => {\n  switch (priority) {\n    case 'A': return 'bg-red-100 text-red-800';\n    case 'B': return 'bg-orange-100 text-orange-800';\n    case 'C': return 'bg-yellow-100 text-yellow-800';\n    case 'D': return 'bg-blue-100 text-blue-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n};\n\n/**\n * Gets CSS class for lead score indicator\n */\nexport const getLeadScoreClass = (score: number | null): string => {\n  if (!score) return 'bg-gray-100 text-gray-800';\n  if (score >= 80) return 'bg-red-100 text-red-800'; // Hot\n  if (score >= 60) return 'bg-orange-100 text-orange-800'; // Warm\n  if (score >= 40) return 'bg-yellow-100 text-yellow-800'; // Cool\n  return 'bg-blue-100 text-blue-800'; // Cold\n};\n\n/**\n * Gets lead temperature label\n */\nexport const getLeadTemperatureLabel = (score: number | null): string => {\n  if (!score) return 'Cold';\n  if (score >= 80) return 'Hot';\n  if (score >= 60) return 'Warm';\n  if (score >= 40) return 'Cool';\n  return 'Cold';\n};\n\n// =============================================================================\n// Additional Analytics and Performance Interfaces\n// =============================================================================\n\n/**\n * Organization analytics summary data\n */\nexport interface OrganizationSummaryAnalytics {\n  id: string\n  organization_id: string\n  total_opportunities: number\n  active_opportunities: number\n  won_opportunities: number\n  total_interactions: number\n  last_activity_date: string | null\n  lead_score: number | null\n  conversion_rate: number | null\n  average_deal_size: number | null\n}\n\n/**\n * Monthly organization performance metrics\n */\nexport interface MonthlyOrganizationPerformance {\n  id: string\n  organization_id: string\n  month: string\n  year: number\n  opportunities_created: number\n  opportunities_won: number\n  total_revenue: number | null\n  interaction_count: number\n  lead_score_change: number | null\n}\n\n/**\n * Organization lead scoring data\n */\nexport interface OrganizationLeadScoring {\n  id: string\n  organization_id: string\n  lead_score: number\n  scoring_factors: Record<string, any> | null\n  last_updated: string\n  score_trend: 'up' | 'down' | 'stable' | null\n}\n\n/**\n * Organization interaction record\n */\nexport interface OrganizationInteraction {\n  id: string\n  organization_id: string\n  interaction_type: InteractionType\n  subject: string\n  interaction_date: string\n  notes: string | null\n  outcome: string | null\n  created_at: string\n  updated_at: string\n}\n\n/**\n * Organization document record\n */\nexport interface OrganizationDocument {\n  id: string\n  organization_id: string\n  document_name: string\n  document_type: string\n  file_path: string | null\n  file_size: number | null\n  uploaded_at: string\n  uploaded_by: string | null\n}\n\n// Re-export database types for convenience\nexport type {\n  Organization,\n  OrganizationType,\n  OrganizationSize,\n  OrganizationStatus,\n  InteractionType,\n  InteractionDirection\n} from './database.types';","import { defineStore } from 'pinia'\nimport { ref, computed, reactive } from 'vue'\nimport { supabase } from '@/config/supabaseClient'\nimport type {\n  Organization,\n  OrganizationInsert,\n  OrganizationUpdate\n} from '@/types/database.types'\nimport type {\n  OrganizationListItem,\n  OrganizationDetailData,\n  OrganizationListResponse,\n  OrganizationFilters,\n  OrganizationSortConfig,\n  OrganizationSortField,\n  PaginationConfig,\n  OrganizationMetrics,\n  BulkOrganizationOperation,\n  BulkOperationResult,\n  EnhancedOrganizationCreateForm,\n  PriorityOption,\n  OrganizationSummaryAnalytics,\n  MonthlyOrganizationPerformance,\n  OrganizationLeadScoring,\n  OrganizationInteraction,\n  OrganizationDocument\n} from '@/types/organizations'\nimport {\n  PRIORITY_OPTIONS,\n  priorityLetterToScore,\n  scoreToPriorityLetter\n} from '@/types/organizations'\n\n/**\n * Organization Store - Manages organization data and operations\n * Follows established Pinia patterns with reactive state management\n * Comprehensive CRUD operations with analytics and relationship management\n */\nexport const useOrganizationStore = defineStore('organization', () => {\n  // ===============================\n  // MONITORING INTEGRATION\n  // ===============================\n  \n  // Monitoring functionality removed - was unused\n  \n  // ===============================\n  // STATE MANAGEMENT\n  // ===============================\n  \n  // Core data state\n  const organizations = ref<OrganizationListItem[]>([])\n  const currentOrganization = ref<OrganizationDetailData | null>(null)\n  \n  // Analytics and performance data\n  const analyticsData = ref<OrganizationSummaryAnalytics[]>([])\n  const performanceData = ref<MonthlyOrganizationPerformance[]>([])\n  const leadScoringData = ref<OrganizationLeadScoring[]>([])\n  const dashboardMetrics = ref<OrganizationMetrics | null>(null)\n  \n  // Interactions and documents\n  const interactions = ref<OrganizationInteraction[]>([])\n  const documents = ref<OrganizationDocument[]>([])\n  \n  // Loading states - granular loading management\n  const loading = reactive({\n    organizations: false,\n    currentOrganization: false,\n    analytics: false,\n    performance: false,\n    leadScoring: false,\n    metrics: false,\n    interactions: false,\n    documents: false,\n    creating: false,\n    updating: false,\n    deleting: false,\n    bulkOperations: false\n  })\n  \n  // Error states\n  const errors = reactive({\n    organizations: '',\n    currentOrganization: '',\n    analytics: '',\n    performance: '',\n    leadScoring: '',\n    metrics: '',\n    interactions: '',\n    documents: '',\n    creating: '',\n    updating: '',\n    deleting: '',\n    bulkOperations: ''\n  })\n  \n  // Search and filtering state\n  const searchQuery = ref('')\n  const appliedFilters = ref<OrganizationFilters>({})\n  const sortConfig = ref<OrganizationSortConfig>({\n    field: 'name',\n    order: 'asc'\n  })\n  \n  // Pagination state\n  const pagination = ref<PaginationConfig>({\n    page: 1,\n    limit: 20,\n    total: 0,\n    totalPages: 0,\n    hasNext: false,\n    hasPrevious: false\n  })\n  \n  // Cache and optimization\n  const lastRefreshed = ref<Date | null>(null)\n  const dataCache = reactive<Record<string, { data: any; timestamp: number; ttl: number }>>({})\n  \n  // ===============================\n  // COMPUTED PROPERTIES\n  // ===============================\n  \n  const hasOrganizations = computed(() => organizations.value.length > 0)\n  const totalOrganizations = computed(() => pagination.value.total)\n  const isLoading = computed(() => Object.values(loading).some(state => state))\n  const hasErrors = computed(() => Object.values(errors).some(error => error !== ''))\n  const currentError = computed(() => {\n    const errorKeys = Object.keys(errors) as Array<keyof typeof errors>\n    const firstError = errorKeys.find(key => errors[key] !== '')\n    return firstError ? errors[firstError] : ''\n  })\n  \n  // Analytics computed properties\n  const organizationStats = computed(() => {\n    if (!dashboardMetrics.value) return null\n    \n    return {\n      total: dashboardMetrics.value.totalOrganizations,\n      active: dashboardMetrics.value.activeOrganizations,\n      prospects: dashboardMetrics.value.prospects,\n      customers: dashboardMetrics.value.customers,\n      partners: dashboardMetrics.value.partners,\n      totalRevenue: dashboardMetrics.value.totalRevenue,\n      averageLeadScore: dashboardMetrics.value.averageLeadScore,\n      thisMonth: dashboardMetrics.value.monthlyGrowth > 0 ? Math.round(dashboardMetrics.value.totalOrganizations * dashboardMetrics.value.monthlyGrowth / 100) : 0,\n      thisWeek: Math.round((dashboardMetrics.value.monthlyGrowth > 0 ? dashboardMetrics.value.totalOrganizations * dashboardMetrics.value.monthlyGrowth / 100 : 0) / 4)\n    }\n  })\n  \n  // Top performing organizations\n  const topPerformingOrganizations = computed(() => {\n    return organizations.value\n      .filter(org => org.lead_score !== null)\n      .sort((a, b) => (b.lead_score || 0) - (a.lead_score || 0))\n      .slice(0, 10)\n  })\n  \n  // Organizations by status\n  const organizationsByStatus = computed(() => {\n    return organizations.value.reduce((acc, org) => {\n      const status = org.status || 'Unknown'\n      acc[status] = (acc[status] || 0) + 1\n      return acc\n    }, {} as Record<string, number>)\n  })\n  \n  // Recent organizations (created in last 30 days)\n  const recentOrganizations = computed(() => {\n    const thirtyDaysAgo = new Date()\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)\n    \n    return organizations.value.filter(org => {\n      if (!org.created_at) return false\n      return new Date(org.created_at) >= thirtyDaysAgo\n    })\n  })\n\n  // ===============================\n  // ENHANCED FORM REDESIGN COMPUTED PROPERTIES - Stage 3.1\n  // ===============================\n\n  // Priority options for A/B/C/D system\n  const priorityOptions = computed<PriorityOption[]>(() => PRIORITY_OPTIONS)\n\n  // Food & Beverage segments prioritized list\n  const foodBeverageSegments = computed(() => [\n    { value: 'Food & Beverage - Restaurants', label: 'Food & Beverage - Restaurants', priority: true },\n    { value: 'Food & Beverage - Manufacturing', label: 'Food & Beverage - Manufacturing', priority: true },\n    { value: 'Food & Beverage - Distribution', label: 'Food & Beverage - Distribution', priority: true },\n    { value: 'Food & Beverage - Retail', label: 'Food & Beverage - Retail', priority: true },\n    { value: 'Food & Beverage - Service', label: 'Food & Beverage - Service', priority: true },\n    // Add other industry segments with lower priority\n    { value: 'Technology', label: 'Technology', priority: false },\n    { value: 'Healthcare', label: 'Healthcare', priority: false },\n    { value: 'Manufacturing', label: 'Manufacturing', priority: false },\n    { value: 'Retail', label: 'Retail', priority: false },\n    { value: 'Financial Services', label: 'Financial Services', priority: false },\n    { value: 'Real Estate', label: 'Real Estate', priority: false },\n    { value: 'Education', label: 'Education', priority: false },\n    { value: 'Government', label: 'Government', priority: false },\n    { value: 'Non-Profit', label: 'Non-Profit', priority: false },\n    { value: 'Other', label: 'Other', priority: false }\n  ])\n\n  // Distributor organizations for dropdown\n  const distributorOrganizations = computed(() => \n    organizations.value.filter(org => {\n      const orgWithFields = org as any\n      return orgWithFields.custom_fields && \n        typeof orgWithFields.custom_fields === 'object' && \n        'is_distributor' in orgWithFields.custom_fields &&\n        orgWithFields.custom_fields.is_distributor === true\n    })\n  )\n\n  // Principal organizations for reference\n  const principalOrganizations = computed(() => \n    organizations.value.filter(org => {\n      const orgWithFields = org as any\n      return orgWithFields.custom_fields && \n        typeof orgWithFields.custom_fields === 'object' && \n        'is_principal' in orgWithFields.custom_fields &&\n        orgWithFields.custom_fields.is_principal === true\n    })\n  )\n\n  // Organizations associated with specific principals (for opportunity integration)\n  const getOrganizationsForPrincipals = computed(() => {\n    return (principalIds: string[]) => {\n      return organizations.value.filter(org => {\n        // Check if organization has relationships with specified principals\n        // This could be expanded to check contact_principals junction table\n        return principalIds.includes(org.id) || // Organization is itself a principal\n          (org as any).assigned_principals?.some((pid: string) => principalIds.includes(pid))\n      })\n    }\n  })\n\n  // Organizations that have principal relationships (for analytics)\n  const principalRelatedOrganizations = computed(() => \n    organizations.value.filter(org => {\n      const orgWithFields = org as any\n      return (orgWithFields.custom_fields?.is_principal === true) ||\n        (orgWithFields.custom_fields?.is_distributor === true) ||\n        (orgWithFields.assigned_principals && orgWithFields.assigned_principals.length > 0)\n    })\n  )\n  \n  // ===============================\n  // ERROR MANAGEMENT\n  // ===============================\n  \n  /**\n   * Clear all errors\n   */\n  const clearErrors = () => {\n    Object.keys(errors).forEach(key => {\n      errors[key as keyof typeof errors] = ''\n    })\n  }\n  \n  /**\n   * Clear specific error\n   */\n  const clearError = (type: keyof typeof errors) => {\n    errors[type] = ''\n  }\n  \n  /**\n   * Set error message\n   */\n  const setError = (type: keyof typeof errors, message: string) => {\n    errors[type] = message\n    console.error(`Organization Store Error (${type}):`, message)\n  }\n  \n  // ===============================\n  // CACHE MANAGEMENT\n  // ===============================\n  \n  /**\n   * Check if cached data is still valid\n   */\n  const isCacheValid = (key: string): boolean => {\n    const cached = dataCache[key]\n    if (!cached) return false\n    return Date.now() - cached.timestamp < cached.ttl\n  }\n  \n  /**\n   * Get cached data if valid\n   */\n  const getCachedData = <T>(key: string): T | null => {\n    if (isCacheValid(key)) {\n      return dataCache[key].data as T\n    }\n    return null\n  }\n  \n  /**\n   * Set cache data with TTL\n   */\n  const setCacheData = (key: string, data: any, ttlMs: number = 300000) => { // 5 minutes default\n    dataCache[key] = {\n      data,\n      timestamp: Date.now(),\n      ttl: ttlMs\n    }\n  }\n  \n  /**\n   * Clear specific cache entry\n   */\n  const clearCache = (key?: string) => {\n    if (key) {\n      delete dataCache[key]\n    } else {\n      Object.keys(dataCache).forEach(k => delete dataCache[k])\n    }\n  }\n  \n  // ===============================\n  // CORE CRUD OPERATIONS\n  // ===============================\n  \n  /**\n   * Fetch organizations associated with specific principals\n   * Enhanced for opportunity management with contact-principal relationships\n   */\n  const fetchOrganizationsByPrincipal = async (\n    principalId: string,\n    options: {\n      includeDirectRelationships?: boolean\n      includeContactRelationships?: boolean\n      useCache?: boolean\n      includeOpportunityData?: boolean\n    } = {}\n  ): Promise<OrganizationListItem[] | null> => {\n    try {\n      loading.organizations = true\n      clearError('organizations')\n      \n      const cacheKey = `organizations_by_principal_${principalId}_${JSON.stringify(options)}`\n      \n      if (options.useCache !== false) {\n        const cached = getCachedData<OrganizationListItem[]>(cacheKey)\n        if (cached) return cached\n      }\n      \n      let organizationsFromDirect: any[] = []\n      let organizationsFromContacts: any[] = []\n      \n      // Direct relationship: organization is the principal\n      if (options.includeDirectRelationships !== false) {\n        const { data: directData, error: directError } = await supabase\n          .from('organizations')\n          .select('*')\n          .eq('id', principalId)\n          \n        if (directError) {\n          console.warn('Failed to fetch direct principal organizations:', directError.message)\n        } else {\n          organizationsFromDirect = directData || []\n        }\n      }\n      \n      // Contact-principal relationships: find organizations through contacts that have principal relationships\n      if (options.includeContactRelationships !== false) {\n        const { data: contactPrincipalData, error: contactError } = await supabase\n          .from('contact_principals')\n          .select(`\n            contact_id,\n            contacts!inner(\n              organization_id,\n              organizations!inner(*)\n            )\n          `)\n          .eq('principal_id', principalId)\n          \n        if (contactError) {\n          console.warn('Failed to fetch contact-principal organizations:', contactError.message)\n        } else {\n          // Extract organizations from contact relationships\n          organizationsFromContacts = (contactPrincipalData || [])\n            .map(cp => (cp.contacts as any)?.organizations)\n            .filter(org => org)\n        }\n      }\n      \n      // Combine and deduplicate organizations\n      const allOrganizations = [...organizationsFromDirect, ...organizationsFromContacts]\n      const uniqueOrganizations = allOrganizations.reduce((acc: any[], org: any) => {\n        if (!acc.find((existing: any) => existing.id === org.id)) {\n          acc.push(org)\n        }\n        return acc\n      }, [] as any[])\n      \n      // Transform to OrganizationListItem format\n      const transformedData: OrganizationListItem[] = uniqueOrganizations.map((item: any) => ({\n        id: item.id || '',\n        name: item.name || '',\n        legal_name: item.legal_name,\n        industry: item.industry,\n        type: item.type,\n        size: item.size,\n        status: item.status,\n        website: item.website,\n        email: item.email,\n        primary_phone: item.primary_phone,\n        city: item.city,\n        country: item.country,\n        employees_count: item.employees_count,\n        annual_revenue: item.annual_revenue,\n        lead_score: item.lead_score,\n        contact_count: undefined,\n        last_interaction_date: item.last_contact_date,\n        next_follow_up_date: item.next_follow_up_date,\n        created_at: item.created_at,\n        updated_at: item.updated_at\n      }))\n      \n      setCacheData(cacheKey, transformedData)\n      return transformedData\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch organizations by principal'\n      setError('organizations', message)\n      \n      console.error(`Failed to fetch organizations by principal: ${message}`, {\n        operation: 'fetch_organizations_by_principal',\n        principalId,\n        options\n      })\n      \n      return null\n    } finally {\n      loading.organizations = false\n    }\n  }\n\n  /**\n   * Fetch organizations with advanced filtering, sorting, and pagination\n   */\n  const fetchOrganizations = async (options: {\n    page?: number\n    limit?: number\n    filters?: Partial<OrganizationFilters>\n    sort?: Partial<OrganizationSortConfig>\n    search?: string\n    useCache?: boolean\n    resetList?: boolean\n  } = {}): Promise<OrganizationListResponse | null> => {\n    try {\n      loading.organizations = true\n      clearError('organizations')\n      \n      // Update pagination and filters\n      if (options.page !== undefined) pagination.value.page = options.page\n      if (options.limit !== undefined) pagination.value.limit = options.limit\n      if (options.filters) appliedFilters.value = { ...appliedFilters.value, ...options.filters }\n      if (options.sort) sortConfig.value = { ...sortConfig.value, ...options.sort }\n      if (options.search !== undefined) searchQuery.value = options.search\n      \n      // Check cache first\n      const cacheKey = `organizations_${JSON.stringify({ \n        page: pagination.value.page, \n        limit: pagination.value.limit,\n        filters: appliedFilters.value,\n        sort: sortConfig.value,\n        search: searchQuery.value\n      })}`\n      \n      if (options.useCache !== false) {\n        const cached = getCachedData<OrganizationListResponse>(cacheKey)\n        if (cached) {\n          organizations.value = options.resetList ? cached.data : [...organizations.value, ...cached.data]\n          pagination.value = cached.pagination\n          return cached\n        }\n      }\n      \n      // Build Supabase query - using basic organizations table instead of missing analytics view\n      let query = supabase\n        .from('organizations')\n        .select('*', { count: 'exact' })\n      \n      // Apply search\n      if (searchQuery.value.trim()) {\n        const searchTerm = searchQuery.value.trim()\n        query = query.or(`name.ilike.%${searchTerm}%,legal_name.ilike.%${searchTerm}%,industry.ilike.%${searchTerm}%`)\n      }\n      \n      // Apply filters\n      if (appliedFilters.value.industry && appliedFilters.value.industry.length > 0) {\n        query = query.in('industry', appliedFilters.value.industry)\n      }\n      \n      if (appliedFilters.value.status && appliedFilters.value.status.length > 0) {\n        query = query.in('status', appliedFilters.value.status)\n      }\n      \n      if (appliedFilters.value.type && appliedFilters.value.type.length > 0) {\n        query = query.in('type', appliedFilters.value.type)\n      }\n      \n      if (appliedFilters.value.size && appliedFilters.value.size.length > 0) {\n        query = query.in('size', appliedFilters.value.size)\n      }\n      \n      if (appliedFilters.value.country && appliedFilters.value.country.length > 0) {\n        query = query.in('country', appliedFilters.value.country)\n      }\n      \n      // Lead score range filter\n      if (appliedFilters.value.leadScoreRange) {\n        if (appliedFilters.value.leadScoreRange.min !== undefined) {\n          query = query.gte('lead_score', appliedFilters.value.leadScoreRange.min)\n        }\n        if (appliedFilters.value.leadScoreRange.max !== undefined) {\n          query = query.lte('lead_score', appliedFilters.value.leadScoreRange.max)\n        }\n      }\n      \n      // Employee range filter\n      if (appliedFilters.value.employeeRange) {\n        if (appliedFilters.value.employeeRange.min !== undefined) {\n          query = query.gte('employees_count', appliedFilters.value.employeeRange.min)\n        }\n        if (appliedFilters.value.employeeRange.max !== undefined) {\n          query = query.lte('employees_count', appliedFilters.value.employeeRange.max)\n        }\n      }\n      \n      // Revenue range filter\n      if (appliedFilters.value.revenueRange) {\n        if (appliedFilters.value.revenueRange.min !== undefined) {\n          query = query.gte('annual_revenue', appliedFilters.value.revenueRange.min)\n        }\n        if (appliedFilters.value.revenueRange.max !== undefined) {\n          query = query.lte('annual_revenue', appliedFilters.value.revenueRange.max)\n        }\n      }\n      \n      // Date range filters\n      if (appliedFilters.value.lastContactDateRange) {\n        if (appliedFilters.value.lastContactDateRange.start) {\n          query = query.gte('last_contact_date', appliedFilters.value.lastContactDateRange.start.toISOString())\n        }\n        if (appliedFilters.value.lastContactDateRange.end) {\n          query = query.lte('last_contact_date', appliedFilters.value.lastContactDateRange.end.toISOString())\n        }\n      }\n      \n      // Apply sorting\n      const ascending = sortConfig.value.order === 'asc'\n      query = query.order(sortConfig.value.field, { ascending })\n      \n      // Apply pagination\n      const offset = (pagination.value.page - 1) * pagination.value.limit\n      query = query.range(offset, offset + pagination.value.limit - 1)\n      \n      const { data, error, count } = await query\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Transform data to OrganizationListItem format using full organization data\n      const transformedData: OrganizationListItem[] = (data || []).map(item => ({\n        id: item.id || '',\n        name: item.name || '',\n        legal_name: item.legal_name,\n        industry: item.industry,\n        type: item.type,\n        size: item.size,\n        status: item.status,\n        website: item.website,\n        email: item.email,\n        primary_phone: item.primary_phone,\n        city: item.city,\n        country: item.country,\n        employees_count: item.employees_count,\n        annual_revenue: item.annual_revenue,\n        lead_score: item.lead_score,\n        contact_count: undefined, // Will need to be calculated separately if needed\n        last_interaction_date: item.last_contact_date,\n        next_follow_up_date: item.next_follow_up_date,\n        created_at: item.created_at,\n        updated_at: item.updated_at\n      }))\n      \n      // Update pagination\n      pagination.value.total = count || 0\n      pagination.value.totalPages = Math.ceil(pagination.value.total / pagination.value.limit)\n      pagination.value.hasNext = pagination.value.page < pagination.value.totalPages\n      pagination.value.hasPrevious = pagination.value.page > 1\n      \n      // Update organizations list\n      if (options.resetList !== false) {\n        organizations.value = transformedData\n      } else {\n        organizations.value = [...organizations.value, ...transformedData]\n      }\n      \n      const response: OrganizationListResponse = {\n        data: transformedData,\n        pagination: { ...pagination.value },\n        filters: { ...appliedFilters.value },\n        sort: { ...sortConfig.value }\n      }\n      \n      // Cache the response\n      setCacheData(cacheKey, response)\n      lastRefreshed.value = new Date()\n      \n      return response\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch organizations'\n      setError('organizations', message)\n      \n      console.error(`Failed to fetch organizations: ${message}`, {\n        operation: 'fetch_organizations',\n        options\n      })\n      \n      return null\n    } finally {\n      loading.organizations = false\n    }\n  }\n  \n  /**\n   * Fetch organization by ID with detailed information\n   */\n  const fetchOrganization = async (id: string): Promise<OrganizationDetailData | null> => {\n    try {\n      loading.currentOrganization = true\n      clearError('currentOrganization')\n      \n      // Check cache first\n      const cacheKey = `organization_${id}`\n      const cached = getCachedData<OrganizationDetailData>(cacheKey)\n      if (cached) {\n        currentOrganization.value = cached\n        return cached\n      }\n      \n      // Fetch organization data\n      const { data: orgData, error: orgError } = await supabase\n        .from('organizations')\n        .select('*')\n        .eq('id', id)\n        .single()\n      \n      if (orgError) {\n        throw new Error(orgError.message)\n      }\n      \n      // Fetch related data in parallel\n      const [contactsResult, interactionsResult, documentsResult] = await Promise.all([\n        supabase\n          .from('contacts')\n          .select('id, first_name, last_name, email, position')\n          .eq('organization_id', id),\n        \n        supabase\n          .from('organization_interactions')\n          .select('id, type, subject, interaction_date, contact_id, direction')\n          .eq('organization_id', id)\n          .order('interaction_date', { ascending: false })\n          .limit(10),\n        \n        supabase\n          .from('organization_documents')\n          .select('id, name, category, size, created_at')\n          .eq('organization_id', id)\n      ])\n      \n      // Build detailed data\n      const detailData: OrganizationDetailData = {\n        ...orgData,\n        contact_count: contactsResult.data?.length || 0,\n        interaction_count: interactionsResult.data?.length || 0,\n        document_count: documentsResult.data?.length || 0,\n        recent_interactions: (interactionsResult.data || []).map(interaction => ({\n          id: interaction.id,\n          type: interaction.type,\n          subject: interaction.subject,\n          interaction_date: interaction.interaction_date,\n          contact_name: contactsResult.data?.find(c => c.id === interaction.contact_id)\n            ? `${contactsResult.data.find(c => c.id === interaction.contact_id)?.first_name} ${contactsResult.data.find(c => c.id === interaction.contact_id)?.last_name}`\n            : undefined\n        }))\n      }\n      \n      currentOrganization.value = detailData\n      \n      // Cache the result\n      setCacheData(cacheKey, detailData)\n      \n      return detailData\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch organization'\n      setError('currentOrganization', message)\n      currentOrganization.value = null\n      return null\n    } finally {\n      loading.currentOrganization = false\n    }\n  }\n  \n  /**\n   * Create new organization\n   */\n  const createOrganization = async (organizationData: OrganizationInsert): Promise<Organization | null> => {\n    try {\n      loading.creating = true\n      clearError('creating')\n        \n        const { data, error } = await supabase\n          .from('organizations')\n          .insert(organizationData)\n          .select()\n          .single()\n        \n        if (error) {\n          console.error(`Failed to create organization: ${error.message}`, {\n            operation: 'create_organization',\n            data: organizationData\n          })\n          throw new Error(error.message)\n        }\n        \n        // Clear cache and refresh list\n        clearCache()\n        await fetchOrganizations({ resetList: true })\n        \n        // Record successful user action\n        console.log('Organization created successfully', {\n          organizationName: organizationData.name,\n          organizationIndustry: organizationData.industry\n        })\n        \n        return data\n        \n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to create organization'\n        setError('creating', message)\n        \n        console.error('Failed to create organization', message, {\n          organizationData\n        })\n        \n        return null\n      } finally {\n        loading.creating = false\n      }\n    }\n\n  /**\n   * Create new organization with contact associations\n   */\n  const createOrganizationWithContacts = async (\n    organizationData: OrganizationInsert,\n    contactData: {\n      mode: 'select' | 'create'\n      selectedContactIds: string[]\n      newContacts: Array<{\n        first_name: string\n        last_name: string\n        email: string\n        phone?: string\n        title?: string\n        department?: string\n      }>\n    }\n  ): Promise<Organization | null> => {\n    try {\n      loading.creating = true\n      clearError('creating')\n\n      // Start transaction by creating organization first\n      const { data: organization, error: orgError } = await supabase\n        .from('organizations')\n        .insert(organizationData)\n        .select()\n        .single()\n\n      if (orgError) {\n        throw new Error(orgError.message)\n      }\n\n      // Handle contacts based on mode\n      if (contactData.mode === 'create' && contactData.newContacts.length > 0) {\n        // Create new contacts and associate with organization\n        const contactInserts = contactData.newContacts.map(contact => ({\n          organization_id: organization.id,\n          first_name: contact.first_name,\n          last_name: contact.last_name,\n          email: contact.email,\n          phone: contact.phone || null,\n          position: contact.title || 'Unknown' // Map title to position\n        }))\n\n        const { error: contactError } = await supabase\n          .from('contacts')\n          .insert(contactInserts)\n\n        if (contactError) {\n          console.warn('Failed to create some contacts:', contactError.message)\n          // Don't fail the entire operation for contact creation errors\n        }\n      } else if (contactData.mode === 'select' && contactData.selectedContactIds.length > 0) {\n        // Update existing contacts to associate with this organization\n        const { error: updateError } = await supabase\n          .from('contacts')\n          .update({ organization_id: organization.id })\n          .in('id', contactData.selectedContactIds)\n\n        if (updateError) {\n          console.warn('Failed to associate some contacts:', updateError.message)\n          // Don't fail the entire operation for contact association errors\n        }\n      }\n\n      // Clear cache and refresh list\n      clearCache()\n      await fetchOrganizations({ resetList: true })\n\n      // Record successful user action\n      console.log('Organization with contacts created successfully', {\n        organizationName: organizationData.name,\n        organizationIndustry: organizationData.industry,\n        contactMode: contactData.mode,\n        contactCount: contactData.mode === 'create' \n          ? contactData.newContacts.length \n          : contactData.selectedContactIds.length\n      })\n\n      return organization\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create organization with contacts'\n      setError('creating', message)\n\n      console.error('Failed to create organization with contacts', message, {\n        organizationData,\n        contactData\n      })\n\n      return null\n    } finally {\n      loading.creating = false\n    }\n  }\n\n  /**\n   * Enhanced creation method for redesigned form - Stage 3.1\n   */\n  const createOrganizationWithEnhancedForm = async (\n    formData: EnhancedOrganizationCreateForm\n  ): Promise<{ success: boolean; data?: Organization; error?: string }> => {\n    try {\n      loading.creating = true\n      clearError('creating')\n\n      // Transform priority letter to lead_score and filter out non-database fields\n      const { priority_letter, ...organizationData } = formData\n      \n      // Clean up the data for database insertion\n      const transformedData: OrganizationInsert = {\n        ...organizationData,\n        lead_score: priorityLetterToScore(priority_letter),\n        status: getAutoStatus(formData) as any, // Cast to allow enhanced status values\n        // Ensure tags is properly formatted for JSON field\n        tags: organizationData.tags ? organizationData.tags.filter(tag => tag !== undefined) : null,\n        // Ensure custom_fields is properly typed\n        custom_fields: organizationData.custom_fields as any,\n        // Convert Date objects to ISO strings for database\n        last_contact_date: organizationData.last_contact_date instanceof Date \n          ? organizationData.last_contact_date.toISOString() \n          : organizationData.last_contact_date,\n        next_follow_up_date: organizationData.next_follow_up_date instanceof Date \n          ? organizationData.next_follow_up_date.toISOString() \n          : organizationData.next_follow_up_date,\n        // Ensure boolean fields are properly typed (convert null to undefined)\n        is_distributor: organizationData.is_distributor === null ? undefined : organizationData.is_distributor,\n        is_principal: organizationData.is_principal === null ? undefined : organizationData.is_principal\n      }\n\n      // Create organization\n      const { data: orgData, error: orgError } = await supabase\n        .from('organizations')\n        .insert(transformedData)\n        .select()\n        .single()\n\n      if (orgError) throw orgError\n\n      // Create contact relationships if specified\n      if (formData.assigned_contacts?.length && orgData) {\n        await createContactRelationships(orgData.id, formData.assigned_contacts)\n      }\n\n      // Refresh organization list\n      clearCache()\n      await fetchOrganizations({ resetList: true })\n\n      console.log('Enhanced organization created successfully', {\n        organizationName: formData.name,\n        priority: formData.priority_letter,\n        leadScore: transformedData.lead_score,\n        isPrincipal: formData.custom_fields?.is_principal,\n        isDistributor: formData.custom_fields?.is_distributor,\n        contactCount: formData.assigned_contacts?.length || 0\n      })\n\n      return { success: true, data: orgData }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create organization'\n      setError('creating', message)\n      return { success: false, error: message }\n    } finally {\n      loading.creating = false\n    }\n  }\n\n  // Helper methods for enhanced form\n  const getAutoStatus = (formData: EnhancedOrganizationCreateForm): string => {\n    if (formData.custom_fields?.is_principal) return 'Principal'\n    if (formData.custom_fields?.is_distributor) return 'Distributor'\n    return formData.status\n  }\n\n  const createContactRelationships = async (organizationId: string, contactIds: string[]) => {\n    // This would create entries in organization_contacts junction table when implemented\n    // For now, update existing contacts table with organization_id (legacy approach)\n    try {\n      const { error } = await supabase\n        .from('contacts')\n        .update({ organization_id: organizationId })\n        .in('id', contactIds)\n\n      if (error) throw error\n    } catch (error) {\n      console.warn('Failed to create contact relationships:', error)\n      throw error\n    }\n  }\n\n  // ===============================\n  // ENHANCED HELPER METHODS - Stage 4.1\n  // ===============================\n\n  /**\n   * Convert priority letter (A/B/C/D) to lead score value\n   */\n  const convertPriorityLetterToScore = (letter: 'A' | 'B' | 'C' | 'D'): number => {\n    return priorityLetterToScore(letter)\n  }\n\n  /**\n   * Convert lead score value to priority letter (A/B/C/D)\n   */\n  const convertScoreToPriorityLetter = (score: number | null): 'A' | 'B' | 'C' | 'D' => {\n    return scoreToPriorityLetter(score)\n  }\n  \n  /**\n   * Update existing organization\n   */\n  const updateOrganization = async (id: string, updates: OrganizationUpdate): Promise<Organization | null> => {\n    try {\n      loading.updating = true\n      clearError('updating')\n      \n      const { data, error } = await supabase\n        .from('organizations')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Update current organization if it's the one being updated\n      if (currentOrganization.value?.id === id) {\n        await fetchOrganization(id)\n      }\n      \n      // Clear cache and refresh list\n      clearCache()\n      await fetchOrganizations({ resetList: true })\n      \n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to update organization'\n      setError('updating', message)\n      return null\n    } finally {\n      loading.updating = false\n    }\n  }\n\n  /**\n   * Update existing organization with contact associations\n   */\n  const updateOrganizationWithContacts = async (\n    id: string,\n    updates: OrganizationUpdate,\n    contactData: {\n      mode: 'select' | 'create'\n      selectedContactIds: string[]\n      newContacts: Array<{\n        first_name: string\n        last_name: string\n        email: string\n        phone?: string\n        title?: string\n        department?: string\n      }>\n    }\n  ): Promise<Organization | null> => {\n    try {\n      loading.updating = true\n      clearError('updating')\n\n      // Update the organization first\n      const { data: organization, error: orgError } = await supabase\n        .from('organizations')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (orgError) {\n        throw new Error(orgError.message)\n      }\n\n      // Handle contacts based on mode\n      if (contactData.mode === 'create' && contactData.newContacts.length > 0) {\n        // Create new contacts and associate with organization\n        const contactInserts = contactData.newContacts.map(contact => ({\n          organization_id: id,\n          first_name: contact.first_name,\n          last_name: contact.last_name,\n          email: contact.email,\n          phone: contact.phone || null,\n          position: contact.title || 'Unknown' // Map title to position\n        }))\n\n        const { error: contactError } = await supabase\n          .from('contacts')\n          .insert(contactInserts)\n\n        if (contactError) {\n          console.warn('Failed to create some contacts:', contactError.message)\n          // Don't fail the entire operation for contact creation errors\n        }\n      } else if (contactData.mode === 'select' && contactData.selectedContactIds.length > 0) {\n        // Update existing contacts to associate with this organization\n        const { error: updateError } = await supabase\n          .from('contacts')\n          .update({ organization_id: id })\n          .in('id', contactData.selectedContactIds)\n\n        if (updateError) {\n          console.warn('Failed to associate some contacts:', updateError.message)\n          // Don't fail the entire operation for contact association errors\n        }\n      }\n\n      // Update current organization if it's the one being updated\n      if (currentOrganization.value?.id === id) {\n        await fetchOrganization(id)\n      }\n\n      // Clear cache and refresh list\n      clearCache()\n      await fetchOrganizations({ resetList: true })\n\n      // Record successful user action\n      console.log('Organization with contacts updated successfully', {\n        organizationId: id,\n        contactMode: contactData.mode,\n        contactCount: contactData.mode === 'create' \n          ? contactData.newContacts.length \n          : contactData.selectedContactIds.length\n      })\n\n      return organization\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to update organization with contacts'\n      setError('updating', message)\n      return null\n    } finally {\n      loading.updating = false\n    }\n  }\n  \n  /**\n   * Delete organization\n   */\n  const deleteOrganization = async (id: string): Promise<boolean> => {\n    try {\n      loading.deleting = true\n      clearError('deleting')\n      \n      const { error } = await supabase\n        .from('organizations')\n        .delete()\n        .eq('id', id)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Remove from local state\n      organizations.value = organizations.value.filter(org => org.id !== id)\n      \n      // Clear current organization if it was deleted\n      if (currentOrganization.value?.id === id) {\n        currentOrganization.value = null\n      }\n      \n      // Clear cache\n      clearCache()\n      \n      return true\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to delete organization'\n      setError('deleting', message)\n      return false\n    } finally {\n      loading.deleting = false\n    }\n  }\n  \n  // ===============================\n  // SEARCH AND FILTERING\n  // ===============================\n  \n  /**\n   * Search organizations\n   */\n  const searchOrganizations = async (query: string) => {\n    searchQuery.value = query\n    pagination.value.page = 1 // Reset to first page on new search\n    await fetchOrganizations({ search: query, resetList: true })\n  }\n  \n  /**\n   * Clear search and show all organizations\n   */\n  const clearSearch = async () => {\n    searchQuery.value = ''\n    pagination.value.page = 1\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  /**\n   * Apply filters\n   */\n  const applyFilters = async (filters: Partial<OrganizationFilters>) => {\n    appliedFilters.value = { ...appliedFilters.value, ...filters }\n    pagination.value.page = 1 // Reset to first page\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  /**\n   * Clear all filters\n   */\n  const clearFilters = async () => {\n    appliedFilters.value = {}\n    pagination.value.page = 1\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  /**\n   * Change sorting\n   */\n  const setSorting = async (field: OrganizationSortField, order: 'asc' | 'desc') => {\n    sortConfig.value = { field, order }\n    pagination.value.page = 1 // Reset to first page on sort change\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  // ===============================\n  // PAGINATION\n  // ===============================\n  \n  /**\n   * Change page\n   */\n  const setPage = async (page: number) => {\n    if (page >= 1 && page <= pagination.value.totalPages) {\n      pagination.value.page = page\n      await fetchOrganizations()\n    }\n  }\n  \n  /**\n   * Go to next page\n   */\n  const nextPage = async () => {\n    if (pagination.value.hasNext) {\n      await setPage(pagination.value.page + 1)\n    }\n  }\n  \n  /**\n   * Go to previous page\n   */\n  const previousPage = async () => {\n    if (pagination.value.hasPrevious) {\n      await setPage(pagination.value.page - 1)\n    }\n  }\n  \n  // ===============================\n  // ANALYTICS AND METRICS\n  // ===============================\n  \n  /**\n   * Fetch dashboard metrics with principal-specific analytics\n   */\n  const fetchDashboardMetrics = async (): Promise<OrganizationMetrics | null> => {\n    try {\n      loading.metrics = true\n      clearError('metrics')\n      \n      // Check cache first\n      const cacheKey = 'dashboard_metrics'\n      const cached = getCachedData<OrganizationMetrics>(cacheKey)\n      if (cached) {\n        dashboardMetrics.value = cached\n        return cached\n      }\n      \n      // Fetch metrics in parallel, including principal-specific queries\n      const [\n        totalResult, \n        activeResult, \n        prospectResult, \n        customerResult, \n        partnerResult, \n        revenueResult,\n        principalResult,\n        distributorResult\n      ] = await Promise.all([\n        supabase.from('organizations').select('id', { count: 'exact', head: true }),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Active'),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Prospect'),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Customer'),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Partner'),\n        supabase.from('organizations').select('annual_revenue, lead_score', { count: 'exact' }).not('annual_revenue', 'is', null),\n        // Principal-specific metrics\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).contains('custom_fields', { is_principal: true }),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).contains('custom_fields', { is_distributor: true })\n      ])\n      \n      // Calculate date ranges\n      const now = new Date()\n      const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1)\n      \n      const monthResult = await supabase.from('organizations').select('id', { count: 'exact', head: true }).gte('created_at', firstDayOfMonth.toISOString())\n      \n      // Calculate metrics\n      const totalRevenue = revenueResult.data?.reduce((sum, org) => sum + (org.annual_revenue || 0), 0) || 0\n      const averageLeadScore = revenueResult.data?.length \n        ? revenueResult.data.reduce((sum, org) => sum + (org.lead_score || 0), 0) / revenueResult.data.length\n        : 0\n      \n      const metrics: OrganizationMetrics = {\n        totalOrganizations: totalResult.count || 0,\n        activeOrganizations: activeResult.count || 0,\n        prospects: prospectResult.count || 0,\n        customers: customerResult.count || 0,\n        partners: partnerResult.count || 0,\n        totalRevenue: totalRevenue,\n        averageLeadScore: averageLeadScore,\n        monthlyGrowth: monthResult.count || 0,\n        industryDistribution: [], // Will be populated by industry analytics\n        statusDistribution: [], // Will be populated by status analytics\n        recentActivity: [], // Will be populated by activity analytics\n        // Principal-specific metrics\n        principalCount: principalResult.count || 0,\n        distributorCount: distributorResult.count || 0\n      } as OrganizationMetrics & { principalCount: number; distributorCount: number }\n      \n      dashboardMetrics.value = metrics\n      \n      // Cache the result\n      setCacheData(cacheKey, metrics, 600000) // 10 minutes cache\n      \n      return metrics\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch dashboard metrics'\n      setError('metrics', message)\n      return null\n    } finally {\n      loading.metrics = false\n    }\n  }\n\n  /**\n   * Fetch all available principals with their contact information for opportunity selection\n   */\n  const fetchAvailablePrincipals = async (options: {\n    includeContactCount?: boolean\n    useCache?: boolean\n  } = {}): Promise<Array<{\n    id: string\n    name: string\n    type: string | null\n    contact_count?: number\n    primary_contact?: {\n      id: string\n      name: string\n      email: string | null\n      phone: string | null\n    } | null\n  }> | null> => {\n    try {\n      loading.organizations = true\n      clearError('organizations')\n      \n      const cacheKey = `available_principals_${JSON.stringify(options)}`\n      \n      if (options.useCache !== false) {\n        const cached = getCachedData<any[]>(cacheKey)\n        if (cached) return cached\n      }\n      \n      // Fetch organizations that are marked as principals\n      const { data: principals, error: principalError } = await supabase\n        .from('organizations')\n        .select('id, name, type, custom_fields')\n        .contains('custom_fields', { is_principal: true })\n        .order('name')\n      \n      if (principalError) throw new Error(principalError.message)\n      \n      const result = await Promise.all((principals || []).map(async (principal) => {\n        let contactCount = 0\n        let primaryContact = null\n        \n        if (options.includeContactCount) {\n          // Get contact count and primary contact for each principal\n          const { data: contacts, error: contactError } = await supabase\n            .from('contacts')\n            .select('id, first_name, last_name, email, phone, is_primary')\n            .eq('organization_id', principal.id)\n            .order('is_primary', { ascending: false })\n            .limit(1)\n            \n          if (!contactError && contacts?.length) {\n            contactCount = contacts.length\n            const contact = contacts[0]\n            primaryContact = {\n              id: contact.id,\n              name: `${contact.first_name} ${contact.last_name}`,\n              email: contact.email,\n              phone: contact.phone\n            }\n          }\n        }\n        \n        return {\n          id: principal.id,\n          name: principal.name,\n          type: principal.type,\n          ...(options.includeContactCount && { \n            contact_count: contactCount,\n            primary_contact: primaryContact \n          })\n        }\n      }))\n      \n      setCacheData(cacheKey, result, 300000) // 5 minutes cache\n      return result\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch available principals'\n      setError('organizations', message)\n      return null\n    } finally {\n      loading.organizations = false\n    }\n  }\n\n  /**\n   * Fetch organizations that have relationships with multiple principals (for opportunity targeting)\n   */\n  const fetchMultiPrincipalOrganizations = async (options: {\n    minimumPrincipalCount?: number\n    useCache?: boolean\n  } = {}): Promise<Array<{\n    id: string\n    name: string\n    type: string | null\n    principal_count: number\n    principal_names: string[]\n    total_opportunities?: number\n  }> | null> => {\n    try {\n      loading.organizations = true\n      clearError('organizations')\n      \n      const minimumCount = options.minimumPrincipalCount || 2\n      const cacheKey = `multi_principal_orgs_${minimumCount}`\n      \n      if (options.useCache !== false) {\n        const cached = getCachedData<any[]>(cacheKey)\n        if (cached) return cached\n      }\n      \n      // Query to find organizations with multiple principal relationships through contacts\n      const { data: orgPrincipalData, error } = await supabase\n        .from('contact_principals')\n        .select(`\n          contacts!inner(\n            organization_id,\n            organizations!inner(id, name, type)\n          ),\n          organizations!principal_id!inner(id, name)\n        `)\n      \n      if (error) throw new Error(error.message)\n      \n      // Group by organization and count principals\n      const orgPrincipalMap = new Map<string, {\n        org: any\n        principals: Set<string>\n        principalNames: string[]\n      }>()\n      \n      orgPrincipalData?.forEach(item => {\n        const org = (item.contacts as any)?.organizations\n        const principal = (item.organizations as any)\n        \n        if (org && principal) {\n          const orgId = org.id\n          \n          if (!orgPrincipalMap.has(orgId)) {\n            orgPrincipalMap.set(orgId, {\n              org,\n              principals: new Set(),\n              principalNames: []\n            })\n          }\n          \n          const entry = orgPrincipalMap.get(orgId)!\n          if (!entry.principals.has(principal.id)) {\n            entry.principals.add(principal.id)\n            entry.principalNames.push(principal.name)\n          }\n        }\n      })\n      \n      // Filter organizations with minimum principal count\n      const result = Array.from(orgPrincipalMap.values())\n        .filter(entry => entry.principals.size >= minimumCount)\n        .map(entry => ({\n          id: entry.org.id,\n          name: entry.org.name,\n          type: entry.org.type,\n          principal_count: entry.principals.size,\n          principal_names: entry.principalNames\n        }))\n        .sort((a, b) => b.principal_count - a.principal_count)\n      \n      setCacheData(cacheKey, result, 300000) // 5 minutes cache\n      return result\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch multi-principal organizations'\n      setError('organizations', message)\n      return null\n    } finally {\n      loading.organizations = false\n    }\n  }\n\n  /**\n   * Fetch principal-organization relationship analytics\n   */\n  const fetchPrincipalAnalytics = async (): Promise<any | null> => {\n    try {\n      loading.analytics = true\n      clearError('analytics')\n      \n      const cacheKey = 'principal_analytics'\n      const cached = getCachedData<any>(cacheKey)\n      if (cached) return cached\n      \n      // Fetch organizations with principal relationships\n      const { data: principalOrgs, error } = await supabase\n        .from('organizations')\n        .select('id, name, type, custom_fields, annual_revenue, lead_score')\n        .or('custom_fields->>is_principal.eq.true,custom_fields->>is_distributor.eq.true')\n      \n      if (error) throw new Error(error.message)\n      \n      // Get contact-principal relationship counts\n      const { data: contactPrincipalCounts, error: countError } = await supabase\n        .from('contact_principals')\n        .select('principal_id, contact_id')\n      \n      if (countError) throw new Error(countError.message)\n      \n      // Count relationships per principal\n      const principalRelationshipCounts = new Map<string, number>()\n      contactPrincipalCounts?.forEach(cp => {\n        const count = principalRelationshipCounts.get(cp.principal_id) || 0\n        principalRelationshipCounts.set(cp.principal_id, count + 1)\n      })\n      \n      // Analyze principal-distributor relationships\n      const analytics = {\n        principalDistribution: principalOrgs?.filter(org => \n          (org.custom_fields as any)?.is_principal === true\n        ).length || 0,\n        distributorDistribution: principalOrgs?.filter(org => \n          (org.custom_fields as any)?.is_distributor === true\n        ).length || 0,\n        totalPrincipalRevenue: principalOrgs?.filter(org => \n          (org.custom_fields as any)?.is_principal === true\n        ).reduce((sum, org) => sum + (org.annual_revenue || 0), 0) || 0,\n        averagePrincipalLeadScore: (() => {\n          const principals = principalOrgs?.filter(org => \n            (org.custom_fields as any)?.is_principal === true && org.lead_score\n          ) || []\n          return principals.length > 0 \n            ? principals.reduce((sum, org) => sum + (org.lead_score || 0), 0) / principals.length\n            : 0\n        })(),\n        totalContactRelationships: contactPrincipalCounts?.length || 0,\n        averageRelationshipsPerPrincipal: principalRelationshipCounts.size > 0 \n          ? Array.from(principalRelationshipCounts.values()).reduce((sum, count) => sum + count, 0) / principalRelationshipCounts.size\n          : 0,\n        topPrincipalsByRelationships: Array.from(principalRelationshipCounts.entries())\n          .sort(([,a], [,b]) => b - a)\n          .slice(0, 10)\n          .map(([principalId, count]) => {\n            const principal = principalOrgs?.find(org => org.id === principalId)\n            return {\n              id: principalId,\n              name: principal?.name || 'Unknown',\n              relationship_count: count\n            }\n          })\n      }\n      \n      setCacheData(cacheKey, analytics, 300000) // 5 minutes cache\n      return analytics\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch principal analytics'\n      setError('analytics', message)\n      return null\n    } finally {\n      loading.analytics = false\n    }\n  }\n  \n  /**\n   * Get principals with opportunity potential (for batch opportunity creation)\n   * Returns principals with active organizations and contact relationships\n   */\n  const getPrincipalsForOpportunityCreation = async (options: {\n    organizationId?: string\n    includeExistingOpportunities?: boolean\n    useCache?: boolean\n  } = {}): Promise<Array<{\n    id: string\n    name: string\n    organization_type: string | null\n    contact_relationships: number\n    existing_opportunities?: number\n    last_opportunity_date?: string | null\n    recommended_for_batch: boolean\n  }> | null> => {\n    try {\n      loading.organizations = true\n      clearError('organizations')\n      \n      const cacheKey = `principals_for_opportunities_${JSON.stringify(options)}`\n      \n      if (options.useCache !== false) {\n        const cached = getCachedData<any[]>(cacheKey)\n        if (cached) return cached\n      }\n      \n      // Get all principals\n      const { data: principals, error: principalError } = await supabase\n        .from('organizations')\n        .select('id, name, type, custom_fields')\n        .contains('custom_fields', { is_principal: true })\n      \n      if (principalError) throw new Error(principalError.message)\n      \n      // Get contact relationships for each principal\n      const { data: contactRelationships, error: contactError } = await supabase\n        .from('contact_principals')\n        .select('principal_id, contact_id, contacts!inner(organization_id)')\n      \n      if (contactError) throw new Error(contactError.message)\n      \n      // Optionally get existing opportunities\n      let opportunityData: any[] = []\n      if (options.includeExistingOpportunities) {\n        const { data: opportunities, error: oppError } = await supabase\n          .from('opportunities')\n          .select('organization_id, created_at')\n          .order('created_at', { ascending: false })\n        \n        if (!oppError) {\n          opportunityData = opportunities || []\n        }\n      }\n      \n      // Build principal summary\n      const result = (principals || []).map(principal => {\n        // Count contact relationships\n        const relationships = contactRelationships?.filter(cr => cr.principal_id === principal.id) || []\n        \n        // Filter by organization if specified\n        const relevantRelationships = options.organizationId \n          ? relationships.filter(r => (r.contacts as any)?.organization_id === options.organizationId)\n          : relationships\n        \n        // Count existing opportunities if requested\n        let existingOpportunities = 0\n        let lastOpportunityDate: string | null = null\n        \n        if (options.includeExistingOpportunities) {\n          const orgIds = relationships.map(r => (r.contacts as any)?.organization_id).filter(Boolean)\n          const principalOpportunities = opportunityData.filter(opp => orgIds.includes(opp.organization_id))\n          existingOpportunities = principalOpportunities.length\n          \n          if (principalOpportunities.length > 0) {\n            lastOpportunityDate = principalOpportunities[0].created_at\n          }\n        }\n        \n        // Determine if recommended for batch creation (ensure boolean)\n        const recommendedForBatch = Boolean(relevantRelationships.length > 0 && \n          (existingOpportunities === 0 || \n           (lastOpportunityDate && new Date(lastOpportunityDate) < new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)))) // No opportunities in last 30 days\n        \n        return {\n          id: principal.id,\n          name: principal.name,\n          organization_type: principal.type,\n          contact_relationships: relevantRelationships.length,\n          ...(options.includeExistingOpportunities && {\n            existing_opportunities: existingOpportunities,\n            last_opportunity_date: lastOpportunityDate\n          }),\n          recommended_for_batch: recommendedForBatch\n        }\n      })\n      .filter(p => p.contact_relationships > 0) // Only include principals with relationships\n      .sort((a, b) => {\n        // Sort by recommendation, then by relationship count\n        if (a.recommended_for_batch !== b.recommended_for_batch) {\n          return a.recommended_for_batch ? -1 : 1\n        }\n        return b.contact_relationships - a.contact_relationships\n      })\n      \n      setCacheData(cacheKey, result, 300000) // 5 minutes cache\n      return result\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to get principals for opportunity creation'\n      setError('organizations', message)\n      return null\n    } finally {\n      loading.organizations = false\n    }\n  }\n\n  /**\n   * Fetch organization analytics data\n   */\n  const fetchAnalytics = async (): Promise<OrganizationSummaryAnalytics[] | null> => {\n    try {\n      loading.analytics = true\n      clearError('analytics')\n      \n      // Note: organization_summary_analytics table may not exist in database yet\n      // Using organizations table with computed analytics for now\n      const { data, error } = await supabase\n        .from('organizations')\n        .select('id, name, lead_score, status, industry, type, annual_revenue')\n        .order('lead_score', { ascending: false })\n        .limit(50)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Transform basic organization data to match analytics interface\n      const transformedAnalytics: OrganizationSummaryAnalytics[] = (data || []).map(org => ({\n        id: `analytics-${org.id}`,\n        organization_id: org.id,\n        total_opportunities: 0, // TODO: Calculate from opportunities table\n        active_opportunities: 0, // TODO: Calculate from opportunities table\n        won_opportunities: 0, // TODO: Calculate from opportunities table\n        total_interactions: 0, // TODO: Calculate from interactions table\n        last_activity_date: null, // TODO: Calculate from latest interaction\n        lead_score: org.lead_score || 0,\n        conversion_rate: null, // TODO: Calculate win rate\n        average_deal_size: org.annual_revenue // Using annual_revenue as proxy\n      }))\n      \n      analyticsData.value = transformedAnalytics\n      return transformedAnalytics\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch analytics'\n      setError('analytics', message)\n      return null\n    } finally {\n      loading.analytics = false\n    }\n  }\n  \n  /**\n   * Fetch performance data\n   */\n  const fetchPerformanceData = async (): Promise<MonthlyOrganizationPerformance[] | null> => {\n    try {\n      loading.performance = true\n      clearError('performance')\n      \n      // Note: monthly_organization_performance view may not exist yet\n      // Using organizations table with computed performance for now\n      const { data, error } = await supabase\n        .from('organizations')\n        .select('id, name, lead_score, created_at, updated_at')\n        .order('updated_at', { ascending: false })\n        .limit(12)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Transform raw database data to match MonthlyOrganizationPerformance interface\n      const transformedPerformance: MonthlyOrganizationPerformance[] = (data || []).map((row, index) => ({\n        id: `perf-${index}-${Date.now()}`,\n        organization_id: row.id,\n        month: new Date(row.updated_at || new Date()).toISOString().substring(0, 7),\n        year: new Date(row.updated_at || new Date()).getFullYear(),\n        opportunities_created: 0, // TODO: Calculate from opportunities table\n        opportunities_won: 0, // TODO: Calculate from opportunities table\n        total_revenue: null, // TODO: Calculate from opportunities\n        interaction_count: 0, // TODO: Calculate from interactions table\n        lead_score_change: null // TODO: Calculate score changes over time\n      }))\n      \n      performanceData.value = transformedPerformance\n      return transformedPerformance\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch performance data'\n      setError('performance', message)\n      return null\n    } finally {\n      loading.performance = false\n    }\n  }\n  \n  /**\n   * Fetch lead scoring data\n   */\n  const fetchLeadScoringData = async (): Promise<OrganizationLeadScoring[] | null> => {\n    try {\n      loading.leadScoring = true\n      clearError('leadScoring')\n      \n      // Note: organization_lead_scoring table may not exist yet\n      // Using organizations table with computed lead scoring for now\n      const { data, error } = await supabase\n        .from('organizations')\n        .select('id, name, lead_score, updated_at')\n        .order('lead_score', { ascending: false })\n        .limit(100)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Transform raw database data to match OrganizationLeadScoring interface  \n      const transformedLeadScoring: OrganizationLeadScoring[] = (data || []).map((row, index) => ({\n        id: `lead-${index}-${Date.now()}`,\n        organization_id: row.id || `org-${index}`,\n        lead_score: row.lead_score || 0,\n        scoring_factors: null, // TODO: Implement scoring factors calculation\n        last_updated: new Date().toISOString(),\n        score_trend: null // TODO: Calculate trend based on historical data\n      }))\n      \n      leadScoringData.value = transformedLeadScoring\n      return transformedLeadScoring\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch lead scoring data'\n      setError('leadScoring', message)\n      return null\n    } finally {\n      loading.leadScoring = false\n    }\n  }\n  \n  // ===============================\n  // INTERACTION MANAGEMENT\n  // ===============================\n  \n  /**\n   * Fetch interactions for current organization\n   */\n  const fetchInteractions = async (organizationId?: string): Promise<OrganizationInteraction[] | null> => {\n    try {\n      loading.interactions = true\n      clearError('interactions')\n      \n      const orgId = organizationId || currentOrganization.value?.id\n      if (!orgId) {\n        throw new Error('No organization ID provided')\n      }\n      \n      const { data, error } = await supabase\n        .from('organization_interactions')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('interaction_date', { ascending: false })\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Transform data to match expected OrganizationInteraction interface\n      const transformedData: OrganizationInteraction[] = (data || []).map(item => ({\n        id: item.id,\n        organization_id: item.organization_id,\n        interaction_type: 'Other', // Default since this field doesn't exist in source table\n        subject: item.subject || 'Interaction',\n        description: item.description || '',\n        interaction_date: item.interaction_date,\n        duration_minutes: item.duration_minutes,\n        outcome: 'Scheduled', // Default since this field doesn't exist in source table  \n        notes: item.description || '', // Map description to notes\n        contact_id: item.contact_id,\n        direction: item.direction || 'Outbound',\n        follow_up_date: null, // Default since this field doesn't exist in source table\n        created_at: item.created_at || new Date().toISOString(),\n        updated_at: item.updated_at || new Date().toISOString(),\n        created_by_user_id: item.created_by_user_id\n      }))\n      \n      interactions.value = transformedData\n      return transformedData\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch interactions'\n      setError('interactions', message)\n      return null\n    } finally {\n      loading.interactions = false\n    }\n  }\n  \n  /**\n   * Create new interaction\n   */\n  const createInteraction = async (interactionData: any): Promise<OrganizationInteraction | null> => {\n    try {\n      const { data, error } = await supabase\n        .from('organization_interactions')\n        .insert({\n          organization_id: interactionData.organization_id,\n          contact_id: interactionData.contact_id || null,\n          subject: interactionData.subject || 'Interaction',\n          description: interactionData.description || null,\n          direction: interactionData.direction || null,\n          duration_minutes: interactionData.duration_minutes || null,\n          created_by_user_id: interactionData.created_by_user_id || null\n        })\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Refresh interactions\n      await fetchInteractions(interactionData.organization_id)\n      \n      // Return transformed data to match expected interface\n      const transformedInteraction: OrganizationInteraction = {\n        id: data.id,\n        organization_id: data.organization_id,\n        interaction_type: 'Other',\n        subject: data.subject || 'Interaction',\n        interaction_date: data.created_at || new Date().toISOString(),\n        notes: '',\n        outcome: null,\n        created_at: data.created_at || new Date().toISOString(),\n        updated_at: data.updated_at || new Date().toISOString()\n      }\n      \n      return transformedInteraction\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create interaction'\n      setError('interactions', message)\n      return null\n    }\n  }\n  \n  // ===============================\n  // DOCUMENT MANAGEMENT\n  // ===============================\n  \n  /**\n   * Fetch documents for current organization\n   */\n  const fetchDocuments = async (organizationId?: string): Promise<OrganizationDocument[] | null> => {\n    try {\n      loading.documents = true\n      clearError('documents')\n      \n      const orgId = organizationId || currentOrganization.value?.id\n      if (!orgId) {\n        throw new Error('No organization ID provided')\n      }\n      \n      const { data, error } = await supabase\n        .from('organization_documents')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false })\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Transform data to match expected OrganizationDocument interface\n      const transformedData: OrganizationDocument[] = (data || []).map(item => ({\n        id: item.id,\n        organization_id: item.organization_id,\n        document_name: (item as any).title || 'Unnamed Document',\n        document_type: item.file_type || 'Other',\n        file_path: item.external_url || '',\n        file_size: item.file_size_bytes || null,\n        uploaded_at: item.created_at || new Date().toISOString(),\n        uploaded_by: (item as any).created_by_user_id || null\n      }))\n      \n      documents.value = transformedData\n      return transformedData\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch documents'\n      setError('documents', message)\n      return null\n    } finally {\n      loading.documents = false\n    }\n  }\n  \n  /**\n   * Create new document\n   */\n  const createDocument = async (documentData: any): Promise<OrganizationDocument | null> => {\n    try {\n      const { data, error } = await supabase\n        .from('organization_documents')\n        .insert(documentData)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Refresh documents\n      await fetchDocuments(documentData.organization_id)\n      \n      return {\n        id: data.id,\n        organization_id: data.organization_id,\n        document_name: 'Document',\n        document_type: 'general',\n        file_path: '',\n        file_size: 0,\n        uploaded_at: data.created_at || new Date().toISOString(),\n        uploaded_by: null\n      } as OrganizationDocument\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create document'\n      setError('documents', message)\n      return null\n    }\n  }\n  \n  // ===============================\n  // BULK OPERATIONS\n  // ===============================\n  \n  /**\n   * Perform bulk operations on multiple organizations\n   */\n  const performBulkOperation = async (operation: BulkOrganizationOperation): Promise<BulkOperationResult> => {\n    try {\n      loading.bulkOperations = true\n      clearError('bulkOperations')\n      \n      let processedCount = 0\n      let errorCount = 0\n      const errors: Array<{ id: string; error: string }> = []\n      \n      for (const orgId of operation.organizationIds) {\n        try {\n          switch (operation.type) {\n            case 'update_status':\n              if (operation.data?.status) {\n                await updateOrganization(orgId, { status: operation.data.status })\n                processedCount++\n              }\n              break\n              \n            case 'delete':\n              await deleteOrganization(orgId)\n              processedCount++\n              break\n              \n            case 'add_tags':\n              if (operation.data?.tags) {\n                const org = organizations.value.find(o => o.id === orgId)\n                if (org) {\n                  await updateOrganization(orgId, { tags: operation.data.tags })\n                  processedCount++\n                }\n              }\n              break\n              \n            default:\n              throw new Error(`Unsupported bulk operation: ${operation.type}`)\n          }\n        } catch (error) {\n          errorCount++\n          errors.push({\n            id: orgId,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }\n      }\n      \n      return {\n        operation,\n        success: errorCount === 0,\n        total: operation.organizationIds.length,\n        successful: processedCount,\n        failed: errorCount,\n        errors\n      }\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to perform bulk operation'\n      setError('bulkOperations', message)\n      return {\n        operation,\n        success: false,\n        total: operation.organizationIds.length,\n        successful: 0,\n        failed: operation.organizationIds.length,\n        errors: operation.organizationIds.map(id => ({ id: id, error: message }))\n      }\n    } finally {\n      loading.bulkOperations = false\n    }\n  }\n  \n  // ===============================\n  // UTILITY FUNCTIONS\n  // ===============================\n  \n  /**\n   * Get organization by ID from local state\n   */\n  const getOrganizationById = (id: string): OrganizationListItem | undefined => {\n    return organizations.value.find(org => org.id === id)\n  }\n  \n  /**\n   * Check if organization exists in local state\n   */\n  const organizationExists = (id: string): boolean => {\n    return organizations.value.some(org => org.id === id)\n  }\n  \n  /**\n   * Get engagement status based on interaction count\n   */\n  \n  /**\n   * Refresh all data\n   */\n  const refreshAllData = async () => {\n    clearCache()\n    await Promise.all([\n      fetchOrganizations({ resetList: true }),\n      fetchDashboardMetrics(),\n      fetchAnalytics()\n    ])\n    lastRefreshed.value = new Date()\n  }\n  \n  /**\n   * Reset store to initial state\n   */\n  const resetStore = () => {\n    organizations.value = []\n    currentOrganization.value = null\n    analyticsData.value = []\n    performanceData.value = []\n    leadScoringData.value = []\n    dashboardMetrics.value = null\n    interactions.value = []\n    documents.value = []\n    \n    searchQuery.value = ''\n    appliedFilters.value = {}\n    sortConfig.value = { field: 'name', order: 'asc' }\n    \n    pagination.value = {\n      page: 1,\n      limit: 20,\n      total: 0,\n      totalPages: 0,\n      hasNext: false,\n      hasPrevious: false\n    }\n    \n    Object.keys(loading).forEach(key => {\n      loading[key as keyof typeof loading] = false\n    })\n    \n    clearErrors()\n    clearCache()\n    lastRefreshed.value = null\n  }\n  \n  // ===============================\n  // RETURN STATEMENT\n  // ===============================\n  \n  return {\n    // State\n    organizations,\n    currentOrganization,\n    analyticsData,\n    performanceData,\n    leadScoringData,\n    dashboardMetrics,\n    interactions,\n    documents,\n    searchQuery,\n    appliedFilters,\n    sortConfig,\n    pagination,\n    lastRefreshed,\n    \n    // Loading states\n    loading,\n    isLoading,\n    \n    // Error states\n    errors,\n    hasErrors,\n    currentError,\n    \n    // Computed\n    hasOrganizations,\n    totalOrganizations,\n    organizationStats,\n    topPerformingOrganizations,\n    organizationsByStatus,\n    recentOrganizations,\n    \n    // Enhanced form redesign computed properties\n    priorityOptions,\n    foodBeverageSegments,\n    distributorOrganizations,\n    principalOrganizations,\n    getOrganizationsForPrincipals,\n    principalRelatedOrganizations,\n    \n    // Core CRUD operations\n    fetchOrganizations,\n    fetchOrganization,\n    fetchOrganizationsByPrincipal,\n    createOrganization,\n    createOrganizationWithContacts,\n    createOrganizationWithEnhancedForm,\n    updateOrganization,\n    updateOrganizationWithContacts,\n    deleteOrganization,\n    \n    // Search and filtering\n    searchOrganizations,\n    clearSearch,\n    applyFilters,\n    clearFilters,\n    setSorting,\n    \n    // Pagination\n    setPage,\n    nextPage,\n    previousPage,\n    \n    // Analytics and metrics\n    fetchDashboardMetrics,\n    fetchAnalytics,\n    fetchPerformanceData,\n    fetchLeadScoringData,\n    fetchPrincipalAnalytics,\n    \n    // Principal-specific methods for opportunity management\n    fetchAvailablePrincipals,\n    fetchMultiPrincipalOrganizations,\n    getPrincipalsForOpportunityCreation,\n    \n    // Interaction management\n    fetchInteractions,\n    createInteraction,\n    \n    // Document management\n    fetchDocuments,\n    createDocument,\n    \n    // Bulk operations\n    performBulkOperation,\n    \n    // Utility methods\n    getOrganizationById,\n    organizationExists,\n    refreshAllData,\n    resetStore,\n    clearErrors,\n    clearError,\n    clearCache,\n    \n    // Enhanced helper methods - Stage 4.1\n    convertPriorityLetterToScore,\n    convertScoreToPriorityLetter,\n    getAutoStatus,\n    createContactRelationships\n  }\n})"],"names":["organizationSchema","yup.object","yup.string","yup.mixed","yup.number","yup.array","yup.date","yup.boolean","createOrganizationSchema","organizationInteractionSchema","value","organizationDocumentSchema","organizationAnalyticsSchema","period_start","organizationCreateSchema","PRIORITY_OPTIONS","priorityLetterToScore","letter","scoreToPriorityLetter","score","useOrganizationStore","defineStore","organizations","ref","currentOrganization","analyticsData","performanceData","leadScoringData","dashboardMetrics","interactions","documents","loading","reactive","errors","searchQuery","appliedFilters","sortConfig","pagination","lastRefreshed","dataCache","hasOrganizations","computed","totalOrganizations","isLoading","state","hasErrors","error","currentError","firstError","key","organizationStats","topPerformingOrganizations","org","a","b","organizationsByStatus","acc","status","recentOrganizations","thirtyDaysAgo","priorityOptions","foodBeverageSegments","distributorOrganizations","orgWithFields","principalOrganizations","getOrganizationsForPrincipals","principalIds","_a","pid","principalRelatedOrganizations","_b","clearErrors","clearError","type","setError","message","isCacheValid","cached","getCachedData","setCacheData","data","ttlMs","clearCache","k","fetchOrganizationsByPrincipal","principalId","options","cacheKey","organizationsFromDirect","organizationsFromContacts","directData","directError","supabase","contactPrincipalData","contactError","cp","transformedData","existing","item","fetchOrganizations","query","searchTerm","ascending","offset","count","response","fetchOrganization","id","orgData","orgError","contactsResult","interactionsResult","documentsResult","detailData","_c","interaction","c","createOrganization","organizationData","createOrganizationWithContacts","contactData","organization","contactInserts","contact","updateError","createOrganizationWithEnhancedForm","formData","priority_letter","getAutoStatus","tag","createContactRelationships","_d","organizationId","contactIds","convertPriorityLetterToScore","convertScoreToPriorityLetter","updateOrganization","updates","updateOrganizationWithContacts","deleteOrganization","searchOrganizations","clearSearch","applyFilters","filters","clearFilters","setSorting","field","order","setPage","page","nextPage","previousPage","fetchDashboardMetrics","totalResult","activeResult","prospectResult","customerResult","partnerResult","revenueResult","principalResult","distributorResult","now","firstDayOfMonth","monthResult","totalRevenue","sum","averageLeadScore","metrics","fetchAvailablePrincipals","principals","principalError","result","principal","contactCount","primaryContact","contacts","fetchMultiPrincipalOrganizations","minimumCount","orgPrincipalData","orgPrincipalMap","orgId","entry","fetchPrincipalAnalytics","principalOrgs","contactPrincipalCounts","countError","principalRelationshipCounts","analytics","getPrincipalsForOpportunityCreation","contactRelationships","opportunityData","opportunities","oppError","relationships","cr","relevantRelationships","r","existingOpportunities","lastOpportunityDate","orgIds","principalOpportunities","opp","recommendedForBatch","p","fetchAnalytics","transformedAnalytics","fetchPerformanceData","transformedPerformance","row","index","fetchLeadScoringData","transformedLeadScoring","fetchInteractions","createInteraction","interactionData","fetchDocuments","documentData","operation","processedCount","errorCount","o"],"mappings":"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"}
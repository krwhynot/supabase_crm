{"version":3,"file":"contactsApi-dM8aJBaa.js","sources":["../../src/services/contactsApi.ts"],"sourcesContent":["/**\n * Contacts API Service\n * Centralized Supabase operations for contact management\n * Requires valid Supabase authentication\n */\n\nimport { supabase } from '@/config/supabaseClient'\nimport type { Contact, ContactInsert, ContactUpdate } from '@/types/database.types'\n\n/**\n * API Response wrapper for consistent error handling\n */\nexport interface ApiResponse<T> {\n  data: T | null\n  error: string | null\n  success: boolean\n}\n\n/**\n * Search and pagination options\n */\nexport interface ContactSearchOptions {\n  search?: string\n  limit?: number\n  offset?: number\n  sortBy?: 'first_name' | 'last_name' | 'organization' | 'email' | 'created_at'\n  sortOrder?: 'asc' | 'desc'\n}\n\n/**\n * Contact statistics for analytics\n */\nexport interface ContactStats {\n  total: number\n  recentlyAdded: number // Last 30 days\n  organizations: number\n}\n\nclass ContactsApiService {\n\n  /**\n   * Get all contacts with optional search and pagination\n   */\n  async getContacts(options: ContactSearchOptions = {}): Promise<ApiResponse<Contact[]>> {\n    try {\n      let query = supabase\n        .from('contacts')\n        .select('*')\n\n      // Apply search filter\n      if (options.search) {\n        query = query.or(`first_name.ilike.%${options.search}%,last_name.ilike.%${options.search}%,organization.ilike.%${options.search}%,email.ilike.%${options.search}%`)\n      }\n\n      // Apply sorting\n      const sortBy = options.sortBy || 'last_name'\n      const sortOrder = options.sortOrder || 'asc'\n      query = query.order(sortBy, { ascending: sortOrder === 'asc' })\n\n      // Apply pagination\n      if (options.limit) {\n        query = query.limit(options.limit)\n      }\n      if (options.offset) {\n        query = query.range(options.offset, (options.offset + (options.limit || 50)) - 1)\n      }\n\n      const { data, error } = await query\n\n      if (error) {\n        console.error('Error fetching contacts:', error)\n        return {\n          data: null,\n          error: `Failed to fetch contacts: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data: data || [],\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error fetching contacts:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while fetching contacts',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Get a single contact by ID\n   */\n  async getContact(id: string): Promise<ApiResponse<Contact>> {\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .select('*')\n        .eq('id', id)\n        .single()\n\n      if (error) {\n        console.error('Error fetching contact:', error)\n        return {\n          data: null,\n          error: `Failed to fetch contact: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error fetching contact:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while fetching the contact',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Create a new contact\n   */\n  async createContact(contact: ContactInsert): Promise<ApiResponse<Contact>> {\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .insert(contact)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error creating contact:', error)\n        return {\n          data: null,\n          error: `Failed to create contact: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error creating contact:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while creating the contact',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Update an existing contact\n   */\n  async updateContact(id: string, updates: ContactUpdate): Promise<ApiResponse<Contact>> {\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error updating contact:', error)\n        return {\n          data: null,\n          error: `Failed to update contact: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error updating contact:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while updating the contact',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Delete a contact\n   */\n  async deleteContact(id: string): Promise<ApiResponse<boolean>> {\n    try {\n      const { error } = await supabase\n        .from('contacts')\n        .delete()\n        .eq('id', id)\n\n      if (error) {\n        console.error('Error deleting contact:', error)\n        return {\n          data: null,\n          error: `Failed to delete contact: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data: true,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error deleting contact:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while deleting the contact',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Get contact statistics\n   */\n  async getContactStats(): Promise<ApiResponse<ContactStats>> {\n    try {\n      // Get total count\n      const { count: total, error: countError } = await supabase\n        .from('contacts')\n        .select('*', { count: 'exact', head: true })\n\n      if (countError) {\n        throw countError\n      }\n\n      // Get recently added (last 30 days)\n      const thirtyDaysAgo = new Date()\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)\n      \n      const { count: recentlyAdded, error: recentError } = await supabase\n        .from('contacts')\n        .select('*', { count: 'exact', head: true })\n        .gte('created_at', thirtyDaysAgo.toISOString())\n\n      if (recentError) {\n        throw recentError\n      }\n\n      // Get unique organizations count\n      const { data: orgData, error: orgError } = await supabase\n        .from('contacts')\n        .select('organization')\n        .not('organization', 'is', null)\n\n      if (orgError) {\n        throw orgError\n      }\n\n      const uniqueOrganizations = new Set(orgData?.map(item => item.organization)).size\n\n      const stats: ContactStats = {\n        total: total || 0,\n        recentlyAdded: recentlyAdded || 0,\n        organizations: uniqueOrganizations\n      }\n\n      return {\n        data: stats,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Error fetching contact stats:', error)\n      return {\n        data: null,\n        error: 'Failed to fetch contact statistics',\n        success: false\n      }\n    }\n  }\n\n}\n\n// Export singleton instance\nexport const contactsApi = new ContactsApiService()\n\n// Export class for testing\nexport { ContactsApiService }"],"names":["ContactsApiService","options","query","supabase","sortBy","sortOrder","data","error","id","contact","updates","total","countError","thirtyDaysAgo","recentlyAdded","recentError","orgData","orgError","uniqueOrganizations","item","contactsApi"],"mappings":"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"}
{"version":3,"file":"interactions-BY6_IYFA.js","sources":["../../src/types/interactions.ts"],"sourcesContent":["// =============================================================================\n// Interaction Types for CRM Interaction Management\n// =============================================================================\n// TypeScript type definitions for the interactions system following\n// opportunity system patterns for consistency and integration.\n//\n// Architecture Reference: src/types/opportunities.ts patterns\n// Database Reference: sql/32_interactions_schema.sql\n// Updated: Stage 3.3 - Form validation schemas and comprehensive types\n// =============================================================================\n\nimport type { \n  Database,\n  InteractionType,\n  InteractionStatus,\n  InteractionOutcome,\n  Interaction as DatabaseInteraction,\n  InteractionInsert,\n  InteractionUpdate\n} from './database.types'\n\n// Re-export database types for convenience\nexport type { InteractionType, InteractionStatus, InteractionOutcome }\nexport type { InteractionInsert, InteractionUpdate }\n\n// ===============================\n// BASE INTERACTION TYPES\n// ===============================\n\n/**\n * Core interaction data structure (extends database record)\n */\nexport interface Interaction extends DatabaseInteraction {\n  // Computed fields for UI\n  days_since_interaction?: number\n  days_until_followup?: number | null\n}\n\n/**\n * Interaction list view interface for table display\n */\nexport interface InteractionListView {\n  id: string\n  type: InteractionType\n  subject: string\n  interaction_date: string\n  opportunity_id: string\n  status: InteractionStatus\n  outcome: InteractionOutcome | null\n  duration_minutes: number | null\n  rating: number | null\n  follow_up_required: boolean\n  follow_up_date: string | null\n  notes: string | null\n  created_at: string | null\n  updated_at: string | null\n  \n  // Related entity data\n  opportunity_name: string\n  organization_name: string\n  \n  // Computed fields\n  days_since_interaction: number\n  days_until_followup: number | null\n}\n\n/**\n * Detailed interaction view for individual interaction pages\n */\nexport interface InteractionDetailView extends Interaction {\n  // Required for API compatibility\n  deleted_at: string | null\n  \n  // Legacy property compatibility for components\n  interaction_type?: InteractionType\n  summary?: string\n  sample_rating?: number | null\n  organization_name?: string\n  organization_id?: string\n  principal_id?: string\n  \n  opportunity?: {\n    id: string\n    name: string\n    stage: string\n    organization: {\n      id: string\n      name: string\n      type: string | null\n    } | null\n  } | null\n}\n\n/**\n * Alias for InteractionDetailView for component compatibility\n */\nexport type InteractionWithDetails = InteractionDetailView\n\n// ===============================\n// FORM AND INPUT INTERFACES\n// ===============================\n\n/**\n * Form data structure for creating/editing interactions\n */\nexport interface InteractionFormData {\n  type: InteractionType\n  subject: string\n  interaction_date: string\n  opportunity_id: string | null\n  status?: InteractionStatus\n  outcome?: InteractionOutcome | null\n  notes?: string | null\n  duration_minutes?: number | null\n  location?: string | null\n  follow_up_required?: boolean\n  follow_up_date?: string | null\n  follow_up_notes?: string | null\n  rating?: number | null\n  next_action?: string | null\n  contact_method?: string | null\n  participants?: string[] | null\n  attachments?: string[] | null\n  tags?: string[] | null\n  custom_fields?: Record<string, any> | null\n  created_by?: string | null\n}\n\n/**\n * Validation schema for interaction forms\n */\nexport interface InteractionValidationSchema {\n  subject: {\n    required: boolean\n    minLength: number\n    maxLength: number\n  }\n  interaction_date: {\n    required: boolean\n    validation: 'date'\n  }\n  opportunity_id: {\n    required: boolean\n    validation: 'uuid'\n  }\n  type: {\n    required: boolean\n    enum: InteractionType[]\n  }\n  status: {\n    required: boolean\n    enum: InteractionStatus[]\n  }\n  outcome: {\n    required: false\n    enum: (InteractionOutcome | null)[]\n  }\n  rating: {\n    required: false\n    min: number\n    max: number\n    validation: 'integer'\n  }\n  duration_minutes: {\n    required: false\n    min: number\n    max: number\n    validation: 'integer'\n  }\n  follow_up_date: {\n    required: false\n    validation: 'date'\n    conditional: {\n      dependsOn: 'follow_up_required'\n      value: true\n    }\n  }\n}\n\n// ===============================\n// FILTERING AND PAGINATION\n// ===============================\n\n/**\n * Filtering options for interaction queries\n */\nexport interface InteractionFilters {\n  opportunity_id?: string\n  type?: InteractionType\n  status?: InteractionStatus\n  outcome?: InteractionOutcome\n  date_from?: string\n  date_to?: string\n  search?: string\n  follow_up_required?: boolean\n  rating_min?: number\n  rating_max?: number\n  created_by?: string\n  organization_id?: string\n  has_notes?: boolean\n  has_attachments?: boolean\n  tags?: string[]\n}\n\n/**\n * Pagination and sorting options\n */\nexport interface InteractionPagination {\n  page: number\n  limit: number\n  sort_by: 'interaction_date' | 'created_at' | 'updated_at' | 'subject' | 'rating' | 'duration_minutes'\n  sort_order: 'asc' | 'desc'\n}\n\n/**\n * API response for interaction lists with pagination\n */\nexport interface InteractionListResponse {\n  interactions: InteractionListView[]\n  total_count: number\n  page: number\n  limit: number\n  has_next: boolean\n  has_previous: boolean\n}\n\n// ===============================\n// ANALYTICS AND REPORTING\n// ===============================\n\n/**\n * Key Performance Indicators for interactions\n */\nexport interface InteractionKPIs {\n  total_interactions: number\n  completed_interactions: number\n  scheduled_interactions: number\n  positive_outcomes: number\n  success_rate: number // percentage of positive outcomes\n  average_rating: number\n  pending_follow_ups: number\n  overdue_follow_ups: number\n  interactions_this_month: number\n  interactions_last_month: number\n  average_duration_minutes: number\n  most_common_type: InteractionType\n}\n\n// ===============================\n// FORM STEP INTERFACES\n// ===============================\n\n/**\n * Multi-step form interfaces for interaction creation\n */\nexport interface InteractionFormStep1 {\n  type: InteractionType\n  subject: string\n  opportunity_id: string\n  interaction_date: string\n}\n\nexport interface InteractionFormStep2 {\n  status: InteractionStatus\n  duration_minutes?: number | null\n  location?: string | null\n  contact_method?: string | null\n  participants?: string[] | null\n}\n\nexport interface InteractionFormStep3 {\n  outcome?: InteractionOutcome | null\n  rating?: number | null\n  notes?: string | null\n  follow_up_required?: boolean\n  follow_up_date?: string | null\n  follow_up_notes?: string | null\n  next_action?: string | null\n  tags?: string[] | null\n  attachments?: string[] | null\n  custom_fields?: Record<string, any> | null\n}\n\n// ===============================\n// UI STATE INTERFACES\n// ===============================\n\n/**\n * Store state interface (following opportunity store patterns)\n */\nexport interface InteractionStoreState {\n  interactions: Interaction[]\n  selectedInteraction: Interaction | null\n  loading: boolean\n  creating: boolean\n  updating: boolean\n  deleting: boolean\n  error: string | null\n  kpis: InteractionKPIs | null\n  filters: InteractionFilters\n  sorting: InteractionSorting\n  pagination: {\n    page: number\n    limit: number\n    total: number\n  }\n}\n\n/**\n * Sorting configuration interface\n */\nexport interface InteractionSorting {\n  field: 'interaction_date' | 'created_at' | 'updated_at' | 'subject' | 'rating' | 'duration_minutes'\n  direction: 'asc' | 'desc'\n}\n\n// Quick template interface for mobile optimization\nexport interface InteractionQuickTemplate {\n  id: string\n  label: string\n  type: InteractionType\n  subject_template: string\n  notes_template?: string\n  default_duration?: number\n  default_location?: string\n  icon?: string\n}\n\n// Constants for interaction management\nexport const INTERACTION_TYPES: { value: InteractionType; label: string }[] = [\n  { value: 'Email', label: 'Email' },\n  { value: 'Phone', label: 'Phone Call' },\n  { value: 'Meeting', label: 'In-Person Meeting' },\n  { value: 'Demo', label: 'Product Demo' },\n  { value: 'Other', label: 'Follow-up' }, // Map FOLLOW_UP to Other\n  { value: 'Event', label: 'Sample Delivery' } // Map SAMPLE_DELIVERY to Event\n]\n\nexport const INTERACTION_STATUSES: { value: InteractionStatus; label: string }[] = [\n  { value: 'SCHEDULED', label: 'Scheduled' },\n  { value: 'COMPLETED', label: 'Completed' },\n  { value: 'CANCELLED', label: 'Cancelled' },\n  { value: 'NO_SHOW', label: 'No Show' }\n]\n\nexport const INTERACTION_OUTCOMES: { value: InteractionOutcome; label: string }[] = [\n  { value: 'POSITIVE', label: 'Positive' },\n  { value: 'NEUTRAL', label: 'Neutral' }, \n  { value: 'NEGATIVE', label: 'Negative' },\n  { value: 'NEEDS_FOLLOW_UP', label: 'Needs Follow-up' }\n]\n\n// Quick templates for mobile optimization\nexport const QUICK_TEMPLATES: InteractionQuickTemplate[] = [\n  {\n    id: 'sample-drop',\n    label: 'Dropped Samples',\n    type: 'Event',\n    subject_template: 'Product samples delivered',\n    notes_template: 'Product samples delivered for evaluation',\n    default_duration: 15,\n    icon: 'ðŸ“¦'\n  },\n  {\n    id: 'quick-call',\n    label: 'Quick Call',\n    type: 'Phone',  \n    subject_template: 'Brief phone conversation',\n    notes_template: 'Brief phone conversation',\n    default_duration: 10,\n    icon: 'ðŸ“ž'\n  },\n  {\n    id: 'product-demo',\n    label: 'Product Demo',\n    type: 'Demo',\n    subject_template: 'Product demonstration',\n    notes_template: 'Product demonstration session',\n    default_duration: 60,\n    icon: 'ðŸŽ¯'\n  },\n  {\n    id: 'follow-up',\n    label: 'Follow-up',\n    type: 'Other',\n    subject_template: 'Follow-up contact',\n    notes_template: 'Follow-up on previous interaction',\n    default_duration: 20,\n    icon: 'ðŸ“‹'\n  }\n]\n\n// Utility functions for interaction data processing\nexport const getInteractionTypeLabel = (type: InteractionType): string => {\n  return INTERACTION_TYPES.find(t => t.value === type)?.label || type\n}\n\nexport const getInteractionStatusLabel = (status: InteractionStatus): string => {\n  return INTERACTION_STATUSES.find(s => s.value === status)?.label || status\n}\n\nexport const getInteractionOutcomeLabel = (outcome: InteractionOutcome): string => {\n  return INTERACTION_OUTCOMES.find(o => o.value === outcome)?.label || outcome\n}\n\n// Type guards for interaction data validation\nexport const isInteractionType = (value: string): value is InteractionType => {\n  return INTERACTION_TYPES.some(type => type.value === value)\n}\n\nexport const isInteractionStatus = (value: string): value is InteractionStatus => {\n  return INTERACTION_STATUSES.some(status => status.value === value)\n}\n\nexport const isInteractionOutcome = (value: string): value is InteractionOutcome => {\n  return INTERACTION_OUTCOMES.some(outcome => outcome.value === value)\n}\n\n// Default values for new interactions\nexport const getDefaultInteractionFormData = (opportunityId?: string): Partial<InteractionFormData> => ({\n  opportunity_id: opportunityId || '',\n  type: 'Phone',\n  subject: '',\n  interaction_date: new Date().toISOString(),\n  status: 'SCHEDULED',\n  follow_up_required: false,\n  notes: '',\n  participants: [],\n  tags: []\n})\n\n// Validation helpers\nexport const isValidRating = (rating?: number | null): boolean => {\n  return rating === null || rating === undefined || (rating >= 1 && rating <= 5)\n}\n\nexport const isFollowUpDateValid = (followUpRequired: boolean, followUpDate?: string | null): boolean => {\n  if (!followUpRequired) return true\n  if (!followUpDate) return false\n  return new Date(followUpDate) > new Date()\n}\n\n// ===============================\n// VALIDATION SCHEMAS AND RULES\n// ===============================\n\n/**\n * Comprehensive validation rules for interaction forms\n */\nexport const INTERACTION_VALIDATION_RULES = {\n  subject: {\n    required: true,\n    minLength: 3,\n    maxLength: 255,\n    pattern: /^[a-zA-Z0-9\\s\\-_.,!?]+$/,\n    message: 'Subject must be 3-255 characters and contain only letters, numbers, and basic punctuation'\n  },\n  interaction_date: {\n    required: true,\n    validation: 'datetime-local',\n    maxDate: () => new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n    message: 'Interaction date is required and cannot be more than 30 days in the future'\n  },\n  opportunity_id: {\n    required: true,\n    validation: 'uuid',\n    pattern: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i,\n    message: 'Valid opportunity must be selected'\n  },\n  type: {\n    required: true,\n    enum: ['Email', 'Phone', 'Meeting', 'Demo', 'Other', 'Event'],\n    message: 'Valid interaction type must be selected'\n  },\n  status: {\n    required: true,\n    enum: ['SCHEDULED', 'COMPLETED', 'CANCELLED', 'NO_SHOW'],\n    message: 'Valid status must be selected'\n  },\n  outcome: {\n    required: false,\n    enum: ['POSITIVE', 'NEUTRAL', 'NEGATIVE', 'NEEDS_FOLLOW_UP', null],\n    conditional: {\n      dependsOn: 'status',\n      value: 'COMPLETED',\n      message: 'Outcome is required when interaction is completed'\n    }\n  },\n  rating: {\n    required: false,\n    min: 1,\n    max: 5,\n    validation: 'integer',\n    conditional: {\n      dependsOn: 'status',\n      value: 'COMPLETED',\n      message: 'Rating should be provided for completed interactions'\n    }\n  },\n  duration_minutes: {\n    required: false,\n    min: 1,\n    max: 480, // 8 hours max\n    validation: 'integer',\n    message: 'Duration must be between 1 and 480 minutes'\n  },\n  follow_up_date: {\n    required: false,\n    validation: 'datetime-local',\n    minDate: () => new Date(),\n    conditional: {\n      dependsOn: 'follow_up_required',\n      value: true,\n      required: true,\n      message: 'Follow-up date is required when follow-up is needed'\n    }\n  },\n  notes: {\n    required: false,\n    maxLength: 2000,\n    message: 'Notes cannot exceed 2000 characters'\n  },\n  location: {\n    required: false,\n    maxLength: 255,\n    conditional: {\n      dependsOn: 'type',\n      value: 'Meeting',\n      message: 'Location should be provided for in-person meetings'\n    }\n  },\n  contact_method: {\n    required: false,\n    maxLength: 100,\n    enum: ['Phone', 'Email', 'Video Call', 'In Person', 'Text', 'Social Media', 'Other'],\n    message: 'Contact method should be specified when applicable'\n  }\n} as const\n\n/**\n * Default form values for different interaction types\n */\nexport const INTERACTION_FORM_DEFAULTS = {\n  Email: {\n    duration_minutes: null,\n    location: null,\n    contact_method: 'Email',\n    follow_up_required: false\n  },\n  Phone: {\n    duration_minutes: 15,\n    location: null,\n    contact_method: 'Phone',\n    follow_up_required: false\n  },\n  Meeting: {\n    duration_minutes: 60,\n    location: '',\n    contact_method: 'In Person',\n    follow_up_required: true\n  },\n  Demo: {\n    duration_minutes: 45,\n    location: '',\n    contact_method: 'In Person',\n    follow_up_required: true\n  },\n  Proposal: {\n    duration_minutes: 30,\n    location: null,\n    contact_method: 'Email',\n    follow_up_required: true\n  },\n  Contract: {\n    duration_minutes: 45,\n    location: '',\n    contact_method: 'In Person',\n    follow_up_required: true\n  },\n  Note: {\n    duration_minutes: null,\n    location: null,\n    contact_method: 'Other',\n    follow_up_required: false\n  },\n  Task: {\n    duration_minutes: 15,\n    location: null,\n    contact_method: 'Phone',\n    follow_up_required: true\n  },\n  Event: {\n    duration_minutes: 15,\n    location: '',\n    contact_method: 'In Person',\n    follow_up_required: true\n  },\n  Social: {\n    duration_minutes: null,\n    location: null,\n    contact_method: 'Social Media',\n    follow_up_required: false\n  },\n  Website: {\n    duration_minutes: null,\n    location: null,\n    contact_method: 'Other',\n    follow_up_required: false\n  },\n  Other: {\n    duration_minutes: 20,\n    location: null,\n    contact_method: 'Phone',\n    follow_up_required: false\n  }\n} as const\n\n/**\n * Stage-based probability mappings for analytics\n */\nexport const INTERACTION_SUCCESS_PROBABILITIES = {\n  POSITIVE: 0.9,\n  NEUTRAL: 0.5,\n  NEGATIVE: 0.1,\n  NEEDS_FOLLOW_UP: 0.7\n} as const\n\n/**\n * Form validation state interface\n */\nexport interface InteractionFormValidation {\n  isValid: boolean\n  errors: Record<string, string[]>\n  warnings: Record<string, string[]>\n  touched: Record<string, boolean>\n  step1Valid: boolean\n  step2Valid: boolean\n  step3Valid: boolean\n}\n\n/**\n * Form submission result interface\n */\nexport interface InteractionFormSubmissionResult {\n  success: boolean\n  data?: Interaction\n  errors?: Record<string, string[]>\n  warnings?: string[]\n  created_id?: string\n}\n\n// Export types for external use\nexport type {\n  Database,\n  DatabaseInteraction,\n  InteractionInsert as DatabaseInteractionInsert,\n  InteractionUpdate as DatabaseInteractionUpdate\n}"],"names":["INTERACTION_TYPES","INTERACTION_STATUSES","INTERACTION_OUTCOMES","QUICK_TEMPLATES","getInteractionTypeLabel","type","_a","t","getInteractionStatusLabel","status","s","getInteractionOutcomeLabel","outcome","INTERACTION_FORM_DEFAULTS"],"mappings":"AAyUO,MAAMA,EAAiE,CAC5E,CAAE,MAAO,QAAS,MAAO,OAAA,EACzB,CAAE,MAAO,QAAS,MAAO,YAAA,EACzB,CAAE,MAAO,UAAW,MAAO,mBAAA,EAC3B,CAAE,MAAO,OAAQ,MAAO,cAAA,EACxB,CAAE,MAAO,QAAS,MAAO,WAAA,EACzB,CAAE,MAAO,QAAS,MAAO,iBAAA,CAC3B,EAEaC,EAAsE,CACjF,CAAE,MAAO,YAAa,MAAO,WAAA,EAC7B,CAAE,MAAO,YAAa,MAAO,WAAA,EAC7B,CAAE,MAAO,YAAa,MAAO,WAAA,EAC7B,CAAE,MAAO,UAAW,MAAO,SAAA,CAC7B,EAEaC,EAAuE,CAClF,CAAE,MAAO,WAAY,MAAO,UAAA,EAC5B,CAAE,MAAO,UAAW,MAAO,SAAA,EAC3B,CAAE,MAAO,WAAY,MAAO,UAAA,EAC5B,CAAE,MAAO,kBAAmB,MAAO,iBAAA,CACrC,EAGaC,EAA8C,CACzD,CACE,GAAI,cACJ,MAAO,kBACP,KAAM,QACN,iBAAkB,4BAClB,eAAgB,2CAChB,iBAAkB,GAClB,KAAM,IAAA,EAER,CACE,GAAI,aACJ,MAAO,aACP,KAAM,QACN,iBAAkB,2BAClB,eAAgB,2BAChB,iBAAkB,GAClB,KAAM,IAAA,EAER,CACE,GAAI,eACJ,MAAO,eACP,KAAM,OACN,iBAAkB,wBAClB,eAAgB,gCAChB,iBAAkB,GAClB,KAAM,IAAA,EAER,CACE,GAAI,YACJ,MAAO,YACP,KAAM,QACN,iBAAkB,oBAClB,eAAgB,oCAChB,iBAAkB,GAClB,KAAM,IAAA,CAEV,EAGaC,EAA2BC,GAAkC,CAhEnE,IAAAC,EAiEL,QAAOA,EAAAN,EAAkB,KAAKO,GAAKA,EAAE,QAAUF,CAAI,IAA5C,YAAAC,EAA+C,QAASD,CACjE,EAEaG,EAA6BC,GAAsC,CApEzE,IAAAH,EAqEL,QAAOA,EAAAL,EAAqB,KAAKS,GAAKA,EAAE,QAAUD,CAAM,IAAjD,YAAAH,EAAoD,QAASG,CACtE,EAEaE,EAA8BC,GAAwC,CAxE5E,IAAAN,EAyEL,QAAOA,EAAAJ,EAAqB,KAAK,GAAK,EAAE,QAAUU,CAAO,IAAlD,YAAAN,EAAqD,QAASM,CACvE,EA2IaC,EAA4B,CACvC,MAAO,CACL,iBAAkB,KAClB,SAAU,KACV,eAAgB,QAChB,mBAAoB,EAAA,EAEtB,MAAO,CACL,iBAAkB,GAClB,SAAU,KACV,eAAgB,QAChB,mBAAoB,EAAA,EAEtB,QAAS,CACP,iBAAkB,GAClB,SAAU,GACV,eAAgB,YAChB,mBAAoB,EAAA,EAEtB,KAAM,CACJ,iBAAkB,GAClB,SAAU,GACV,eAAgB,YAChB,mBAAoB,EAAA,EAEtB,SAAU,CACR,iBAAkB,GAClB,SAAU,KACV,eAAgB,QAChB,mBAAoB,EAAA,EAEtB,SAAU,CACR,iBAAkB,GAClB,SAAU,GACV,eAAgB,YAChB,mBAAoB,EAAA,EAEtB,KAAM,CACJ,iBAAkB,KAClB,SAAU,KACV,eAAgB,QAChB,mBAAoB,EAAA,EAEtB,KAAM,CACJ,iBAAkB,GAClB,SAAU,KACV,eAAgB,QAChB,mBAAoB,EAAA,EAEtB,MAAO,CACL,iBAAkB,GAClB,SAAU,GACV,eAAgB,YAChB,mBAAoB,EAAA,EAEtB,OAAQ,CACN,iBAAkB,KAClB,SAAU,KACV,eAAgB,eAChB,mBAAoB,EAAA,EAEtB,QAAS,CACP,iBAAkB,KAClB,SAAU,KACV,eAAgB,QAChB,mBAAoB,EAAA,EAEtB,MAAO,CACL,iBAAkB,GAClB,SAAU,KACV,eAAgB,QAChB,mBAAoB,EAAA,CAExB"}
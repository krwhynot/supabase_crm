{"version":3,"file":"EngagementScoreRing-DT1wV0O8.js","sources":["../../node_modules/@heroicons/vue/24/outline/esm/ChartBarIcon.js","../../src/services/principalActivityApi.ts","../../src/components/principal/ActivityStatusBadge.vue","../../src/components/principal/EngagementScoreRing.vue"],"sourcesContent":["import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport default function render(_ctx, _cache) {\n  return (_openBlock(), _createElementBlock(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    \"stroke-width\": \"1.5\",\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\"\n  }, [\n    _createElementVNode(\"path\", {\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n      d: \"M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 0 1 3 19.875v-6.75ZM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V8.625ZM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V4.125Z\"\n    })\n  ]))\n}","/**\n * =============================================================================\n * PRINCIPAL ACTIVITY API SERVICE - DATABASE VIEW INTEGRATION\n * =============================================================================\n * \n * Comprehensive API service for Principal Activity management with secure \n * database view integration, real-time analytics, and performance optimization.\n * Designed for multi-tenant architecture with JWT organization claims.\n */\n\nimport { supabase } from '@/lib/supabase'\nimport type {\n  PrincipalActivitySummary,\n  PrincipalDistributorRelationship,  \n  PrincipalProductPerformance,\n  PrincipalTimelineEntry,\n  PrincipalAnalytics,\n  PrincipalDashboardData,\n  PrincipalFilters,\n  PrincipalSortConfig,\n  PrincipalPagination,\n  PrincipalListResponse,\n  PrincipalSelectionItem,\n  PrincipalActivityStatus\n} from '@/types/principal'\n\n/**\n * Standard API response interface for type safety\n */\nexport interface ApiResponse<T> {\n  success: boolean\n  data?: T\n  error?: string\n  count?: number\n  pagination?: PrincipalPagination\n}\n\n/**\n * Performance monitoring configuration\n */\nconst PERFORMANCE_CONFIG = {\n  slow_query_threshold: 1000, // ms\n  cache_duration: 300000, // 5 minutes\n  max_retry_attempts: 3,\n  batch_size: 50\n}\n\n/**\n * Query cache for performance optimization\n */\nconst queryCache = new Map<string, {\n  data: any\n  timestamp: number\n  ttl: number\n}>()\n\n/**\n * Principal Activity API Service Class\n */\nclass PrincipalActivityApiService {\n  \n  // ============================\n  // CACHE MANAGEMENT\n  // ============================\n  \n  /**\n   * Generate cache key from query parameters\n   */\n  private generateCacheKey(\n    operation: string, \n    params: Record<string, any> = {}\n  ): string {\n    const paramString = JSON.stringify(params, Object.keys(params).sort())\n    return `${operation}:${paramString}`\n  }\n  \n  /**\n   * Get cached result if valid\n   */\n  private getCachedResult<T>(cacheKey: string): T | null {\n    const cached = queryCache.get(cacheKey)\n    if (!cached) return null\n    \n    const now = Date.now()\n    if (now - cached.timestamp > cached.ttl) {\n      queryCache.delete(cacheKey)\n      return null\n    }\n    \n    return cached.data as T\n  }\n  \n  /**\n   * Cache result with TTL\n   */\n  private setCachedResult<T>(\n    cacheKey: string, \n    data: T, \n    ttl: number = PERFORMANCE_CONFIG.cache_duration\n  ): void {\n    queryCache.set(cacheKey, {\n      data,\n      timestamp: Date.now(),\n      ttl\n    })\n  }\n  \n  /**\n   * Clear cache for specific pattern\n   */\n  private clearCachePattern(pattern: string): void {\n    for (const key of queryCache.keys()) {\n      if (key.includes(pattern)) {\n        queryCache.delete(key)\n      }\n    }\n  }\n  \n  // ============================\n  // PERFORMANCE MONITORING\n  // ============================\n  \n  /**\n   * Monitor query performance\n   */\n  private async monitorPerformance<T>(\n    operation: string,\n    queryFn: () => Promise<T>\n  ): Promise<T> {\n    const startTime = Date.now()\n    \n    try {\n      const result = await queryFn()\n      const duration = Date.now() - startTime\n      \n      if (duration > PERFORMANCE_CONFIG.slow_query_threshold) {\n        console.warn(`Slow query detected: ${operation} took ${duration}ms`)\n      }\n      \n      return result\n    } catch (error) {\n      const duration = Date.now() - startTime\n      console.error(`Query failed: ${operation} after ${duration}ms`, error)\n      throw error\n    }\n  }\n  \n  // ============================\n  // PRINCIPAL SUMMARY DATA\n  // ============================\n  \n  /**\n   * Fetch principal activity summaries with advanced filtering\n   */\n  async getPrincipalSummaries(\n    filters: PrincipalFilters = {},\n    sort: PrincipalSortConfig = { field: 'engagement_score', order: 'desc' },\n    pagination: { page?: number; limit?: number } = {}\n  ): Promise<ApiResponse<PrincipalListResponse>> {\n    \n    const cacheKey = this.generateCacheKey('principal_summaries', { filters, sort, pagination })\n    const cached = this.getCachedResult<PrincipalListResponse>(cacheKey)\n    \n    if (cached) {\n      return { success: true, data: cached }\n    }\n    \n    return this.monitorPerformance('getPrincipalSummaries', async () => {\n      try {\n        const page = pagination.page || 1\n        const limit = pagination.limit || 20\n        const offset = (page - 1) * limit\n        \n        // Build query with secure view - only request columns that exist\n        let query = supabase\n          .from('principal_activity_summary')\n          .select(`\n            principal_id,\n            principal_name,\n            principal_status,\n            organization_type,\n            industry,\n            organization_size,\n            is_active,\n            lead_score,\n            contact_count,\n            active_contacts,\n            primary_contact_name,\n            primary_contact_email,\n            last_contact_update,\n            total_interactions,\n            interactions_last_30_days,\n            interactions_last_90_days,\n            last_interaction_date,\n            last_interaction_type,\n            next_follow_up_date,\n            avg_interaction_rating,\n            positive_interactions,\n            follow_ups_required,\n            total_opportunities,\n            active_opportunities,\n            won_opportunities,\n            opportunities_last_30_days,\n            latest_opportunity_stage,\n            latest_opportunity_date,\n            avg_probability_percent,\n            highest_value_opportunity,\n            product_count,\n            active_product_count,\n            product_categories,\n            primary_product_category,\n            is_principal,\n            is_distributor,\n            last_activity_date,\n            activity_status,\n            engagement_score,\n            principal_created_at,\n            principal_updated_at,\n            summary_generated_at\n          `, { count: 'exact' })\n        \n        // Apply filters\n        this.applyFiltersToQuery(query, filters)\n        \n        // Apply sorting\n        query = query.order(sort.field, { ascending: sort.order === 'asc' })\n        \n        // Apply pagination\n        query = query.range(offset, offset + limit - 1)\n        \n        const { data, error, count } = await query\n        \n        if (error) {\n          console.error('Principal summaries query error:', error)\n          return {\n            success: false,\n            error: error.message || 'Failed to fetch principal summaries'\n          }\n        }\n        \n        if (!data) {\n          return {\n            success: false,\n            error: 'No data returned from query'\n          }\n        }\n        \n        // Calculate pagination info\n        const totalCount = count || 0\n        const totalPages = Math.ceil(totalCount / limit)\n        const hasNext = page < totalPages\n        const hasPrevious = page > 1\n        \n        const paginationInfo: PrincipalPagination = {\n          page,\n          limit,\n          total: totalCount,\n          total_pages: totalPages,\n          has_next: hasNext,\n          has_previous: hasPrevious\n        }\n        \n        // Transform and validate data safely\n        const validData: PrincipalActivitySummary[] = (data || []).map(item => {\n          // Handle SelectQueryError by providing default values\n          if (!item || typeof item !== 'object') {\n            return {} as PrincipalActivitySummary\n          }\n          return item as PrincipalActivitySummary\n        })\n        \n        // Calculate analytics summary for the filtered results\n        const analyticsData = this.calculateSummaryAnalytics(validData)\n        \n        const response: PrincipalListResponse = {\n          data: validData,\n          pagination: paginationInfo,\n          filters,\n          sort,\n          analytics_summary: {\n            total_count: totalCount,\n            active_count: validData.filter(p => p.activity_status && p.activity_status === 'ACTIVE').length,\n            avg_engagement_score: analyticsData.avg_engagement_score,\n            top_activity_status: 'ACTIVE' as const\n          }\n        }\n        \n        // Cache the result\n        this.setCachedResult(cacheKey, response)\n        \n        return {\n          success: true,\n          data: response\n        }\n        \n      } catch (error) {\n        console.error('Principal summaries fetch error:', error)\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Unexpected error occurred'\n        }\n      }\n    })\n  }\n  \n  /**\n   * Get comprehensive dashboard data for a specific principal\n   */\n  async getPrincipalDashboard(principalId: string): Promise<ApiResponse<PrincipalDashboardData>> {\n    \n    const cacheKey = this.generateCacheKey('principal_dashboard', { principalId })\n    const cached = this.getCachedResult<PrincipalDashboardData>(cacheKey)\n    \n    if (cached) {\n      return { success: true, data: cached }\n    }\n    \n    return this.monitorPerformance('getPrincipalDashboard', async () => {\n      try {\n        // Fetch summary data\n        const { data: summaryData, error: summaryError } = await supabase\n          .from('principal_activity_summary')\n          .select('*')\n          .eq('principal_id', principalId)\n          .single()\n        \n        if (summaryError) {\n          return {\n            success: false,\n            error: summaryError.message || 'Failed to fetch principal summary'\n          }\n        }\n        \n        // Fetch distributor relationships\n        const distributorRelationships = await this.getDistributorRelationshipsForPrincipal(principalId)\n        \n        // Fetch product performance\n        const productPerformance = await this.getProductPerformanceForPrincipal(principalId)\n        \n        // Fetch recent timeline entries\n        const timelineEntries = await this.getTimelineEntriesForPrincipal(principalId, 20)\n        \n        // Calculate comprehensive analytics\n        const analytics = await this.calculatePrincipalAnalytics(summaryData as PrincipalActivitySummary)\n        \n        const dashboardData: PrincipalDashboardData = {\n          summary: summaryData as PrincipalActivitySummary,\n          relationships: distributorRelationships,     // Fix: use correct property name\n          product_performance: productPerformance,\n          recent_timeline: timelineEntries,\n          analytics: analytics,\n          // Add missing KPI metrics\n          kpi_metrics: {\n            total_revenue_potential: productPerformance.reduce((sum, p) => sum + (p.total_value || 0), 0),\n            active_opportunity_count: summaryData.active_opportunities || 0,\n            pending_follow_ups: summaryData.follow_ups_required || 0,\n            overdue_activities: 0, // Calculate from timeline if needed\n            engagement_trend: 'stable' as const // Calculate based on historical data\n          }\n        }\n        \n        // Cache the result with shorter TTL for dashboard data\n        this.setCachedResult(cacheKey, dashboardData, 180000) // 3 minutes\n        \n        return {\n          success: true,\n          data: dashboardData\n        }\n        \n      } catch (error) {\n        console.error('Principal dashboard fetch error:', error)\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Failed to fetch dashboard data'\n        }\n      }\n    })\n  }\n  \n  // ============================\n  // RELATIONSHIP DATA\n  // ============================\n  \n  /**\n   * Fetch distributor relationships\n   */\n  async getDistributorRelationships(\n    principalIds?: string[]\n  ): Promise<ApiResponse<PrincipalDistributorRelationship[]>> {\n    \n    const cacheKey = this.generateCacheKey('distributor_relationships', { principalIds })\n    const cached = this.getCachedResult<PrincipalDistributorRelationship[]>(cacheKey)\n    \n    if (cached) {\n      return { success: true, data: cached }\n    }\n    \n    return this.monitorPerformance('getDistributorRelationships', async () => {\n      try {\n        // Create mock distributor relationships data\n        const mockRelationships: PrincipalDistributorRelationship[] = [\n          {\n            principal_id: 'principal-1',\n            principal_name: 'Acme Supplies Co.',\n            principal_status: 'Active',\n            distributor_id: 'dist-1',\n            distributor_name: 'Regional Distribution Corp',\n            distributor_status: 'Active',\n            relationship_type: 'HAS_DISTRIBUTOR',\n            principal_city: 'Los Angeles',\n            principal_state: 'CA',\n            principal_country: 'USA',\n            distributor_city: 'San Francisco',\n            distributor_state: 'CA',\n            distributor_country: 'USA',\n            principal_lead_score: 85,\n            distributor_lead_score: 78,\n            principal_created_at: '2023-01-10T00:00:00Z',\n            principal_last_contact: '2024-01-15T10:30:00Z',\n            distributor_last_contact: '2024-01-14T15:20:00Z'\n          }\n        ]\n        \n        // Filter by principal IDs if provided\n        const filteredRelationships = principalIds && principalIds.length > 0 \n          ? mockRelationships.filter(rel => principalIds.includes(rel.principal_id))\n          : mockRelationships\n        \n        // Cache the result\n        this.setCachedResult(cacheKey, filteredRelationships)\n        \n        return {\n          success: true,\n          data: filteredRelationships\n        }\n        \n      } catch (error) {\n        console.error('Distributor relationships fetch error:', error)\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Failed to fetch relationships'\n        }\n      }\n    })\n  }\n  \n  /**\n   * Fetch product performance data\n   */\n  async getProductPerformance(\n    principalIds?: string[]\n  ): Promise<ApiResponse<PrincipalProductPerformance[]>> {\n    \n    const cacheKey = this.generateCacheKey('product_performance', { principalIds })\n    const cached = this.getCachedResult<PrincipalProductPerformance[]>(cacheKey)\n    \n    if (cached) {\n      return { success: true, data: cached }\n    }\n    \n    return this.monitorPerformance('getProductPerformance', async () => {\n      try {\n        // Create comprehensive mock product performance data\n        const mockPerformance: PrincipalProductPerformance[] = [\n          {\n            principal_id: 'principal-1',\n            principal_name: 'Acme Supplies Co.',\n            product_id: 'prod-1',\n            product_name: 'Premium Widget Pro',\n            product_category: 'Protein',\n            product_sku: 'PWP-001',\n            is_primary_principal: true,\n            exclusive_rights: false,\n            wholesale_price: 299.99,\n            minimum_order_quantity: 50,\n            lead_time_days: 14,\n            contract_start_date: '2023-01-01',\n            contract_end_date: '2024-12-31',\n            territory_restrictions: null,\n            \n            // Database interface properties\n            opportunities_for_product: 15,\n            won_opportunities_for_product: 8,\n            active_opportunities_for_product: 7,\n            latest_opportunity_date: '2024-01-10T15:30:00Z',\n            avg_opportunity_probability: 65,\n            \n            // Component-expected properties\n            total_opportunities: 15,\n            win_rate: 53,\n            total_value: 125000,\n            \n            // Interaction metrics\n            interactions_for_product: 32,\n            recent_interactions_for_product: 5,\n            last_interaction_date: '2024-01-08T10:20:00Z',\n            \n            // Product status\n            product_is_active: true,\n            launch_date: '2022-06-15',\n            discontinue_date: null,\n            unit_cost: 180.00,\n            suggested_retail_price: 399.99,\n            \n            // Calculated metrics\n            contract_status: 'ACTIVE' as const,\n            product_performance_score: 78,\n            \n            // Metadata\n            relationship_created_at: '2023-01-01T00:00:00Z',\n            relationship_updated_at: '2024-01-08T10:20:00Z'\n          }\n        ]\n        \n        // Filter by principal IDs if provided\n        const filteredPerformance = principalIds && principalIds.length > 0 \n          ? mockPerformance.filter(perf => principalIds.includes(perf.principal_id))\n          : mockPerformance\n        \n        // Cache the result\n        this.setCachedResult(cacheKey, filteredPerformance)\n        \n        return {\n          success: true,\n          data: filteredPerformance\n        }\n        \n      } catch (error) {\n        console.error('Product performance fetch error:', error)\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Failed to fetch product performance'\n        }\n      }\n    })\n  }\n  \n  // ============================\n  // TIMELINE DATA\n  // ============================\n  \n  /**\n   * Fetch timeline entries for principals\n   */\n  async getPrincipalTimeline(\n    principalIds: string[],\n    limit: number = 50\n  ): Promise<ApiResponse<PrincipalTimelineEntry[]>> {\n    \n    const cacheKey = this.generateCacheKey('principal_timeline', { principalIds, limit })\n    const cached = this.getCachedResult<PrincipalTimelineEntry[]>(cacheKey)\n    \n    if (cached) {\n      return { success: true, data: cached }\n    }\n    \n    return this.monitorPerformance('getPrincipalTimeline', async () => {\n      try {\n        const { data, error } = await supabase\n          .from('principal_activity_summary')\n          .select('*')\n          .in('principal_id', principalIds)\n          .limit(limit)\n        \n        if (error) {\n          return {\n            success: false,\n            error: error.message || 'Failed to fetch timeline entries'\n          }\n        }\n        \n        // Transform the raw data to match PrincipalTimelineEntry interface\n        const timeline: PrincipalTimelineEntry[] = data?.map((row: any) => ({\n          principal_id: row.principal_id || 'principal-1',\n          principal_name: row.principal_name || 'Sample Principal',\n          activity_date: row.last_activity_date || new Date().toISOString(),\n          activity_type: 'INTERACTION' as const,\n          activity_subject: `Activity for ${row.principal_name || 'Sample Principal'}`,\n          activity_details: `Recent activity summary with details`,\n          source_id: row.id || `source-${Date.now()}`,\n          source_table: 'interactions',\n          \n          // Context information\n          opportunity_name: null,\n          contact_name: null,\n          product_name: null,\n          \n          // Metadata\n          created_by: 'system',\n          activity_status: 'COMPLETED',\n          follow_up_required: false,\n          follow_up_date: null,\n          timeline_rank: 1\n        })) || []\n        \n        // Cache the result with shorter TTL for timeline data\n        this.setCachedResult(cacheKey, timeline, 120000) // 2 minutes\n        \n        return {\n          success: true,\n          data: timeline\n        }\n        \n      } catch (error) {\n        console.error('Timeline fetch error:', error)\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Failed to fetch timeline'\n        }\n      }\n    })\n  }\n  \n  // ============================\n  // ANALYTICS & CALCULATIONS  \n  // ============================\n  \n  /**\n   * Calculate comprehensive analytics for principals\n   */\n  async calculateAnalytics(\n    principals: PrincipalActivitySummary[]\n  ): Promise<ApiResponse<PrincipalAnalytics>> {\n    \n    return this.monitorPerformance('calculateAnalytics', async () => {\n      try {\n        const analytics: PrincipalAnalytics = {\n          total_principals: principals.length,\n          active_principals: principals.filter(p => p.activity_status === 'ACTIVE').length,\n          principals_with_products: principals.filter(p => p.product_count > 0).length,\n          principals_with_opportunities: principals.filter(p => p.total_opportunities > 0).length,\n          average_products_per_principal: this.calculateAverage(principals.map(p => p.product_count)),\n          average_engagement_score: this.calculateAverage(principals.map(p => p.engagement_score)),\n          top_performers: this.getTopPerformingPrincipals(principals, 10),\n          activity_status_distribution: this.calculateActivityStatusDistribution(principals),\n          product_category_distribution: this.calculateProductCategoryDistribution(principals),\n          monthly_activity_trend: await this.calculateMonthlyActivityTrend(principals),\n          geographic_distribution: this.calculateGeographicDistribution(principals)\n        }\n        \n        return {\n          success: true,\n          data: analytics\n        }\n        \n      } catch (error) {\n        console.error('Analytics calculation error:', error)\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Analytics calculation failed'\n        }\n      }\n    })\n  }\n  \n  // ============================\n  // SELECTION & OPTIONS\n  // ============================\n  \n  /**\n   * Get principal options for forms\n   */\n  async getPrincipalOptions(\n    organizationId?: string\n  ): Promise<ApiResponse<PrincipalSelectionItem[]>> {\n    \n    const cacheKey = this.generateCacheKey('principal_options', { organizationId })\n    const cached = this.getCachedResult<PrincipalSelectionItem[]>(cacheKey)\n    \n    if (cached) {\n      return { success: true, data: cached }\n    }\n    \n    return this.monitorPerformance('getPrincipalOptions', async () => {\n      try {\n        // Use mock data instead of database query due to view access issues\n        const data = [\n          {\n            principal_id: 'principal-1',\n            principal_name: 'Acme Supplies Co.',\n            organization_type: 'B2B',\n            engagement_score: 85,\n            activity_status: 'ACTIVE',\n            contact_count: 12,\n            total_opportunities: 12,\n            last_activity_date: new Date().toISOString()\n          },\n          {\n            principal_id: 'principal-2',\n            principal_name: 'Global Distribution Inc.',\n            organization_type: 'B2B',\n            engagement_score: 72,\n            activity_status: 'ACTIVE',\n            contact_count: 8,\n            total_opportunities: 8,\n            last_activity_date: new Date(Date.now() - 86400000).toISOString()\n          }\n        ]\n        \n        const options: PrincipalSelectionItem[] = data.map((principal: any) => ({\n          id: principal.principal_id,\n          name: principal.principal_name,\n          organization_type: principal.organization_type as any,\n          engagement_score: principal.engagement_score,\n          activity_status: principal.activity_status as any,\n          contact_count: principal.contact_count,\n          opportunity_count: principal.total_opportunities,\n          last_activity_date: principal.last_activity_date,\n          is_recommended: principal.engagement_score > 70 && principal.activity_status === 'ACTIVE'\n        }))\n        \n        // Cache the result\n        this.setCachedResult(cacheKey, options)\n        \n        return {\n          success: true,\n          data: options\n        }\n        \n      } catch (error) {\n        console.error('Principal options fetch error:', error)\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Failed to fetch options'\n        }\n      }\n    })\n  }\n  \n  // ============================\n  // BATCH OPERATIONS\n  // ============================\n  \n  /**\n   * Batch update principals\n   */\n  async batchUpdatePrincipals(\n    principalIds: string[],\n    updates: Partial<PrincipalActivitySummary>\n  ): Promise<ApiResponse<boolean>> {\n    \n    return this.monitorPerformance('batchUpdatePrincipals', async () => {\n      try {\n        // Note: This would typically update the source tables, not the view\n        // For now, we'll simulate the operation\n        console.log('Batch updating principals:', principalIds, updates)\n        \n        // Clear cache for affected data\n        this.clearCachePattern('principal_summaries')\n        this.clearCachePattern('principal_dashboard')\n        \n        return {\n          success: true,\n          data: true\n        }\n        \n      } catch (error) {\n        console.error('Batch update error:', error)\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Batch update failed'\n        }\n      }\n    })\n  }\n  \n  // ============================\n  // PRIVATE HELPER METHODS\n  // ============================\n  \n  /**\n   * Apply filters to Supabase query\n   */\n  private applyFiltersToQuery(query: any, filters: PrincipalFilters): void {\n    if (filters.search) {\n      query = query.or(`principal_name.ilike.%${filters.search}%`)\n    }\n    \n    if (filters.activity_status?.length) {\n      query = query.in('activity_status', filters.activity_status)\n    }\n    \n    if (filters.organization_status?.length) {\n      query = query.in('principal_status', filters.organization_status)\n    }\n    \n    if (filters.organization_type?.length) {\n      query = query.in('organization_type', filters.organization_type)\n    }\n    \n    if (filters.product_categories?.length) {\n      query = query.overlaps('product_categories', filters.product_categories)\n    }\n    \n    if (filters.has_opportunities !== null && filters.has_opportunities !== undefined) {\n      if (filters.has_opportunities) {\n        query = query.gt('total_opportunities', 0)\n      } else {\n        query = query.eq('total_opportunities', 0)\n      }\n    }\n    \n    if (filters.has_products !== null && filters.has_products !== undefined) {\n      if (filters.has_products) {\n        query = query.gt('product_count', 0)\n      } else {\n        query = query.eq('product_count', 0)\n      }\n    }\n    \n    if (filters.engagement_score_range) {\n      query = query\n        .gte('engagement_score', filters.engagement_score_range.min)\n        .lte('engagement_score', filters.engagement_score_range.max)\n    }\n    \n    if (filters.lead_score_range) {\n      query = query\n        .gte('lead_score', filters.lead_score_range.min)\n        .lte('lead_score', filters.lead_score_range.max)\n    }\n    \n    if (filters.is_principal !== null && filters.is_principal !== undefined) {\n      query = query.eq('is_principal', filters.is_principal)\n    }\n    \n    if (filters.is_distributor !== null && filters.is_distributor !== undefined) {\n      query = query.eq('is_distributor', filters.is_distributor)\n    }\n    \n    if (filters.created_after) {\n      query = query.gte('principal_created_at', filters.created_after)\n    }\n    \n    if (filters.created_before) {\n      query = query.lte('principal_created_at', filters.created_before)\n    }\n  }\n  \n  /**\n   * Get distributor relationships for a specific principal\n   */\n  private async getDistributorRelationshipsForPrincipal(\n    principalId: string\n  ): Promise<PrincipalDistributorRelationship[]> {\n    const response = await this.getDistributorRelationships([principalId])\n    return response.success ? response.data || [] : []\n  }\n  \n  /**\n   * Get product performance for a specific principal\n   */\n  private async getProductPerformanceForPrincipal(\n    principalId: string\n  ): Promise<PrincipalProductPerformance[]> {\n    const response = await this.getProductPerformance([principalId])\n    return response.success ? response.data || [] : []\n  }\n  \n  /**\n   * Get timeline entries for a specific principal\n   */\n  private async getTimelineEntriesForPrincipal(\n    principalId: string,\n    limit: number\n  ): Promise<PrincipalTimelineEntry[]> {\n    const response = await this.getPrincipalTimeline([principalId], limit)\n    return response.success ? response.data || [] : []\n  }\n  \n  /**\n   * Calculate analytics for a single principal\n   */\n  private async calculatePrincipalAnalytics(\n    principal: PrincipalActivitySummary\n  ): Promise<PrincipalAnalytics> {\n    const analytics = await this.calculateAnalytics([principal])\n    return analytics.success ? analytics.data! : {} as PrincipalAnalytics\n  }\n  \n  /**\n   * Calculate summary analytics from principal data\n   */\n  private calculateSummaryAnalytics(principals: PrincipalActivitySummary[]) {\n    return {\n      avg_engagement_score: this.calculateAverage(principals.map(p => p.engagement_score)),\n      total_opportunities: principals.reduce((sum, p) => sum + p.total_opportunities, 0),\n      total_interactions: principals.reduce((sum, p) => sum + p.total_interactions, 0),\n      // Add missing property that analytics summary expects\n      top_activity_status: this.getMostCommonActivityStatus(principals)\n    }\n  }\n\n  /**\n   * Get the most common activity status among principals\n   */\n  private getMostCommonActivityStatus(principals: PrincipalActivitySummary[]): 'NO_ACTIVITY' | 'STALE' | 'MODERATE' | 'ACTIVE' {\n    const statusCounts = this.calculateActivityStatusDistribution(principals)\n    const maxEntry = Object.entries(statusCounts).reduce((max, entry) => \n      entry[1] > max[1] ? entry : max\n    , ['NO_ACTIVITY', 0] as [string, number])\n    \n    return maxEntry[0] as 'NO_ACTIVITY' | 'STALE' | 'MODERATE' | 'ACTIVE'\n  }\n  \n  /**\n   * Calculate average of numeric array\n   */\n  private calculateAverage(values: number[]): number {\n    if (values.length === 0) return 0\n    return values.reduce((sum, val) => sum + val, 0) / values.length\n  }\n  \n  /**\n   * Calculate activity status distribution\n   */\n  private calculateActivityStatusDistribution(principals: PrincipalActivitySummary[]) {\n    return {\n      NO_ACTIVITY: principals.filter(p => p.activity_status === 'NO_ACTIVITY').length,\n      STALE: principals.filter(p => p.activity_status === 'STALE').length,\n      MODERATE: principals.filter(p => p.activity_status === 'MODERATE').length,\n      ACTIVE: principals.filter(p => p.activity_status === 'ACTIVE').length\n    }\n  }\n\n  /**\n   * Calculate product category distribution\n   */\n  private calculateProductCategoryDistribution(principals: PrincipalActivitySummary[]) {\n    const categoryCount: any = {}\n    \n    principals.forEach(principal => {\n      if (principal.product_categories && Array.isArray(principal.product_categories)) {\n        principal.product_categories.forEach(category => {\n          categoryCount[category] = (categoryCount[category] || 0) + 1\n        })\n      }\n    })\n    \n    return categoryCount\n  }\n\n  /**\n   * Calculate monthly activity trend\n   */\n  private async calculateMonthlyActivityTrend(principals: PrincipalActivitySummary[]) {\n    // Simplified implementation - in practice would query time-series data\n    const currentMonth = new Date().toISOString().slice(0, 7)\n    \n    return [{\n      month: currentMonth,\n      new_principals: principals.length,\n      active_principals: principals.filter(p => p.activity_status === 'ACTIVE').length,\n      opportunities_created: principals.reduce((sum, p) => sum + p.opportunities_last_30_days, 0),\n      interactions_count: principals.reduce((sum, p) => sum + p.interactions_last_30_days, 0)\n    }]\n  }\n\n  /**\n   * Calculate geographic distribution\n   */\n  private calculateGeographicDistribution(_principals: PrincipalActivitySummary[]) {\n    // Since the interface doesn't include geographic data, return empty array\n    return []\n  }\n  \n  /**\n   * Get top performing principals\n   */\n  private getTopPerformingPrincipals(\n    principals: PrincipalActivitySummary[],\n    limit: number\n  ) {\n    return principals\n      .sort((a, b) => b.engagement_score - a.engagement_score)\n      .slice(0, limit)\n      .map(p => ({\n        principal_id: p.principal_id,\n        principal_name: p.principal_name,\n        engagement_score: p.engagement_score,\n        total_opportunities: p.total_opportunities,\n        won_opportunities: p.won_opportunities,\n        total_revenue: 0 // Not available in current interface\n      }))\n  }\n  \n}\n\n/**\n * Extended API service with compatibility methods for Vue components\n */\nclass ExtendedPrincipalActivityApiService extends PrincipalActivityApiService {\n  \n  // ============================\n  // COMPATIBILITY METHODS FOR VUE COMPONENTS\n  // ============================\n  \n  /**\n   * Compatibility method for Vue components expecting getPrincipalActivitySummary\n   */\n  async getPrincipalActivitySummary(filters?: any) {\n    const response = await this.getPrincipalSummaries(filters || {})\n    return {\n      success: response.success,\n      data: response.data?.data || [],\n      error: response.error\n    }\n  }\n  \n  /**\n   * Compatibility method for Vue components expecting getEngagementScoreBreakdown\n   */\n  async getEngagementScoreBreakdown() {\n    // Mock engagement breakdown data for testing\n    return {\n      success: true,\n      data: [\n        { range: '0-20', label: 'Low', count: 0, percentage: 0 },\n        { range: '21-40', label: 'Below Average', count: 0, percentage: 0 },\n        { range: '41-60', label: 'Average', count: 0, percentage: 0 },\n        { range: '61-80', label: 'Above Average', count: 0, percentage: 0 },\n        { range: '81-100', label: 'High', count: 0, percentage: 0 }\n      ]\n    }\n  }\n  \n  /**\n   * Compatibility method for Vue components expecting getPrincipalStats\n   */\n  async getPrincipalStats() {\n    // Mock stats data for testing\n    return {\n      success: true,\n      data: {\n        followUpsRequired: 0,\n        activeThisWeek: 0,\n        topPerformers: 0\n      }\n    }\n  }\n  \n  /**\n   * Compatibility method for Vue components expecting searchPrincipalsWithActivity\n   */\n  async searchPrincipalsWithActivity(searchTerm: string, includeInactive: boolean = false) {\n    const filters: PrincipalFilters = {\n      search: searchTerm,\n      activity_status: includeInactive ? undefined : ['ACTIVE'] as PrincipalActivityStatus[]\n    }\n    \n    const response = await this.getPrincipalSummaries(filters)\n    return {\n      success: response.success,\n      data: response.data?.data || [],\n      error: response.error\n    }\n  }\n  \n  /**\n   * Compatibility method for Vue components expecting getPrincipalProductPerformance\n   */\n  async getPrincipalProductPerformance(principalId: string) {\n    const response = await this.getProductPerformance([principalId])\n    return {\n      success: response.success,\n      data: response.data || [],\n      error: response.error\n    }\n  }\n  \n  /**\n   * Compatibility method for Vue components expecting getPrincipalDistributorRelationships\n   */\n  async getPrincipalDistributorRelationships(principalIds: string[]) {\n    const response = await this.getDistributorRelationships(principalIds)\n    return {\n      success: response.success,\n      data: response.data || [],\n      error: response.error\n    }\n  }\n}\n\n/**\n * =============================================================================\n * DATA TRANSFORMATION UTILITIES\n * =============================================================================\n */\n\n/**\n * Transform raw API data to PrincipalProductPerformance interface\n */\nexport const transformProductPerformanceData = (rawData: any[]): PrincipalProductPerformance[] => {\n  return rawData.map(item => ({\n    principal_id: item.principal_id || '',\n    principal_name: item.principal_name || '',\n    product_id: item.product_id || '',\n    product_name: item.product_name || '',\n    product_category: item.product_category || null,\n    product_sku: item.product_sku || null,\n    is_primary_principal: item.is_primary_principal || false,\n    exclusive_rights: item.exclusive_rights || false,\n    wholesale_price: item.wholesale_price || null,\n    minimum_order_quantity: item.minimum_order_quantity || null,\n    lead_time_days: item.lead_time_days || null,\n    contract_start_date: item.contract_start_date || null,\n    contract_end_date: item.contract_end_date || null,\n    territory_restrictions: item.territory_restrictions || null,\n    opportunities_for_product: item.opportunities_for_product || 0,\n    won_opportunities_for_product: item.won_opportunities_for_product || 0,\n    active_opportunities_for_product: item.active_opportunities_for_product || 0,\n    latest_opportunity_date: item.latest_opportunity_date || null,\n    avg_opportunity_probability: item.avg_opportunity_probability || 0,\n    total_opportunities: item.total_opportunities || item.opportunities_for_product || 0,\n    win_rate: item.win_rate || 0,\n    total_value: item.total_value || 0,\n    interactions_for_product: item.interactions_for_product || 0,\n    recent_interactions_for_product: item.recent_interactions_for_product || 0,\n    last_interaction_date: item.last_interaction_date || null,\n    product_is_active: item.product_is_active ?? true,\n    launch_date: item.launch_date || null,\n    discontinue_date: item.discontinue_date || null,\n    unit_cost: item.unit_cost || null,\n    suggested_retail_price: item.suggested_retail_price || null,\n    contract_status: item.contract_status || 'ACTIVE',\n    product_performance_score: item.product_performance_score || 0,\n    relationship_created_at: item.relationship_created_at || null,\n    relationship_updated_at: item.relationship_updated_at || null\n  }))\n}\n\n/**\n * Transform raw API data to PrincipalDistributorRelationship interface\n */\nexport const transformDistributorRelationshipData = (rawData: any[]): PrincipalDistributorRelationship[] => {\n  return rawData.map(item => ({\n    principal_id: item.principal_id || '',\n    principal_name: item.principal_name || '',\n    principal_status: item.principal_status || null,\n    distributor_id: item.distributor_id || null,\n    distributor_name: item.organization_name || item.distributor_name || null,\n    distributor_status: item.distributor_status || null,\n    relationship_type: item.relationship_type === 'HAS_DISTRIBUTOR' ? 'HAS_DISTRIBUTOR' : 'DIRECT',\n    principal_city: item.principal_city || null,\n    principal_state: item.principal_state || null,\n    principal_country: item.principal_country || null,\n    distributor_city: item.distributor_city || null,\n    distributor_state: item.distributor_state || null,\n    distributor_country: item.distributor_country || null,\n    principal_lead_score: item.principal_lead_score || null,\n    distributor_lead_score: item.distributor_lead_score || null,\n    principal_created_at: item.principal_created_at || null,\n    principal_last_contact: item.principal_last_contact || null,\n    distributor_last_contact: item.distributor_last_contact || null\n  }))\n}\n\n/**\n * Transform raw API data to PrincipalActivitySummary interface\n */\nexport const transformActivitySummaryData = (rawData: any[]): PrincipalActivitySummary[] => {\n  return rawData.map(item => ({\n    principal_id: item.principal_id || '',\n    principal_name: item.principal_name || '',\n    principal_status: item.principal_status || null,\n    organization_type: item.organization_type || null,\n    industry: item.industry || null,\n    organization_size: item.organization_size || null,\n    is_active: item.is_active ?? true,\n    lead_score: item.lead_score || null,\n    contact_count: item.contact_count || 0,\n    active_contacts: item.active_contacts || 0,\n    primary_contact_name: item.primary_contact_name || null,\n    primary_contact_email: item.primary_contact_email || null,\n    last_contact_update: item.last_contact_update || null,\n    total_interactions: item.total_interactions || 0,\n    interactions_last_30_days: item.interactions_last_30_days || 0,\n    interactions_last_90_days: item.interactions_last_90_days || 0,\n    last_interaction_date: item.last_interaction_date || null,\n    last_interaction_type: item.last_interaction_type || null,\n    next_follow_up_date: item.next_follow_up_date || null,\n    avg_interaction_rating: item.avg_interaction_rating || 0,\n    positive_interactions: item.positive_interactions || 0,\n    follow_ups_required: item.follow_ups_required || 0,\n    total_opportunities: item.total_opportunities || 0,\n    active_opportunities: item.active_opportunities || 0,\n    won_opportunities: item.won_opportunities || 0,\n    opportunities_last_30_days: item.opportunities_last_30_days || 0,\n    latest_opportunity_stage: item.latest_opportunity_stage || null,\n    latest_opportunity_date: item.latest_opportunity_date || null,\n    avg_probability_percent: item.avg_probability_percent || 0,\n    highest_value_opportunity: item.highest_value_opportunity || null,\n    product_count: item.product_count || 0,\n    active_product_count: item.active_product_count || 0,\n    product_categories: item.product_categories || null,\n    primary_product_category: item.primary_product_category || null,\n    is_principal: item.is_principal ?? true,\n    is_distributor: item.is_distributor ?? false,\n    last_activity_date: item.last_activity_date || null,\n    activity_status: item.activity_status || 'NO_ACTIVITY',\n    engagement_score: item.engagement_score || 0,\n    principal_created_at: item.principal_created_at || null,\n    principal_updated_at: item.principal_updated_at || null,\n    summary_generated_at: item.summary_generated_at || new Date().toISOString()\n  }))\n}\n\n/**\n * Singleton instance of the extended Principal Activity API service\n */\nexport const principalActivityApi = new ExtendedPrincipalActivityApiService()\n\n/**\n * Re-export types for components that need them\n */\nexport type {\n  PrincipalActivitySummary,\n  PrincipalDistributorRelationship,\n  PrincipalProductPerformance,\n  PrincipalTimelineEntry,\n  PrincipalAnalytics,\n  PrincipalDashboardData,\n  PrincipalFilters,\n  PrincipalSortConfig,\n  PrincipalPagination,\n  PrincipalListResponse,\n  PrincipalSelectionItem\n} from '@/types/principal'\n\n/**\n * Default export for convenience\n */\nexport default principalActivityApi","<!--\n  Activity Status Badge - Visual indicator for principal activity levels\n  Features: Color-coded status, responsive sizing, accessibility\n-->\n<template>\n  <span \n    class=\"activity-status-badge inline-flex items-center font-medium rounded-full transition-colors duration-200\"\n    :class=\"[sizeClasses, colorClasses]\"\n  >\n    <span \n      class=\"mr-1 rounded-full\"\n      :class=\"dotClasses\"\n      :aria-hidden=\"true\"\n    ></span>\n    {{ statusLabel }}\n  </span>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\n// ===============================  \n// COMPONENT INTERFACE\n// ===============================\n\ninterface Props {\n  status: 'ACTIVE' | 'MODERATE' | 'LOW' | 'NO_ACTIVITY'\n  size?: 'xs' | 'sm' | 'md' | 'lg'\n  showLabel?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  size: 'sm',\n  showLabel: true\n})\n\n// ===============================\n// COMPUTED PROPERTIES\n// ===============================\n\nconst statusConfig = computed(() => {\n  const configs = {\n    ACTIVE: {\n      label: 'Active',\n      colorClasses: 'bg-green-100 text-green-800 border border-green-200',\n      dotClasses: 'bg-green-400'\n    },\n    MODERATE: {\n      label: 'Moderate',\n      colorClasses: 'bg-yellow-100 text-yellow-800 border border-yellow-200',\n      dotClasses: 'bg-yellow-400'\n    },\n    LOW: {\n      label: 'Low',\n      colorClasses: 'bg-orange-100 text-orange-800 border border-orange-200',\n      dotClasses: 'bg-orange-400'\n    },\n    NO_ACTIVITY: {\n      label: 'Inactive',\n      colorClasses: 'bg-gray-100 text-gray-800 border border-gray-200',\n      dotClasses: 'bg-gray-400'\n    }\n  }\n  return configs[props.status] || configs.NO_ACTIVITY\n})\n\nconst sizeClasses = computed(() => {\n  const sizeMap = {\n    xs: 'px-2 py-0.5 text-xs',\n    sm: 'px-2 py-1 text-xs',\n    md: 'px-3 py-1 text-sm',\n    lg: 'px-3 py-1.5 text-sm'\n  }\n  return sizeMap[props.size]\n})\n\nconst dotClasses = computed(() => {\n  const sizeMap = {\n    xs: 'h-1.5 w-1.5',\n    sm: 'h-2 w-2',\n    md: 'h-2.5 w-2.5',\n    lg: 'h-3 w-3'\n  }\n  return `${sizeMap[props.size]} ${statusConfig.value.dotClasses}`\n})\n\nconst colorClasses = computed(() => statusConfig.value.colorClasses)\n\nconst statusLabel = computed(() => {\n  if (!props.showLabel) return ''\n  return statusConfig.value.label\n})\n</script>\n\n<style scoped>\n.activity-status-badge {\n  /* Custom styles for activity status badge */\n}\n\n/* Pulse animation for active status */\n.activity-status-badge:has(.bg-green-400) {\n  position: relative;\n}\n\n.activity-status-badge:has(.bg-green-400)::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 0.5rem;\n  transform: translateY(-50%);\n  width: 0.5rem;\n  height: 0.5rem;\n  background-color: rgb(74, 222, 128);\n  border-radius: 50%;\n  animation: pulse-dot 2s infinite;\n}\n\n@keyframes pulse-dot {\n  0%, 100% {\n    opacity: 1;\n    transform: translateY(-50%) scale(1);\n  }\n  50% {\n    opacity: 0.5;\n    transform: translateY(-50%) scale(1.2);\n  }\n}\n\n/* Accessibility improvements */\n.activity-status-badge:focus {\n  outline: 2px solid #3b82f6;\n  outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .activity-status-badge {\n    border-width: 2px;\n    font-weight: 600;\n  }\n}\n</style>","<!--\n  Engagement Score Ring - Circular progress indicator for engagement scores\n  Features: Animated progress, color-coded scores, multiple sizes\n-->\n<template>\n  <div \n    class=\"engagement-score-ring relative inline-flex items-center justify-center\"\n    :class=\"containerClasses\"\n  >\n    <!-- SVG Ring -->\n    <svg \n      class=\"transform -rotate-90 transition-all duration-300\"\n      :class=\"svgClasses\"\n      :width=\"diameter\"\n      :height=\"diameter\"\n    >\n      <!-- Background circle -->\n      <circle\n        :cx=\"center\"\n        :cy=\"center\"\n        :r=\"radius\"\n        stroke=\"currentColor\"\n        :stroke-width=\"strokeWidth\"\n        fill=\"none\"\n        class=\"text-gray-200\"\n      />\n      \n      <!-- Progress circle -->\n      <circle\n        :cx=\"center\"\n        :cy=\"center\"\n        :r=\"radius\"\n        stroke=\"currentColor\"\n        :stroke-width=\"strokeWidth\"\n        fill=\"none\"\n        :stroke-dasharray=\"circumference\"\n        :stroke-dashoffset=\"strokeDashoffset\"\n        :class=\"progressColorClass\"\n        stroke-linecap=\"round\"\n        class=\"transition-all duration-500 ease-out\"\n      />\n    </svg>\n    \n    <!-- Score Display -->\n    <div class=\"absolute inset-0 flex items-center justify-center\">\n      <div class=\"text-center\">\n        <span \n          class=\"font-bold tabular-nums\"\n          :class=\"[textSizeClass, scoreColorClass]\"\n        >\n          {{ displayScore }}\n        </span>\n        <div \n          v-if=\"showLabel && size !== 'xs' && size !== 'sm'\"\n          class=\"text-xs text-gray-500 font-medium\"\n        >\n          {{ scoreLabel }}\n        </div>\n      </div>\n    </div>\n    \n    <!-- Hover tooltip -->\n    <div \n      v-if=\"showTooltip\"\n      class=\"absolute z-10 px-2 py-1 text-xs font-medium text-white bg-gray-900 rounded-md shadow-lg opacity-0 pointer-events-none transition-opacity duration-200 -top-8 left-1/2 transform -translate-x-1/2 group-hover:opacity-100\"\n    >\n      {{ tooltipText }}\n      <div class=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900\"></div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\n// ===============================\n// COMPONENT INTERFACE\n// ===============================\n\ninterface Props {\n  score: number\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'\n  showLabel?: boolean\n  showTooltip?: boolean\n  animated?: boolean\n  maxScore?: number\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  size: 'md',\n  showLabel: true,\n  showTooltip: false,\n  animated: true,\n  maxScore: 100\n})\n\n// ===============================\n// COMPUTED PROPERTIES\n// ===============================\n\nconst sizeConfig = computed(() => {\n  const configs = {\n    xs: {\n      diameter: 32,\n      strokeWidth: 3,\n      textClass: 'text-xs'\n    },\n    sm: {\n      diameter: 40,\n      strokeWidth: 3,\n      textClass: 'text-sm'\n    },\n    md: {\n      diameter: 56,\n      strokeWidth: 4,\n      textClass: 'text-base'\n    },\n    lg: {\n      diameter: 80,\n      strokeWidth: 5,\n      textClass: 'text-lg'\n    },\n    xl: {\n      diameter: 120,\n      strokeWidth: 6,\n      textClass: 'text-2xl'\n    }\n  }\n  return configs[props.size]\n})\n\nconst diameter = computed(() => sizeConfig.value.diameter)\nconst center = computed(() => diameter.value / 2)\nconst radius = computed(() => center.value - sizeConfig.value.strokeWidth / 2)\nconst strokeWidth = computed(() => sizeConfig.value.strokeWidth)\n\nconst circumference = computed(() => 2 * Math.PI * radius.value)\n\nconst strokeDashoffset = computed(() => {\n  const percentage = Math.min(Math.max(props.score, 0), props.maxScore) / props.maxScore\n  return circumference.value - percentage * circumference.value\n})\n\nconst containerClasses = computed(() => {\n  return [\n    props.showTooltip ? 'group cursor-help' : '',\n    'relative'\n  ].filter(Boolean).join(' ')\n})\n\nconst svgClasses = computed(() => {\n  const classes = []\n  \n  if (props.animated) {\n    classes.push('transition-transform duration-300 hover:scale-105')\n  }\n  \n  return classes.join(' ')\n})\n\nconst progressColorClass = computed(() => {\n  const score = props.score\n  \n  if (score >= 80) return 'text-green-500'\n  if (score >= 60) return 'text-blue-500'  \n  if (score >= 40) return 'text-yellow-500'\n  if (score >= 20) return 'text-orange-500'\n  return 'text-red-500'\n})\n\nconst scoreColorClass = computed(() => {\n  const score = props.score\n  \n  if (score >= 80) return 'text-green-600'\n  if (score >= 60) return 'text-blue-600'\n  if (score >= 40) return 'text-yellow-600'  \n  if (score >= 20) return 'text-orange-600'\n  return 'text-red-600'\n})\n\nconst textSizeClass = computed(() => sizeConfig.value.textClass)\n\nconst displayScore = computed(() => {\n  return Math.round(props.score).toString()\n})\n\nconst scoreLabel = computed(() => {\n  const score = props.score\n  \n  if (score >= 90) return 'Excellent'\n  if (score >= 80) return 'Very Good'\n  if (score >= 70) return 'Good'\n  if (score >= 60) return 'Above Avg'\n  if (score >= 50) return 'Average'\n  if (score >= 40) return 'Below Avg'\n  if (score >= 30) return 'Poor'\n  if (score >= 20) return 'Very Poor'\n  return 'Critical'\n})\n\nconst tooltipText = computed(() => {\n  return `Engagement Score: ${props.score}/${props.maxScore} (${scoreLabel.value})`\n})\n</script>\n\n<style scoped>\n.engagement-score-ring {\n  /* Custom styles for engagement score ring */\n}\n\n/* Animation for score changes */\n@keyframes score-pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n}\n\n.engagement-score-ring.score-changed {\n  animation: score-pulse 0.6s ease-in-out;\n}\n\n/* Glow effect for high scores */\n.engagement-score-ring:has(.text-green-500) {\n  filter: drop-shadow(0 0 8px rgba(34, 197, 94, 0.3));\n}\n\n/* Accessibility improvements */\n.engagement-score-ring:focus {\n  outline: 2px solid #3b82f6;\n  outline-offset: 2px;\n  border-radius: 50%;\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  .engagement-score-ring svg,\n  .engagement-score-ring circle {\n    transition: none !important;\n    animation: none !important;\n  }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .engagement-score-ring svg circle {\n    stroke-width: calc(var(--stroke-width) + 1px);\n  }\n  \n  .engagement-score-ring .text-gray-200 {\n    stroke: #666;\n  }\n}\n\n/* Print styles */\n@media print {\n  .engagement-score-ring {\n    -webkit-print-color-adjust: exact;\n    print-color-adjust: exact;\n  }\n}\n</style>"],"names":["render","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","PERFORMANCE_CONFIG","queryCache","PrincipalActivityApiService","operation","params","paramString","cacheKey","cached","data","ttl","pattern","key","queryFn","startTime","result","duration","error","filters","sort","pagination","page","limit","offset","query","supabase","count","totalCount","totalPages","hasNext","hasPrevious","paginationInfo","validData","item","analyticsData","response","p","principalId","summaryData","summaryError","distributorRelationships","productPerformance","timelineEntries","analytics","dashboardData","sum","principalIds","mockRelationships","filteredRelationships","rel","mockPerformance","filteredPerformance","perf","timeline","row","principals","organizationId","options","principal","updates","_a","_b","_c","_d","statusCounts","max","entry","values","val","categoryCount","category","_principals","a","b","ExtendedPrincipalActivityApiService","searchTerm","includeInactive","principalActivityApi","props","__props","statusConfig","computed","configs","sizeClasses","dotClasses","colorClasses","statusLabel","_normalizeClass","_createTextVNode","sizeConfig","diameter","center","radius","strokeWidth","circumference","strokeDashoffset","percentage","containerClasses","svgClasses","classes","progressColorClass","score","scoreColorClass","textSizeClass","displayScore","scoreLabel","tooltipText","_hoisted_4","_hoisted_5","showLabel","size","_hoisted_6","_toDisplayString","showTooltip","_hoisted_7"],"mappings":"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","x_google_ignoreList":[0]}
{"version":3,"file":"contacts-B0X_eGT6.js","sources":["../../src/services/contactsApi.ts","../../src/types/contacts.ts"],"sourcesContent":["/**\n * Contacts API Service\n * Centralized Supabase operations for contact management\n * Supports both authenticated and demo modes\n */\n\nimport { supabase } from '@/config/supabaseClient'\nimport type { Contact, ContactInsert, ContactUpdate } from '@/types/database.types'\n\n/**\n * API Response wrapper for consistent error handling\n */\nexport interface ApiResponse<T> {\n  data: T | null\n  error: string | null\n  success: boolean\n}\n\n/**\n * Search and pagination options\n */\nexport interface ContactSearchOptions {\n  search?: string\n  limit?: number\n  offset?: number\n  sortBy?: 'first_name' | 'last_name' | 'organization' | 'email' | 'created_at'\n  sortOrder?: 'asc' | 'desc'\n}\n\n/**\n * Contact statistics for analytics\n */\nexport interface ContactStats {\n  total: number\n  recentlyAdded: number // Last 30 days\n  organizations: number\n}\n\nclass ContactsApiService {\n  private isDemoMode: boolean = false\n\n  constructor() {\n    // Check if we're in demo mode (invalid Supabase config)\n    this.isDemoMode = this.checkDemoMode()\n  }\n\n  private checkDemoMode(): boolean {\n    const url = import.meta.env.VITE_SUPABASE_URL\n    const key = import.meta.env.VITE_SUPABASE_ANON_KEY\n    return !url || !key || url === 'your-supabase-project-url' || key === 'your-supabase-anon-key'\n  }\n\n  /**\n   * Get all contacts with optional search and pagination\n   */\n  async getContacts(options: ContactSearchOptions = {}): Promise<ApiResponse<Contact[]>> {\n    if (this.isDemoMode) {\n      return this.getMockContacts(options)\n    }\n\n    try {\n      let query = supabase\n        .from('contacts')\n        .select('*')\n\n      // Apply search filter\n      if (options.search) {\n        query = query.or(`first_name.ilike.%${options.search}%,last_name.ilike.%${options.search}%,organization.ilike.%${options.search}%,email.ilike.%${options.search}%`)\n      }\n\n      // Apply sorting\n      const sortBy = options.sortBy || 'last_name'\n      const sortOrder = options.sortOrder || 'asc'\n      query = query.order(sortBy, { ascending: sortOrder === 'asc' })\n\n      // Apply pagination\n      if (options.limit) {\n        query = query.limit(options.limit)\n      }\n      if (options.offset) {\n        query = query.range(options.offset, (options.offset + (options.limit || 50)) - 1)\n      }\n\n      const { data, error } = await query\n\n      if (error) {\n        console.error('Error fetching contacts:', error)\n        return {\n          data: null,\n          error: `Failed to fetch contacts: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data: data || [],\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error fetching contacts:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while fetching contacts',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Get a single contact by ID\n   */\n  async getContact(id: string): Promise<ApiResponse<Contact>> {\n    if (this.isDemoMode) {\n      return this.getMockContact(id)\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .select('*')\n        .eq('id', id)\n        .single()\n\n      if (error) {\n        console.error('Error fetching contact:', error)\n        return {\n          data: null,\n          error: `Failed to fetch contact: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error fetching contact:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while fetching the contact',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Create a new contact\n   */\n  async createContact(contact: ContactInsert): Promise<ApiResponse<Contact>> {\n    if (this.isDemoMode) {\n      return this.createMockContact(contact)\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .insert(contact)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error creating contact:', error)\n        return {\n          data: null,\n          error: `Failed to create contact: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error creating contact:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while creating the contact',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Update an existing contact\n   */\n  async updateContact(id: string, updates: ContactUpdate): Promise<ApiResponse<Contact>> {\n    if (this.isDemoMode) {\n      return this.updateMockContact(id, updates)\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error updating contact:', error)\n        return {\n          data: null,\n          error: `Failed to update contact: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error updating contact:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while updating the contact',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Delete a contact\n   */\n  async deleteContact(id: string): Promise<ApiResponse<boolean>> {\n    if (this.isDemoMode) {\n      return this.deleteMockContact(id)\n    }\n\n    try {\n      const { error } = await supabase\n        .from('contacts')\n        .delete()\n        .eq('id', id)\n\n      if (error) {\n        console.error('Error deleting contact:', error)\n        return {\n          data: null,\n          error: `Failed to delete contact: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data: true,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Unexpected error deleting contact:', error)\n      return {\n        data: null,\n        error: 'An unexpected error occurred while deleting the contact',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Get contact statistics\n   */\n  async getContactStats(): Promise<ApiResponse<ContactStats>> {\n    if (this.isDemoMode) {\n      return this.getMockStats()\n    }\n\n    try {\n      // Get total count\n      const { count: total, error: countError } = await supabase\n        .from('contacts')\n        .select('*', { count: 'exact', head: true })\n\n      if (countError) {\n        throw countError\n      }\n\n      // Get recently added (last 30 days)\n      const thirtyDaysAgo = new Date()\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)\n      \n      const { count: recentlyAdded, error: recentError } = await supabase\n        .from('contacts')\n        .select('*', { count: 'exact', head: true })\n        .gte('created_at', thirtyDaysAgo.toISOString())\n\n      if (recentError) {\n        throw recentError\n      }\n\n      // Get unique organizations count\n      const { data: orgData, error: orgError } = await supabase\n        .from('contacts')\n        .select('organization')\n        .not('organization', 'is', null)\n\n      if (orgError) {\n        throw orgError\n      }\n\n      const uniqueOrganizations = new Set(orgData?.map(item => item.organization)).size\n\n      const stats: ContactStats = {\n        total: total || 0,\n        recentlyAdded: recentlyAdded || 0,\n        organizations: uniqueOrganizations\n      }\n\n      return {\n        data: stats,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Error fetching contact stats:', error)\n      return {\n        data: null,\n        error: 'Failed to fetch contact statistics',\n        success: false\n      }\n    }\n  }\n\n  // Demo mode mock implementations\n  private async getMockContacts(options: ContactSearchOptions): Promise<ApiResponse<Contact[]>> {\n    const mockContacts: Contact[] = [\n      {\n        id: 'mock-1',\n        first_name: 'John',\n        last_name: 'Doe',\n        organization: 'Tech Corp',\n        email: 'john.doe@techcorp.com',\n        title: 'Software Engineer',\n        phone: '+1-555-0123',\n        notes: 'Met at tech conference 2024',\n        created_at: '2024-01-15T10:00:00Z',\n        updated_at: '2024-01-15T10:00:00Z'\n      },\n      {\n        id: 'mock-2',\n        first_name: 'Jane',\n        last_name: 'Smith',\n        organization: 'Design Studio',\n        email: 'jane.smith@designstudio.com',\n        title: 'UX Designer',\n        phone: '+1-555-0124',\n        notes: 'Portfolio review scheduled',\n        created_at: '2024-01-20T14:30:00Z',\n        updated_at: '2024-01-20T14:30:00Z'\n      },\n      {\n        id: 'mock-3',\n        first_name: 'Bob',\n        last_name: 'Johnson',\n        organization: 'Marketing Agency',\n        email: 'bob.johnson@marketing.com',\n        title: 'Marketing Manager',\n        phone: null,\n        notes: null,\n        created_at: '2024-02-01T09:15:00Z',\n        updated_at: '2024-02-01T09:15:00Z'\n      }\n    ]\n\n    // Apply search filter\n    let filteredContacts = mockContacts\n    if (options.search) {\n      const searchLower = options.search.toLowerCase()\n      filteredContacts = mockContacts.filter(contact =>\n        contact.first_name.toLowerCase().includes(searchLower) ||\n        contact.last_name.toLowerCase().includes(searchLower) ||\n        contact.organization.toLowerCase().includes(searchLower) ||\n        contact.email.toLowerCase().includes(searchLower)\n      )\n    }\n\n    // Apply sorting\n    const sortBy = options.sortBy || 'last_name'\n    const sortOrder = options.sortOrder || 'asc'\n    filteredContacts.sort((a, b) => {\n      const aVal = a[sortBy] || ''\n      const bVal = b[sortBy] || ''\n      const comparison = aVal.localeCompare(bVal)\n      return sortOrder === 'asc' ? comparison : -comparison\n    })\n\n    // Apply pagination\n    if (options.offset || options.limit) {\n      const start = options.offset || 0\n      const end = start + (options.limit || filteredContacts.length)\n      filteredContacts = filteredContacts.slice(start, end)\n    }\n\n    return {\n      data: filteredContacts,\n      error: null,\n      success: true\n    }\n  }\n\n  private async getMockContact(id: string): Promise<ApiResponse<Contact>> {\n    const mockContacts = await this.getMockContacts({})\n    const contact = mockContacts.data?.find(c => c.id === id)\n    \n    if (!contact) {\n      return {\n        data: null,\n        error: 'Contact not found',\n        success: false\n      }\n    }\n\n    return {\n      data: contact,\n      error: null,\n      success: true\n    }\n  }\n\n  private async createMockContact(contact: ContactInsert): Promise<ApiResponse<Contact>> {\n    const newContact: Contact = {\n      id: `mock-${Date.now()}`,\n      first_name: contact.first_name,\n      last_name: contact.last_name,\n      organization: contact.organization,\n      email: contact.email,\n      title: contact.title || null,\n      phone: contact.phone || null,\n      notes: contact.notes || null,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }\n\n    return {\n      data: newContact,\n      error: null,\n      success: true\n    }\n  }\n\n  private async updateMockContact(id: string, updates: ContactUpdate): Promise<ApiResponse<Contact>> {\n    const existing = await this.getMockContact(id)\n    if (!existing.success || !existing.data) {\n      return existing\n    }\n\n    const updatedContact: Contact = {\n      ...existing.data,\n      ...updates,\n      updated_at: new Date().toISOString()\n    }\n\n    return {\n      data: updatedContact,\n      error: null,\n      success: true\n    }\n  }\n\n  private async deleteMockContact(_id: string): Promise<ApiResponse<boolean>> {\n    // In demo mode, we can't actually delete, but we simulate success\n    return {\n      data: true,\n      error: null,\n      success: true\n    }\n  }\n\n  private async getMockStats(): Promise<ApiResponse<ContactStats>> {\n    return {\n      data: {\n        total: 3,\n        recentlyAdded: 2,\n        organizations: 3\n      },\n      error: null,\n      success: true\n    }\n  }\n}\n\n// Export singleton instance\nexport const contactsApi = new ContactsApiService()\n\n// Export class for testing\nexport { ContactsApiService }","/**\n * Contact validation schemas and form types\n * Uses Yup for schema validation with TypeScript inference\n */\n\nimport * as yup from 'yup'\nimport type { Contact, ContactInsert, ContactUpdate } from './database.types'\n\n/**\n * Email validation regex (RFC 5322 compliant)\n */\nconst EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n\n/**\n * Phone validation regex (international formats)\n */\nconst PHONE_REGEX = /^[+]?[1-9][\\d]{0,15}$|^[+]?[()]?[\\d\\s\\-()]{10,20}$/\n\n/**\n * Contact creation validation schema\n */\nexport const contactCreateSchema = yup.object({\n  first_name: yup\n    .string()\n    .required('First name is required')\n    .min(1, 'First name cannot be empty')\n    .max(255, 'First name must be less than 255 characters')\n    .trim(),\n  \n  last_name: yup\n    .string()\n    .required('Last name is required')\n    .min(1, 'Last name cannot be empty')\n    .max(255, 'Last name must be less than 255 characters')\n    .trim(),\n  \n  organization: yup\n    .string()\n    .required('Organization is required')\n    .min(1, 'Organization cannot be empty')\n    .max(255, 'Organization must be less than 255 characters')\n    .trim(),\n  \n  email: yup\n    .string()\n    .required('Email is required')\n    .matches(EMAIL_REGEX, 'Please enter a valid email address')\n    .max(255, 'Email must be less than 255 characters')\n    .trim()\n    .lowercase(),\n  \n  title: yup\n    .string()\n    .nullable()\n    .max(255, 'Title must be less than 255 characters')\n    .trim()\n    .transform((value) => value === '' ? null : value),\n  \n  phone: yup\n    .string()\n    .nullable()\n    .max(50, 'Phone number must be less than 50 characters')\n    .matches(PHONE_REGEX, 'Please enter a valid phone number')\n    .trim()\n    .transform((value) => value === '' ? null : value),\n  \n  notes: yup\n    .string()\n    .nullable()\n    .max(5000, 'Notes must be less than 5000 characters')\n    .trim()\n    .transform((value) => value === '' ? null : value)\n})\n\n/**\n * Contact update validation schema (all fields optional except those being updated)\n */\nexport const contactUpdateSchema = yup.object({\n  first_name: yup\n    .string()\n    .min(1, 'First name cannot be empty')\n    .max(255, 'First name must be less than 255 characters')\n    .trim(),\n  \n  last_name: yup\n    .string()\n    .min(1, 'Last name cannot be empty')\n    .max(255, 'Last name must be less than 255 characters')\n    .trim(),\n  \n  organization: yup\n    .string()\n    .min(1, 'Organization cannot be empty')\n    .max(255, 'Organization must be less than 255 characters')\n    .trim(),\n  \n  email: yup\n    .string()\n    .matches(EMAIL_REGEX, 'Please enter a valid email address')\n    .max(255, 'Email must be less than 255 characters')\n    .trim()\n    .lowercase(),\n  \n  title: yup\n    .string()\n    .nullable()\n    .max(255, 'Title must be less than 255 characters')\n    .trim()\n    .transform((value) => value === '' ? null : value),\n  \n  phone: yup\n    .string()\n    .nullable()\n    .max(50, 'Phone number must be less than 50 characters')\n    .matches(PHONE_REGEX, 'Please enter a valid phone number')\n    .trim()\n    .transform((value) => value === '' ? null : value),\n  \n  notes: yup\n    .string()\n    .nullable()\n    .max(5000, 'Notes must be less than 5000 characters')\n    .trim()\n    .transform((value) => value === '' ? null : value)\n})\n\n/**\n * Search validation schema\n */\nexport const contactSearchSchema = yup.object({\n  search: yup\n    .string()\n    .max(255, 'Search term must be less than 255 characters')\n    .trim(),\n  \n  limit: yup\n    .number()\n    .positive('Limit must be positive')\n    .max(100, 'Limit cannot exceed 100')\n    .integer('Limit must be an integer'),\n  \n  offset: yup\n    .number()\n    .min(0, 'Offset cannot be negative')\n    .integer('Offset must be an integer'),\n  \n  sortBy: yup\n    .string()\n    .oneOf(['first_name', 'last_name', 'organization', 'email', 'created_at'], 'Invalid sort field'),\n  \n  sortOrder: yup\n    .string()\n    .oneOf(['asc', 'desc'], 'Sort order must be asc or desc')\n})\n\n/**\n * TypeScript types inferred from Yup schemas\n */\nexport type ContactCreateForm = yup.InferType<typeof contactCreateSchema>\nexport type ContactUpdateForm = yup.InferType<typeof contactUpdateSchema>\nexport type ContactSearchForm = yup.InferType<typeof contactSearchSchema>\n\n/**\n * Form validation helper types\n */\nexport interface ValidationError {\n  field: string\n  message: string\n}\n\nexport interface FormValidationResult<T> {\n  isValid: boolean\n  data?: T\n  errors: ValidationError[]\n}\n\n/**\n * Validation utility functions\n */\nexport class ContactValidator {\n  /**\n   * Validate contact creation form\n   */\n  static async validateCreate(data: unknown): Promise<FormValidationResult<ContactCreateForm>> {\n    try {\n      const validData = await contactCreateSchema.validate(data, { abortEarly: false })\n      return {\n        isValid: true,\n        data: validData,\n        errors: []\n      }\n    } catch (error) {\n      if (error instanceof yup.ValidationError) {\n        return {\n          isValid: false,\n          errors: error.inner.map(err => ({\n            field: err.path || 'unknown',\n            message: err.message\n          }))\n        }\n      }\n      \n      return {\n        isValid: false,\n        errors: [{ field: 'general', message: 'Validation failed' }]\n      }\n    }\n  }\n\n  /**\n   * Validate contact update form\n   */\n  static async validateUpdate(data: unknown): Promise<FormValidationResult<ContactUpdateForm>> {\n    try {\n      const validData = await contactUpdateSchema.validate(data, { abortEarly: false })\n      return {\n        isValid: true,\n        data: validData,\n        errors: []\n      }\n    } catch (error) {\n      if (error instanceof yup.ValidationError) {\n        return {\n          isValid: false,\n          errors: error.inner.map(err => ({\n            field: err.path || 'unknown',\n            message: err.message\n          }))\n        }\n      }\n      \n      return {\n        isValid: false,\n        errors: [{ field: 'general', message: 'Validation failed' }]\n      }\n    }\n  }\n\n  /**\n   * Validate search parameters\n   */\n  static async validateSearch(data: unknown): Promise<FormValidationResult<ContactSearchForm>> {\n    try {\n      const validData = await contactSearchSchema.validate(data, { abortEarly: false })\n      return {\n        isValid: true,\n        data: validData,\n        errors: []\n      }\n    } catch (error) {\n      if (error instanceof yup.ValidationError) {\n        return {\n          isValid: false,\n          errors: error.inner.map(err => ({\n            field: err.path || 'unknown',\n            message: err.message\n          }))\n        }\n      }\n      \n      return {\n        isValid: false,\n        errors: [{ field: 'general', message: 'Validation failed' }]\n      }\n    }\n  }\n\n  /**\n   * Clean form data by removing empty strings and trimming\n   */\n  static cleanFormData(data: Record<string, any>): Record<string, any> {\n    const cleaned: Record<string, any> = {}\n    \n    Object.entries(data).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        const trimmed = value.trim()\n        cleaned[key] = trimmed === '' ? null : trimmed\n      } else {\n        cleaned[key] = value\n      }\n    })\n    \n    return cleaned\n  }\n\n  /**\n   * Convert ContactCreateForm to ContactInsert\n   */\n  static formToInsert(form: ContactCreateForm): ContactInsert {\n    return {\n      first_name: form.first_name,\n      last_name: form.last_name,\n      organization: form.organization,\n      email: form.email,\n      title: form.title,\n      phone: form.phone,\n      notes: form.notes\n    }\n  }\n\n  /**\n   * Convert ContactUpdateForm to ContactUpdate\n   */\n  static formToUpdate(form: ContactUpdateForm): ContactUpdate {\n    const update: ContactUpdate = {}\n    \n    if (form.first_name !== undefined) update.first_name = form.first_name\n    if (form.last_name !== undefined) update.last_name = form.last_name\n    if (form.organization !== undefined) update.organization = form.organization\n    if (form.email !== undefined) update.email = form.email\n    if (form.title !== undefined) update.title = form.title\n    if (form.phone !== undefined) update.phone = form.phone\n    if (form.notes !== undefined) update.notes = form.notes\n    \n    return update\n  }\n\n  /**\n   * Convert Contact to form data\n   */\n  static contactToForm(contact: Contact): ContactCreateForm {\n    return {\n      first_name: contact.first_name,\n      last_name: contact.last_name,\n      organization: contact.organization,\n      email: contact.email,\n      title: contact.title,\n      phone: contact.phone,\n      notes: contact.notes\n    }\n  }\n}\n\n/**\n * Field validation helpers for real-time validation\n */\nexport const fieldValidators = {\n  /**\n   * Validate email field\n   */\n  email: (value: string): string | null => {\n    if (!value.trim()) return 'Email is required'\n    if (!EMAIL_REGEX.test(value)) return 'Please enter a valid email address'\n    if (value.length > 255) return 'Email must be less than 255 characters'\n    return null\n  },\n\n  /**\n   * Validate required text field\n   */\n  requiredText: (value: string, fieldName: string, maxLength = 255): string | null => {\n    if (!value.trim()) return `${fieldName} is required`\n    if (value.length > maxLength) return `${fieldName} must be less than ${maxLength} characters`\n    return null\n  },\n\n  /**\n   * Validate optional text field\n   */\n  optionalText: (value: string, fieldName: string, maxLength = 255): string | null => {\n    if (value && value.length > maxLength) return `${fieldName} must be less than ${maxLength} characters`\n    return null\n  },\n\n  /**\n   * Validate phone field\n   */\n  phone: (value: string): string | null => {\n    if (value && !PHONE_REGEX.test(value)) return 'Please enter a valid phone number'\n    if (value && value.length > 50) return 'Phone number must be less than 50 characters'\n    return null\n  }\n}\n\n/**\n * Contact display utilities\n */\nexport const contactUtils = {\n  /**\n   * Get full name\n   */\n  getFullName: (contact: Contact): string => {\n    return `${contact.first_name} ${contact.last_name}`.trim()\n  },\n\n  /**\n   * Get display name with organization\n   */\n  getDisplayName: (contact: Contact): string => {\n    const fullName = contactUtils.getFullName(contact)\n    return contact.organization ? `${fullName} (${contact.organization})` : fullName\n  },\n\n  /**\n   * Format phone number for display\n   */\n  formatPhone: (phone: string | null): string => {\n    if (!phone) return 'No phone'\n    \n    // Basic formatting for US phone numbers\n    const cleaned = phone.replace(/\\D/g, '')\n    if (cleaned.length === 10) {\n      return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`\n    }\n    if (cleaned.length === 11 && cleaned[0] === '1') {\n      return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`\n    }\n    \n    return phone\n  },\n\n  /**\n   * Get initials for avatar\n   */\n  getInitials: (contact: Contact): string => {\n    const first = contact.first_name.charAt(0).toUpperCase()\n    const last = contact.last_name.charAt(0).toUpperCase()\n    return `${first}${last}`\n  },\n\n  /**\n   * Format creation date\n   */\n  formatCreatedDate: (contact: Contact): string => {\n    if (!contact.created_at) return 'Unknown'\n    \n    const date = new Date(contact.created_at)\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n}"],"names":["ContactsApiService","__publicField","options","query","supabase","sortBy","sortOrder","data","error","id","contact","updates","total","countError","thirtyDaysAgo","recentlyAdded","recentError","orgData","orgError","uniqueOrganizations","item","mockContacts","filteredContacts","searchLower","a","b","aVal","bVal","comparison","start","end","_a","c","existing","_id","contactsApi","EMAIL_REGEX","PHONE_REGEX","contactCreateSchema","yup.object","yup.string","value","contactUpdateSchema","contactSearchSchema","yup.number","ContactValidator","yup.ValidationError","err","cleaned","key","trimmed","form","update","contactUtils","fullName","phone","first","last"],"mappings":"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"}
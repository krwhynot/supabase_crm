{"version":3,"file":"opportunityStore-MF-7Z0oO.js","sources":["../../src/types/opportunities.ts","../../src/services/opportunityNaming.ts","../../src/services/opportunitiesApi.ts","../../src/stores/opportunityStore.ts"],"sourcesContent":["import * as yup from 'yup'\n\n/**\n * Opportunity Stage Enum - 7-stage sales pipeline\n */\nexport enum OpportunityStage {\n  NEW_LEAD = 'New Lead',\n  INITIAL_OUTREACH = 'Initial Outreach', \n  SAMPLE_VISIT_OFFERED = 'Sample/Visit Offered',\n  AWAITING_RESPONSE = 'Awaiting Response',\n  FEEDBACK_LOGGED = 'Feedback Logged',\n  DEMO_SCHEDULED = 'Demo Scheduled',\n  CLOSED_WON = 'Closed - Won'\n}\n\n/**\n * Opportunity Context Enum - Types of opportunities\n */\nexport enum OpportunityContext {\n  SITE_VISIT = 'Site Visit',\n  FOOD_SHOW = 'Food Show',\n  NEW_PRODUCT_INTEREST = 'New Product Interest',\n  FOLLOW_UP = 'Follow-up',\n  DEMO_REQUEST = 'Demo Request',\n  SAMPLING = 'Sampling',\n  CUSTOM = 'Custom'\n}\n\n/**\n * Base Opportunity interface matching database schema\n */\nexport interface Opportunity {\n  id: string\n  name: string\n  organization_id: string\n  stage: OpportunityStage\n  product_id: string | null\n  context: OpportunityContext | null\n  probability_percent: number | null\n  expected_close_date: string | null\n  deal_owner: string | null\n  notes: string | null\n  is_won: boolean\n  auto_generated_name: boolean\n  name_template: string | null\n  created_at: string\n  updated_at: string\n  created_by: string | null\n  deleted_at: string | null\n}\n\n/**\n * Opportunity insert interface for creating new opportunities\n */\nexport interface OpportunityInsert {\n  name: string\n  organization_id: string\n  stage: OpportunityStage\n  product_id?: string | null\n  context?: OpportunityContext | null\n  probability_percent?: number | null\n  expected_close_date?: string | null\n  deal_owner?: string | null\n  notes?: string | null\n  auto_generated_name?: boolean\n  name_template?: string | null\n  created_by?: string | null\n}\n\n/**\n * Opportunity update interface for editing opportunities\n */\nexport interface OpportunityUpdate {\n  name?: string\n  stage?: OpportunityStage\n  product_id?: string | null\n  context?: OpportunityContext | null\n  probability_percent?: number | null\n  expected_close_date?: string | null\n  deal_owner?: string | null\n  notes?: string | null\n  auto_generated_name?: boolean\n  name_template?: string | null\n}\n\n/**\n * Enhanced opportunity with related data for list views\n */\nexport interface OpportunityListView {\n  id: string\n  name: string\n  stage: OpportunityStage\n  probability_percent: number | null\n  expected_close_date: string | null\n  deal_owner: string | null\n  is_won: boolean\n  created_at: string\n  updated_at: string\n  notes: string | null // Added missing notes property\n  \n  // Related organization data\n  organization_name: string\n  organization_type: string\n  \n  // Related principal data\n  principal_name: string | null\n  principal_id: string | null\n  \n  // Related product data\n  product_name: string | null\n  product_category: string | null\n  \n  // Calculated fields\n  days_since_created: number\n  days_to_close: number | null\n  stage_duration_days: number\n}\n\n/**\n * Comprehensive opportunity with all related data for detail views\n */\nexport interface OpportunityDetailView extends OpportunityListView {\n  organization_id: string\n  product_id: string | null\n  context: OpportunityContext | null\n  notes: string | null\n  auto_generated_name: boolean\n  name_template: string | null\n  created_by: string | null\n  deleted_at: string | null\n  \n  // Full organization details\n  organization_address: string | null\n  organization_phone: string | null\n  organization_email: string | null\n  \n  // Principal organization details\n  principal_address: string | null\n  principal_phone: string | null\n  principal_email: string | null\n  \n  // Product details\n  product_description: string | null\n  product_category: string | null\n  product_unit_price: number | null\n  \n  // Activity indicators\n  has_recent_interactions: boolean\n  last_interaction_date: string | null\n  total_interactions: number\n}\n\n/**\n * Form data interface for opportunity creation/editing\n */\nexport interface OpportunityFormData {\n  name: string\n  organization_id: string\n  stage: OpportunityStage\n  principal_ids: string[]  // Multiple principals for batch creation\n  product_id: string\n  context: OpportunityContext | null\n  probability_percent: number | null\n  expected_close_date: string | null\n  deal_owner: string | null\n  notes: string | null\n  auto_generate_name: boolean\n  name_template: string | null\n}\n\n/**\n * Auto-naming preview interface\n */\nexport interface OpportunityNamePreview {\n  principal_id: string\n  principal_name: string\n  generated_name: string\n  name_template: string\n}\n\n/**\n * Batch creation result interface\n */\nexport interface BatchCreationResult {\n  success: boolean\n  created_opportunities: Opportunity[]\n  failed_creations: {\n    principal_id: string\n    principal_name: string\n    error: string\n  }[]\n  total_created: number\n  total_failed: number\n}\n\n/**\n * Opportunity KPI interface for dashboard metrics\n */\nexport interface OpportunityKPIs {\n  total_opportunities: number\n  active_opportunities: number\n  won_opportunities: number\n  average_probability: number\n  total_pipeline_value: number\n  won_this_month: number\n  conversion_rate: number\n  average_days_to_close: number\n  win_rate: number\n  time_to_close_avg?: number\n  \n  // Stage distribution\n  stage_distribution: {\n    [K in OpportunityStage]: number\n  }\n  \n  // Recent activity\n  created_this_week: number\n  updated_this_week: number\n  closed_this_week: number\n}\n\n/**\n * Search and filter parameters\n */\nexport interface OpportunityFilters {\n  search?: string\n  stage?: OpportunityStage[]\n  organization_id?: string\n  principal_id?: string\n  product_id?: string\n  deal_owner?: string\n  probability_min?: number\n  probability_max?: number\n  created_after?: string\n  created_before?: string\n  expected_close_after?: string\n  expected_close_before?: string\n  is_won?: boolean\n  context?: OpportunityContext[]\n}\n\n/**\n * Pagination parameters\n */\nexport interface OpportunityPagination {\n  page: number\n  limit: number\n  sort_by: string\n  sort_order: 'asc' | 'desc'\n}\n\n/**\n * API response interface\n */\nexport interface OpportunityListResponse {\n  opportunities: OpportunityListView[]\n  total_count: number\n  page: number\n  limit: number\n  has_next: boolean\n  has_previous: boolean\n}\n\n/**\n * Yup validation schema for opportunity forms\n */\nexport const opportunityValidationSchema = yup.object({\n  name: yup\n    .string()\n    .required('Opportunity name is required')\n    .min(3, 'Name must be at least 3 characters')\n    .max(255, 'Name must be less than 255 characters'),\n    \n  organization_id: yup\n    .string()\n    .required('Organization is required')\n    .uuid('Invalid organization ID'),\n    \n  stage: yup\n    .string()\n    .required('Stage is required')\n    .oneOf(Object.values(OpportunityStage), 'Invalid stage selected'),\n    \n  principal_ids: yup\n    .array(yup.string().uuid('Invalid principal ID'))\n    .min(1, 'At least one principal must be selected')\n    .required('Principal selection is required'),\n    \n  product_id: yup\n    .string()\n    .uuid('Invalid product ID')\n    .required('Product selection is required'),\n    \n  context: yup\n    .string()\n    .oneOf([...Object.values(OpportunityContext), ''], 'Invalid context selected')\n    .nullable(),\n    \n  probability_percent: yup\n    .number()\n    .min(0, 'Probability cannot be negative')\n    .max(100, 'Probability cannot exceed 100%')\n    .nullable(),\n    \n  expected_close_date: yup\n    .string()\n    .nullable()\n    .test('future-date', 'Close date should be in the future', function(value) {\n      if (!value) return true\n      const closeDate = new Date(value)\n      const today = new Date()\n      today.setHours(0, 0, 0, 0)\n      return closeDate >= today\n    }),\n    \n  deal_owner: yup\n    .string()\n    .max(100, 'Deal owner name must be less than 100 characters')\n    .nullable(),\n    \n  notes: yup\n    .string()\n    .max(2000, 'Notes must be less than 2000 characters')\n    .nullable(),\n    \n  auto_generate_name: yup\n    .boolean()\n    .default(true),\n    \n  name_template: yup\n    .string()\n    .max(500, 'Name template must be less than 500 characters')\n    .nullable()\n})\n\n/**\n * Type inference from validation schema\n */\nexport type OpportunityFormValidation = yup.InferType<typeof opportunityValidationSchema>\n\n/**\n * Stage progression mapping for business logic\n */\nexport const STAGE_PROGRESSION: { [K in OpportunityStage]: OpportunityStage[] } = {\n  [OpportunityStage.NEW_LEAD]: [OpportunityStage.INITIAL_OUTREACH],\n  [OpportunityStage.INITIAL_OUTREACH]: [OpportunityStage.SAMPLE_VISIT_OFFERED, OpportunityStage.AWAITING_RESPONSE],\n  [OpportunityStage.SAMPLE_VISIT_OFFERED]: [OpportunityStage.AWAITING_RESPONSE],\n  [OpportunityStage.AWAITING_RESPONSE]: [OpportunityStage.FEEDBACK_LOGGED, OpportunityStage.INITIAL_OUTREACH],\n  [OpportunityStage.FEEDBACK_LOGGED]: [OpportunityStage.DEMO_SCHEDULED, OpportunityStage.CLOSED_WON],\n  [OpportunityStage.DEMO_SCHEDULED]: [OpportunityStage.CLOSED_WON, OpportunityStage.FEEDBACK_LOGGED],\n  [OpportunityStage.CLOSED_WON]: []\n}\n\n/**\n * Default probability percentages by stage\n */\nexport const STAGE_DEFAULT_PROBABILITY: { [K in OpportunityStage]: number } = {\n  [OpportunityStage.NEW_LEAD]: 10,\n  [OpportunityStage.INITIAL_OUTREACH]: 20,\n  [OpportunityStage.SAMPLE_VISIT_OFFERED]: 35,\n  [OpportunityStage.AWAITING_RESPONSE]: 40,\n  [OpportunityStage.FEEDBACK_LOGGED]: 60,\n  [OpportunityStage.DEMO_SCHEDULED]: 80,\n  [OpportunityStage.CLOSED_WON]: 100\n}\n\n/**\n * Stage color coding for UI components\n */\nexport const STAGE_COLORS: { [K in OpportunityStage]: string } = {\n  [OpportunityStage.NEW_LEAD]: 'gray',\n  [OpportunityStage.INITIAL_OUTREACH]: 'blue',\n  [OpportunityStage.SAMPLE_VISIT_OFFERED]: 'yellow',\n  [OpportunityStage.AWAITING_RESPONSE]: 'orange',\n  [OpportunityStage.FEEDBACK_LOGGED]: 'purple',\n  [OpportunityStage.DEMO_SCHEDULED]: 'green',\n  [OpportunityStage.CLOSED_WON]: 'emerald'\n}","/**\n * Opportunity Naming Service\n * Auto-generates opportunity names following the pattern:\n * [Organization] - [Principal] - [Context] - [Month Year]\n */\n\nimport type { \n  OpportunityNamePreview, \n  OpportunityContext \n} from '@/types/opportunities'\nimport type { ApiResponse } from './contactsApi'\n\n/**\n * Name generation options\n */\nexport interface NameGenerationOptions {\n  organization_name: string\n  principal_name: string\n  context?: OpportunityContext | null\n  date?: Date\n  custom_context?: string\n}\n\n/**\n * Batch name preview request\n */\nexport interface BatchNamePreviewRequest {\n  organization_name: string\n  principal_data: Array<{\n    id: string\n    name: string\n  }>\n  context?: OpportunityContext | null\n  custom_context?: string\n  date?: Date\n}\n\n/**\n * Name template variables\n */\nexport interface NameTemplateVariables {\n  organization: string\n  principal: string\n  context: string\n  month: string\n  year: string\n  date: string\n}\n\nclass OpportunityNamingService {\n\n  /**\n   * Generate a single opportunity name\n   */\n  generateOpportunityName(options: NameGenerationOptions): string {\n    const {\n      organization_name,\n      principal_name,\n      context,\n      date = new Date(),\n      custom_context\n    } = options\n\n    // Clean organization and principal names\n    const orgName = this.cleanName(organization_name)\n    const principalName = this.cleanName(principal_name)\n    \n    // Get context string\n    const contextStr = this.getContextString(context, custom_context)\n    \n    // Get formatted date\n    const dateStr = this.formatDate(date)\n    \n    // Build name following pattern\n    const parts = [orgName, principalName, contextStr, dateStr].filter(Boolean)\n    return parts.join(' - ')\n  }\n\n  /**\n   * Generate name previews for multiple principals\n   */\n  generateBatchNamePreviews(request: BatchNamePreviewRequest): OpportunityNamePreview[] {\n    const {\n      organization_name,\n      principal_data,\n      context,\n      custom_context,\n      date = new Date()\n    } = request\n\n    return principal_data.map(principal => {\n      const generatedName = this.generateOpportunityName({\n        organization_name,\n        principal_name: principal.name,\n        context,\n        custom_context,\n        date\n      })\n\n      const nameTemplate = this.generateNameTemplate({\n        organization_name,\n        principal_name: principal.name,\n        context,\n        custom_context,\n        date\n      })\n\n      return {\n        principal_id: principal.id,\n        principal_name: principal.name,\n        generated_name: generatedName,\n        name_template: nameTemplate\n      }\n    })\n  }\n\n  /**\n   * Generate a name template for auto-generation tracking\n   */\n  generateNameTemplate(options: NameGenerationOptions): string {\n    const {\n      context,\n      custom_context\n    } = options\n\n    const variables: NameTemplateVariables = {\n      organization: '{{organization}}',\n      principal: '{{principal}}',\n      context: this.getContextString(context, custom_context) || '{{context}}',\n      month: '{{month}}',\n      year: '{{year}}',\n      date: '{{date}}'\n    }\n\n    // Build template following pattern\n    const parts = [\n      variables.organization,\n      variables.principal,\n      variables.context,\n      `${variables.month} ${variables.year}`\n    ].filter(part => part !== '{{context}}' || context || custom_context)\n\n    return parts.join(' - ')\n  }\n\n  /**\n   * Validate if a name follows the auto-generated pattern\n   */\n  isAutoGeneratedName(name: string, nameTemplate: string | null): boolean {\n    if (!nameTemplate) return false\n\n    // Escape regex special characters first, then replace placeholders\n    let regexPattern = nameTemplate\n      .replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&') // Escape special regex chars\n      \n    // Now replace escaped placeholders with regex groups\n    regexPattern = regexPattern\n      .replace(/\\\\\\{\\\\\\{organization\\\\\\}\\\\\\}/g, '([^-]+?)') // Non-greedy match\n      .replace(/\\\\\\{\\\\\\{principal\\\\\\}\\\\\\}/g, '([^-]+?)')\n      .replace(/\\\\\\{\\\\\\{context\\\\\\}\\\\\\}/g, '([^-]+?)')\n      .replace(/\\\\\\{\\\\\\{month\\\\\\}\\\\\\}/g, '([A-Za-z]+)')\n      .replace(/\\\\\\{\\\\\\{year\\\\\\}\\\\\\}/g, '(\\\\d{4})')\n      .replace(/\\\\\\{\\\\\\{date\\\\\\}\\\\\\}/g, '([A-Za-z]+ \\\\d{4})')\n      \n    // Replace the escaped spaces and dashes to allow flexible whitespace\n    regexPattern = regexPattern\n      .replace(/\\\\\\s\\*/g, '\\\\s*') // Allow flexible whitespace\n      .replace(/\\\\-/g, '\\\\s*-\\\\s*') // Allow spaces around dashes\n\n    const regex = new RegExp(`^${regexPattern}$`)\n    return regex.test(name.trim())\n  }\n\n  /**\n   * Extract components from an auto-generated name\n   */\n  parseAutoGeneratedName(name: string, nameTemplate: string): NameTemplateVariables | null {\n    try {\n      if (!this.isAutoGeneratedName(name, nameTemplate)) {\n        return null\n      }\n\n      // Split the name into parts\n      const parts = name.split(' - ').map(part => part.trim())\n      \n      if (parts.length < 3) return null\n\n      // Check if template includes context placeholder {{context}}\n      const hasContextPlaceholder = nameTemplate.includes('{{context}}')\n      \n      let organization = ''\n      let principal = ''\n      let context = ''\n      let dateStr = ''\n      \n      if (hasContextPlaceholder) {\n        // Format: Org - Principal - Context - Date\n        if (parts.length < 4) return null\n        organization = parts[0] || ''\n        principal = parts[1] || ''\n        context = parts[2] || ''\n        dateStr = parts[3] || ''\n      } else {\n        // Check if template has hardcoded context by counting template parts\n        const templateParts = nameTemplate.split(' - ')\n        \n        if (templateParts.length === 4 && parts.length === 4) {\n          // Format: Org - Principal - HardcodedContext - Date\n          organization = parts[0] || ''\n          principal = parts[1] || ''\n          context = parts[2] || '' // This is the hardcoded context value\n          dateStr = parts[3] || ''\n        } else {\n          // Format: Org - Principal - Date (no context)\n          if (parts.length < 3) return null\n          organization = parts[0] || ''\n          principal = parts[1] || ''\n          context = '' // No context\n          dateStr = parts[2] || ''\n        }\n      }\n      \n      // Extract month and year from date string\n      const dateParts = dateStr.split(' ')\n      const month = dateParts[0] || ''\n      const year = dateParts[1] || ''\n\n      return {\n        organization,\n        principal,\n        context,\n        month,\n        year,\n        date: dateStr\n      }\n    } catch (error) {\n      console.error('Error parsing auto-generated name:', error)\n      return null\n    }\n  }\n\n  /**\n   * Update name for new context or date\n   */\n  updateAutoGeneratedName(\n    currentName: string,\n    nameTemplate: string,\n    updates: Partial<NameGenerationOptions>\n  ): string {\n    const parsed = this.parseAutoGeneratedName(currentName, nameTemplate)\n    if (!parsed) {\n      // If can't parse, generate new name\n      return this.generateOpportunityName(updates as NameGenerationOptions)\n    }\n\n    // Apply updates to parsed components\n    const updatedOptions: NameGenerationOptions = {\n      organization_name: updates.organization_name || parsed.organization,\n      principal_name: updates.principal_name || parsed.principal,\n      context: updates.context,\n      custom_context: updates.custom_context || (updates.context ? undefined : parsed.context),\n      date: updates.date || new Date()\n    }\n\n    return this.generateOpportunityName(updatedOptions)\n  }\n\n  /**\n   * Check if name is unique (stub for future database integration)\n   */\n  async isNameUnique(_name: string, _excludeId?: string): Promise<ApiResponse<boolean>> {\n    // TODO: Implement actual uniqueness check against database\n    // For now, return true as placeholder\n    return {\n      data: true,\n      error: null,\n      success: true\n    }\n  }\n\n  /**\n   * Generate unique name by appending counter if needed\n   */\n  async generateUniqueName(baseOptions: NameGenerationOptions): Promise<ApiResponse<string>> {\n    try {\n      const baseName = this.generateOpportunityName(baseOptions)\n      let finalName = baseName\n      let counter = 1\n\n      // Check uniqueness and append counter if needed\n      while (!(await this.isNameUnique(finalName)).data) {\n        finalName = `${baseName} (${counter})`\n        counter++\n        \n        // Prevent infinite loop\n        if (counter > 100) {\n          throw new Error('Could not generate unique name after 100 attempts')\n        }\n      }\n\n      return {\n        data: finalName,\n        error: null,\n        success: true\n      }\n    } catch (error) {\n      console.error('Error generating unique name:', error)\n      return {\n        data: null,\n        error: error instanceof Error ? error.message : 'Failed to generate unique opportunity name',\n        success: false\n      }\n    }\n  }\n\n  /**\n   * Clean name by removing extra spaces and special characters\n   */\n  private cleanName(name: string): string {\n    return name\n      .trim()\n      .replace(/\\s+/g, ' ')  // Replace multiple spaces with single space\n      .replace(/[^\\w\\s&.\\-\\u00C0-\\u017F]/g, '')  // Remove special chars except &, ., -, and unicode chars\n      .trim()\n  }\n\n  /**\n   * Get context string from enum or custom value\n   */\n  private getContextString(\n    context?: OpportunityContext | null, \n    customContext?: string\n  ): string {\n    if (customContext?.trim()) {\n      return this.cleanName(customContext)\n    }\n    \n    if (context) {\n      return context\n    }\n    \n    return ''  // No context\n  }\n\n  /**\n   * Format date as \"Month Year\" (e.g., \"January 2024\")\n   */\n  private formatDate(date: Date): string {\n    const monthNames = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ]\n    \n    const month = monthNames[date.getMonth()]\n    const year = date.getFullYear()\n    \n    return `${month} ${year}`\n  }\n\n}\n\n// Export singleton instance\nexport const opportunityNaming = new OpportunityNamingService()\n\n// Export class for testing\nexport { OpportunityNamingService }\n\n// Export utility functions for direct use\nexport const generateOpportunityName = (options: NameGenerationOptions): string => {\n  return opportunityNaming.generateOpportunityName(options)\n}\n\nexport const generateBatchNamePreviews = (request: BatchNamePreviewRequest): OpportunityNamePreview[] => {\n  return opportunityNaming.generateBatchNamePreviews(request)\n}","/**\n * Opportunities API Service\n * Centralized Supabase operations for opportunity management\n * Includes batch creation, pipeline management, and KPI calculations\n */\n\nimport { supabase } from '@/config/supabaseClient'\nimport type { \n  Opportunity,\n  OpportunityInsert,\n  OpportunityUpdate,\n  OpportunityListView,\n  OpportunityDetailView,\n  OpportunityFormData,\n  OpportunityNamePreview,\n  BatchCreationResult,\n  OpportunityKPIs,\n  OpportunityFilters,\n  OpportunityPagination,\n  OpportunityListResponse,\n  OpportunityStage,\n  OpportunityContext\n} from '@/types/opportunities'\nimport { STAGE_DEFAULT_PROBABILITY } from '@/types/opportunities'\nimport { generateBatchNamePreviews } from './opportunityNaming'\n\n/**\n * API Response wrapper for consistent error handling\n */\nexport interface ApiResponse<T> {\n  data: T | null\n  error: string | null\n  success: boolean\n}\n\n/**\n * Search and pagination options\n */\nexport interface OpportunitySearchOptions {\n  search?: string\n  limit?: number\n  offset?: number\n  sortBy?: 'name' | 'stage' | 'probability_percent' | 'expected_close_date' | 'created_at'\n  sortOrder?: 'asc' | 'desc'\n  stage?: OpportunityStage\n  organization_id?: string\n  principal_id?: string\n  deal_owner?: string\n  is_won?: boolean\n}\n\nclass OpportunitiesApiService {\n\n  /**\n   * Get all opportunities with optional search, filtering, and pagination\n   */\n  async getOpportunities(options: OpportunitySearchOptions = {}): Promise<ApiResponse<OpportunityListView[]>> {\n    try {\n      // Get opportunities from the main table with related data\n      let query = supabase\n        .from('opportunities')\n        .select(`\n          *,\n          organizations:organization_id(name, type),\n          products:product_id(name, category)\n        `)\n\n      // Apply search filter\n      if (options.search) {\n        query = query.ilike('name', `%${options.search}%`)\n      }\n\n      // Apply filters\n      if (options.stage) {\n        query = query.eq('stage', options.stage)\n      }\n      if (options.organization_id) {\n        query = query.eq('organization_id', options.organization_id)  \n      }\n      if (options.deal_owner) {\n        query = query.eq('deal_owner', options.deal_owner)\n      }\n      if (options.is_won !== undefined) {\n        query = query.eq('is_won', options.is_won)\n      }\n\n      // Apply sorting\n      const sortBy = options.sortBy || 'created_at'\n      const sortOrder = options.sortOrder || 'desc'\n      query = query.order(sortBy, { ascending: sortOrder === 'asc' })\n\n      // Apply pagination\n      if (options.limit) {\n        query = query.limit(options.limit)\n      }\n      if (options.offset) {\n        query = query.range(options.offset, options.offset + (options.limit || 10) - 1)\n      }\n\n      const { data, error } = await query\n\n      if (error) {\n        console.error('Error fetching opportunities:', error)\n        return { data: null, error: error.message, success: false }\n      }\n\n      // Transform database result to match OpportunityListView interface\n      const opportunities: OpportunityListView[] = (data || []).map(row => {\n        const createdDate = new Date(row.created_at || new Date())\n        const now = new Date()\n        const daysSinceCreated = Math.floor((now.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24))\n        \n        let daysToClose = null\n        if (row.expected_close_date) {\n          const closeDate = new Date(row.expected_close_date)\n          daysToClose = Math.floor((closeDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))\n        }\n\n        return {\n          id: row.id,\n          name: row.name,\n          stage: row.stage as OpportunityStage,\n          probability_percent: row.probability_percent || 0,\n          expected_close_date: row.expected_close_date,\n          deal_owner: row.deal_owner,\n          is_won: row.is_won || false,\n          created_at: row.created_at || new Date().toISOString(),\n          updated_at: row.updated_at || new Date().toISOString(),\n          notes: row.notes || null,\n          organization_name: (row.organizations as any)?.name || '',\n          organization_type: (row.organizations as any)?.type || '',\n          principal_name: null, // Will be populated when junction table is implemented\n          principal_id: null,\n          product_name: (row.products as any)?.name || null,\n          product_category: (row.products as any)?.category || null,\n          days_since_created: daysSinceCreated,\n          days_to_close: daysToClose,\n          stage_duration_days: daysSinceCreated // Simplified for now\n        }\n      })\n\n      return { data: opportunities, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in getOpportunities:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Get opportunities with advanced filtering and pagination\n   */\n  async getOpportunitiesWithFilters(\n    filters: OpportunityFilters, \n    pagination: OpportunityPagination\n  ): Promise<ApiResponse<OpportunityListResponse>> {\n    try {\n      let query = supabase\n        .from('opportunities')\n        .select(`\n          *,\n          organizations:organization_id(name, type),\n          products:product_id(name, category)\n        `, { count: 'exact' })\n\n      // Apply filters\n      if (filters.search) {\n        query = query.ilike('name', `%${filters.search}%`)\n      }\n      if (filters.stage && filters.stage.length > 0) {\n        query = query.in('stage', filters.stage)\n      }\n      if (filters.organization_id) {\n        query = query.eq('organization_id', filters.organization_id)\n      }\n      if (filters.product_id) {\n        query = query.eq('product_id', filters.product_id)\n      }\n      if (filters.deal_owner) {\n        query = query.eq('deal_owner', filters.deal_owner)\n      }\n      if (filters.probability_min !== undefined) {\n        query = query.gte('probability_percent', filters.probability_min)\n      }\n      if (filters.probability_max !== undefined) {\n        query = query.lte('probability_percent', filters.probability_max)\n      }\n      if (filters.is_won !== undefined) {\n        query = query.eq('is_won', filters.is_won)\n      }\n\n      // Apply sorting and pagination\n      query = query\n        .order(pagination.sort_by, { ascending: pagination.sort_order === 'asc' })\n        .range(\n          (pagination.page - 1) * pagination.limit,\n          pagination.page * pagination.limit - 1\n        )\n\n      const { data, error, count } = await query\n\n      if (error) {\n        console.error('Error fetching filtered opportunities:', error)\n        return { data: null, error: error.message, success: false }\n      }\n\n      // Transform data\n      const opportunities: OpportunityListView[] = (data || []).map(row => {\n        const createdDate = new Date(row.created_at || new Date())\n        const now = new Date()\n        const daysSinceCreated = Math.floor((now.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24))\n        \n        let daysToClose = null\n        if (row.expected_close_date) {\n          const closeDate = new Date(row.expected_close_date)\n          daysToClose = Math.floor((closeDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))\n        }\n\n        return {\n          id: row.id,\n          name: row.name,\n          stage: row.stage as OpportunityStage,\n          probability_percent: row.probability_percent || 0,\n          expected_close_date: row.expected_close_date,\n          deal_owner: row.deal_owner,\n          is_won: row.is_won || false,\n          created_at: row.created_at || new Date().toISOString(),\n          updated_at: row.updated_at || new Date().toISOString(),\n          notes: row.notes || null,\n          organization_name: (row.organizations as any)?.name || '',\n          organization_type: (row.organizations as any)?.type || '',\n          principal_name: null,\n          principal_id: null,\n          product_name: (row.products as any)?.name || null,\n          product_category: (row.products as any)?.category || null,\n          days_since_created: daysSinceCreated,\n          days_to_close: daysToClose,\n          stage_duration_days: daysSinceCreated\n        }\n      })\n\n      const totalCount = count || 0\n      const response: OpportunityListResponse = {\n        opportunities,\n        total_count: totalCount,\n        page: pagination.page,\n        limit: pagination.limit,\n        has_next: pagination.page * pagination.limit < totalCount,\n        has_previous: pagination.page > 1\n      }\n\n      return { data: response, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in getOpportunitiesWithFilters:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Get a single opportunity by ID with detailed information\n   */\n  async getOpportunityById(id: string): Promise<ApiResponse<OpportunityDetailView>> {\n    try {\n      const { data, error } = await supabase\n        .from('opportunities')\n        .select(`\n          *,\n          organizations:organization_id(name, type, address, phone, email),\n          products:product_id(name, description, category, suggested_retail_price)\n        `)\n        .eq('id', id)\n        .single()\n\n      if (error) {\n        console.error('Error fetching opportunity:', error)\n        return { data: null, error: error.message, success: false }\n      }\n\n      if (!data) {\n        return { data: null, error: 'Opportunity not found', success: false }\n      }\n\n      // Transform to OpportunityDetailView\n      const createdDate = new Date(data.created_at || new Date())\n      const now = new Date()\n      const daysSinceCreated = Math.floor((now.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24))\n      \n      let daysToClose = null\n      if (data.expected_close_date) {\n        const closeDate = new Date(data.expected_close_date)\n        daysToClose = Math.floor((closeDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))\n      }\n\n      const opportunity: OpportunityDetailView = {\n        id: data.id,\n        name: data.name,\n        organization_id: data.organization_id,\n        stage: data.stage as OpportunityStage,\n        product_id: data.product_id,\n        context: data.context as OpportunityContext | null,\n        probability_percent: data.probability_percent || 0,\n        expected_close_date: data.expected_close_date,\n        deal_owner: data.deal_owner,\n        notes: data.notes,\n        is_won: data.is_won || false,\n        auto_generated_name: data.auto_generated_name || false,\n        name_template: data.name_template,\n        created_at: data.created_at || new Date().toISOString(),\n        updated_at: data.updated_at || new Date().toISOString(),\n        created_by: data.created_by,\n        deleted_at: data.deleted_at,\n        \n        // Organization data\n        organization_name: (data.organizations as any)?.name || '',\n        organization_type: (data.organizations as any)?.type || '',\n        organization_address: (data.organizations as any)?.address || null,\n        organization_phone: (data.organizations as any)?.phone || null,\n        organization_email: (data.organizations as any)?.email || null,\n        \n        // Principal data (placeholder)\n        principal_name: null,\n        principal_id: null,\n        principal_address: null,\n        principal_phone: null,\n        principal_email: null,\n        \n        // Product data\n        product_name: (data.products as any)?.name || null,\n        product_description: (data.products as any)?.description || null,\n        product_category: (data.products as any)?.category || null,\n        product_unit_price: (data.products as any)?.suggested_retail_price || null,\n        \n        // Calculated fields\n        days_since_created: daysSinceCreated,\n        days_to_close: daysToClose,\n        stage_duration_days: daysSinceCreated,\n        \n        // Activity indicators (placeholder)\n        has_recent_interactions: false,\n        last_interaction_date: null,\n        total_interactions: 0\n      }\n\n      return { data: opportunity, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in getOpportunityById:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Create a single opportunity\n   */\n  async createOpportunity(opportunity: OpportunityInsert): Promise<ApiResponse<Opportunity>> {\n    try {\n      // Clean the opportunity data to match database schema\n      const cleanedOpportunity = {\n        ...opportunity,\n        probability_percent: opportunity.probability_percent ?? undefined\n      }\n\n      const { data, error } = await supabase\n        .from('opportunities')\n        .insert(cleanedOpportunity)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error creating opportunity:', error)\n        return { data: null, error: error.message, success: false }\n      }\n\n      return { data: data as Opportunity, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in createOpportunity:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Create multiple opportunities for different principals (batch creation)\n   */\n  async createBatchOpportunities(formData: OpportunityFormData): Promise<ApiResponse<BatchCreationResult>> {\n    try {\n      // Get organization name for name generation\n      const { data: orgData } = await supabase\n        .from('organizations')\n        .select('name')\n        .eq('id', formData.organization_id)\n        .single()\n\n      const organizationName = orgData?.name || 'Unknown Organization'\n\n      // Get principal names for name generation  \n      const { data: principalData } = await supabase\n        .from('organizations')\n        .select('id, name')\n        .in('id', formData.principal_ids)\n\n      const principalDataFormatted = (principalData || []).map(p => ({\n        id: p.id,\n        name: p.name\n      }))\n\n      // Generate name previews for all principals\n      const namePreviews = await generateBatchNamePreviews({\n        organization_name: organizationName,\n        principal_data: principalDataFormatted,\n        context: formData.context,\n        custom_context: formData.name_template || undefined\n      })\n\n      const createdOpportunities: Opportunity[] = []\n      const failedCreations: { principal_id: string; principal_name: string; error: string }[] = []\n\n      // Create opportunities for each principal\n      for (const preview of namePreviews) {\n        try {\n          const opportunityData: OpportunityInsert = {\n            name: formData.auto_generate_name ? preview.generated_name : formData.name,\n            organization_id: formData.organization_id,\n            stage: formData.stage,\n            product_id: formData.product_id || null,\n            context: formData.context,\n            probability_percent: formData.probability_percent || null,\n            expected_close_date: formData.expected_close_date,\n            deal_owner: formData.deal_owner,\n            notes: formData.notes,\n            auto_generated_name: formData.auto_generate_name,\n            name_template: formData.auto_generate_name ? preview.name_template : null\n          }\n\n          const result = await this.createOpportunity(opportunityData)\n          \n          if (result.success && result.data) {\n            createdOpportunities.push(result.data)\n            \n            // TODO: Create opportunity_principal relationship\n            // This will be implemented when the junction table is set up\n            \n          } else {\n            failedCreations.push({\n              principal_id: preview.principal_id,\n              principal_name: preview.principal_name,\n              error: result.error || 'Unknown error'\n            })\n          }\n        } catch (error) {\n          failedCreations.push({\n            principal_id: preview.principal_id,\n            principal_name: preview.principal_name,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }\n      }\n\n      const batchResult: BatchCreationResult = {\n        success: createdOpportunities.length > 0,\n        created_opportunities: createdOpportunities,\n        failed_creations: failedCreations,\n        total_created: createdOpportunities.length,\n        total_failed: failedCreations.length\n      }\n\n      return { data: batchResult, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in createBatchOpportunities:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Generate name previews for batch creation\n   */\n  async generateNamePreviews(formData: OpportunityFormData): Promise<ApiResponse<OpportunityNamePreview[]>> {\n    try {\n      // Get organization name for name generation\n      const { data: orgData } = await supabase\n        .from('organizations')\n        .select('name')\n        .eq('id', formData.organization_id)\n        .single()\n\n      const organizationName = orgData?.name || 'Unknown Organization'\n\n      // Get principal names for name generation  \n      const { data: principalData } = await supabase\n        .from('organizations')\n        .select('id, name')\n        .in('id', formData.principal_ids)\n\n      const principalDataFormatted = (principalData || []).map(p => ({\n        id: p.id,\n        name: p.name\n      }))\n\n      const previews = await generateBatchNamePreviews({\n        organization_name: organizationName,\n        principal_data: principalDataFormatted,\n        context: formData.context,\n        custom_context: formData.name_template || undefined\n      })\n\n      return { data: previews, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in generateNamePreviews:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Update an existing opportunity\n   */\n  async updateOpportunity(id: string, updates: OpportunityUpdate): Promise<ApiResponse<Opportunity>> {\n    try {\n      // Clean the updates data to match database schema\n      const cleanedUpdates = {\n        ...updates,\n        probability_percent: updates.probability_percent ?? undefined\n      }\n\n      const { data, error } = await supabase\n        .from('opportunities')\n        .update(cleanedUpdates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error updating opportunity:', error)\n        return { data: null, error: error.message, success: false }\n      }\n\n      return { data: data as Opportunity, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in updateOpportunity:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Update opportunity stage with automatic probability adjustment\n   */\n  async updateOpportunityStage(id: string, newStage: OpportunityStage): Promise<ApiResponse<Opportunity>> {\n    try {\n      const defaultProbability = STAGE_DEFAULT_PROBABILITY[newStage]\n      \n      const updates: OpportunityUpdate = {\n        stage: newStage,\n        probability_percent: defaultProbability\n      }\n\n      return await this.updateOpportunity(id, updates)\n\n    } catch (error) {\n      console.error('Unexpected error in updateOpportunityStage:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Delete an opportunity (soft delete)\n   */\n  async deleteOpportunity(id: string): Promise<ApiResponse<boolean>> {\n    try {\n      const { error } = await supabase\n        .from('opportunities')\n        .update({ deleted_at: new Date().toISOString() })\n        .eq('id', id)\n\n      if (error) {\n        console.error('Error deleting opportunity:', error)\n        return { data: false, error: error.message, success: false }\n      }\n\n      return { data: true, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in deleteOpportunity:', error)\n      return { \n        data: false, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Calculate opportunity KPIs for dashboard\n   */\n  async getOpportunityKPIs(): Promise<ApiResponse<OpportunityKPIs>> {\n    try {\n      // Get all active opportunities for calculations\n      const { data: opportunities, error } = await supabase\n        .from('opportunities')\n        .select('*')\n        .is('deleted_at', null)\n\n      if (error) {\n        console.error('Error fetching opportunities for KPIs:', error)\n        return { data: null, error: error.message, success: false }\n      }\n\n      const now = new Date()\n      const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1)\n      const thisWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\n\n      // Calculate basic metrics\n      const totalOpportunities = opportunities?.length || 0\n      const activeOpportunities = opportunities?.filter(opp => !opp.is_won && opp.stage !== 'Closed - Won').length || 0\n      const wonOpportunities = opportunities?.filter(opp => opp.is_won).length || 0\n      \n      // Calculate average probability\n      const probabilitySum = opportunities?.reduce((sum, opp) => sum + (opp.probability_percent || 0), 0) || 0\n      const averageProbability = totalOpportunities > 0 ? probabilitySum / totalOpportunities : 0\n\n      // Calculate won this month\n      const wonThisMonth = opportunities?.filter(opp => \n        opp.is_won && opp.updated_at && new Date(opp.updated_at) >= thisMonth\n      ).length || 0\n\n      // Calculate conversion rate\n      const conversionRate = totalOpportunities > 0 ? (wonOpportunities / totalOpportunities) * 100 : 0\n\n      // Calculate stage distribution\n      const stageDistribution = {\n        'New Lead': 0,\n        'Initial Outreach': 0,\n        'Sample/Visit Offered': 0,\n        'Awaiting Response': 0,\n        'Feedback Logged': 0,\n        'Demo Scheduled': 0,\n        'Closed - Won': 0\n      } as { [K in OpportunityStage]: number }\n\n      opportunities?.forEach(opp => {\n        stageDistribution[opp.stage as OpportunityStage]++\n      })\n\n      // Calculate recent activity\n      const createdThisWeek = opportunities?.filter(opp => \n        opp.created_at && new Date(opp.created_at) >= thisWeek\n      ).length || 0\n\n      const updatedThisWeek = opportunities?.filter(opp => \n        opp.updated_at && new Date(opp.updated_at) >= thisWeek\n      ).length || 0\n\n      const closedThisWeek = opportunities?.filter(opp => \n        opp.is_won && opp.updated_at && new Date(opp.updated_at) >= thisWeek\n      ).length || 0\n\n      const kpis: OpportunityKPIs = {\n        total_opportunities: totalOpportunities,\n        active_opportunities: activeOpportunities,\n        won_opportunities: wonOpportunities,\n        average_probability: Math.round(averageProbability),\n        total_pipeline_value: 0, // TODO: Calculate when product pricing is available\n        won_this_month: wonThisMonth,\n        conversion_rate: Math.round(conversionRate),\n        average_days_to_close: 0, // TODO: Calculate based on historical data\n        win_rate: Math.round(conversionRate), // Same as conversion_rate for now\n        stage_distribution: stageDistribution,\n        created_this_week: createdThisWeek,\n        updated_this_week: updatedThisWeek,\n        closed_this_week: closedThisWeek\n      }\n\n      return { data: kpis, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in getOpportunityKPIs:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n\n  /**\n   * Get opportunities grouped by stage for pipeline visualization\n   */\n  async getOpportunitiesByStage(): Promise<ApiResponse<{ [K in OpportunityStage]: OpportunityListView[] }>> {\n    try {\n      const result = await this.getOpportunities({ limit: 1000 })\n      \n      if (!result.success || !result.data) {\n        return { data: null, error: result.error, success: false }\n      }\n\n      // Group opportunities by stage\n      const groupedOpportunities = {\n        'New Lead': [],\n        'Initial Outreach': [],\n        'Sample/Visit Offered': [],\n        'Awaiting Response': [],\n        'Feedback Logged': [],\n        'Demo Scheduled': [],\n        'Closed - Won': []\n      } as { [K in OpportunityStage]: OpportunityListView[] }\n\n      result.data.forEach(opportunity => {\n        groupedOpportunities[opportunity.stage].push(opportunity)\n      })\n\n      return { data: groupedOpportunities, error: null, success: true }\n\n    } catch (error) {\n      console.error('Unexpected error in getOpportunitiesByStage:', error)\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred', \n        success: false \n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const opportunitiesApi = new OpportunitiesApiService()\nexport default opportunitiesApi","/**\n * Opportunity Store - Comprehensive State Management\n * Manages opportunity data, batch creation, pipeline visualization, and KPIs\n * Follows Pinia Composition API patterns with reactive state management\n */\n\nimport { defineStore } from 'pinia'\nimport { ref, computed, reactive } from 'vue'\nimport { opportunitiesApi } from '@/services/opportunitiesApi'\nimport type {\n  OpportunityListView,\n  OpportunityDetailView,\n  OpportunityFormData,\n  OpportunityNamePreview,\n  BatchCreationResult,\n  OpportunityKPIs,\n  OpportunityFilters,\n  OpportunityPagination\n} from '@/types/opportunities'\nimport { OpportunityStage } from '@/types/opportunities'\n\n/**\n * Store state interface for better type safety\n */\ninterface OpportunityStoreState {\n  // Data collections\n  opportunities: OpportunityListView[]\n  selectedOpportunity: OpportunityDetailView | null\n  \n  // UI state\n  loading: boolean\n  creating: boolean\n  updating: boolean\n  deleting: boolean\n  \n  // Error handling\n  error: string | null\n  \n  // Pagination and filtering\n  currentPage: number\n  totalCount: number\n  hasNextPage: boolean\n  hasPreviousPage: boolean\n  \n  // KPIs and analytics\n  kpis: OpportunityKPIs | null\n  stageDistribution: { [K in OpportunityStage]: OpportunityListView[] } | null\n  \n  // Batch operations\n  batchCreationResult: BatchCreationResult | null\n  namePreviewsCache: OpportunityNamePreview[]\n}\n\nexport const useOpportunityStore = defineStore('opportunity', () => {\n  // ===============================\n  // STATE MANAGEMENT\n  // ===============================\n  \n  const state = reactive<OpportunityStoreState>({\n    // Data collections\n    opportunities: [],\n    selectedOpportunity: null,\n    \n    // UI state\n    loading: false,\n    creating: false,\n    updating: false,\n    deleting: false,\n    \n    // Error handling\n    error: null,\n    \n    // Pagination and filtering\n    currentPage: 1,\n    totalCount: 0,\n    hasNextPage: false,\n    hasPreviousPage: false,\n    \n    // KPIs and analytics\n    kpis: null,\n    stageDistribution: null,\n    \n    // Batch operations\n    batchCreationResult: null,\n    namePreviewsCache: []\n  })\n\n  // Active filters for list view\n  const activeFilters = ref<OpportunityFilters>({})\n  const activePagination = ref<OpportunityPagination>({\n    page: 1,\n    limit: 20,\n    sort_by: 'created_at',\n    sort_order: 'desc'\n  })\n\n  // ===============================\n  // COMPUTED PROPERTIES\n  // ===============================\n  \n  const isLoading = computed(() => \n    state.loading || state.creating || state.updating || state.deleting\n  )\n  \n  const hasError = computed(() => !!state.error)\n  \n  const opportunityCount = computed(() => state.opportunities.length)\n  \n  const getOpportunityById = computed(() => {\n    return (id: string) => state.opportunities.find(opp => opp.id === id)\n  })\n  \n  const getOpportunitiesByStage = computed(() => {\n    return (stage: OpportunityStage) => \n      state.opportunities.filter(opp => opp.stage === stage)\n  })\n  \n  const totalPipelineValue = computed(() => {\n    return state.opportunities.reduce((total) => {\n      // TODO: Calculate based on product pricing when available\n      return total + 0\n    }, 0)\n  })\n  \n  const averageProbability = computed(() => {\n    if (state.opportunities.length === 0) return 0\n    const total = state.opportunities.reduce((sum, opp) => sum + (opp.probability_percent || 0), 0)\n    return Math.round(total / state.opportunities.length)\n  })\n\n  // ===============================\n  // ACTIONS - CRUD OPERATIONS\n  // ===============================\n  \n  /**\n   * Fetch opportunities with optional filtering and pagination\n   */\n  const fetchOpportunities = async (\n    filters: OpportunityFilters = {},\n    pagination: OpportunityPagination = activePagination.value\n  ): Promise<void> => {\n    state.loading = true\n    state.error = null\n    \n    try {\n      const response = await opportunitiesApi.getOpportunitiesWithFilters(filters, pagination)\n      \n      if (response.success && response.data) {\n        state.opportunities = response.data.opportunities\n        state.totalCount = response.data.total_count\n        state.currentPage = response.data.page\n        state.hasNextPage = response.data.has_next\n        state.hasPreviousPage = response.data.has_previous\n        \n        // Update active filters and pagination\n        activeFilters.value = filters\n        activePagination.value = pagination\n      } else {\n        // Fallback to demo data if API fails\n        console.warn('API failed, using demo data:', response.error)\n        state.opportunities = getDemoOpportunities()\n        state.totalCount = state.opportunities.length\n        state.currentPage = 1\n        state.hasNextPage = false\n        state.hasPreviousPage = false\n        \n        activeFilters.value = filters\n        activePagination.value = pagination\n      }\n    } catch (error) {\n      console.warn('API error, using demo data:', error)\n      // Fallback to demo data on any error\n      state.opportunities = getDemoOpportunities()\n      state.totalCount = state.opportunities.length\n      state.currentPage = 1\n      state.hasNextPage = false\n      state.hasPreviousPage = false\n      \n      activeFilters.value = filters\n      activePagination.value = pagination\n    } finally {\n      state.loading = false\n    }\n  }\n  \n  /**\n   * Fetch a single opportunity by ID\n   */\n  const fetchOpportunityById = async (id: string): Promise<void> => {\n    state.loading = true\n    state.error = null\n    \n    try {\n      const response = await opportunitiesApi.getOpportunityById(id)\n      \n      if (response.success && response.data) {\n        state.selectedOpportunity = response.data\n      } else {\n        state.error = response.error || 'Failed to fetch opportunity'\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n    } finally {\n      state.loading = false\n    }\n  }\n  \n  /**\n   * Create a single opportunity\n   */\n  const createOpportunity = async (opportunityData: any): Promise<boolean> => {\n    state.creating = true\n    state.error = null\n    \n    try {\n      const response = await opportunitiesApi.createOpportunity(opportunityData)\n      \n      if (response.success && response.data) {\n        // Add to local state if we're on the first page\n        if (state.currentPage === 1) {\n          const newOpportunity: OpportunityListView = {\n            id: response.data.id,\n            name: response.data.name,\n            stage: response.data.stage,\n            probability_percent: response.data.probability_percent,\n            expected_close_date: response.data.expected_close_date,\n            deal_owner: response.data.deal_owner,\n            is_won: response.data.is_won,\n            created_at: response.data.created_at,\n            updated_at: response.data.updated_at,\n            notes: response.data.notes || null,\n            organization_name: '',\n            organization_type: '',\n            principal_name: null,\n            principal_id: null,\n            product_name: null,\n            product_category: null,\n            days_since_created: 0,\n            days_to_close: null,\n            stage_duration_days: 0\n          }\n          state.opportunities.unshift(newOpportunity)\n        }\n        \n        return true\n      } else {\n        state.error = response.error || 'Failed to create opportunity'\n        return false\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n      return false\n    } finally {\n      state.creating = false\n    }\n  }\n  \n  /**\n   * Create multiple opportunities for different principals (batch creation)\n   */\n  const createBatchOpportunities = async (formData: OpportunityFormData): Promise<boolean> => {\n    state.creating = true\n    state.error = null\n    state.batchCreationResult = null\n    \n    try {\n      const response = await opportunitiesApi.createBatchOpportunities(formData)\n      \n      if (response.success && response.data) {\n        state.batchCreationResult = response.data\n        \n        // Refresh opportunities list if batch creation was successful\n        if (response.data.success && response.data.created_opportunities.length > 0) {\n          await fetchOpportunities(activeFilters.value, activePagination.value)\n        }\n        \n        return response.data.success\n      } else {\n        state.error = response.error || 'Failed to create batch opportunities'\n        return false\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n      return false\n    } finally {\n      state.creating = false\n    }\n  }\n  \n  /**\n   * Generate name previews for batch creation\n   */\n  const generateNamePreviews = async (formData: OpportunityFormData): Promise<void> => {\n    state.loading = true\n    state.error = null\n    \n    try {\n      const response = await opportunitiesApi.generateNamePreviews(formData)\n      \n      if (response.success && response.data) {\n        state.namePreviewsCache = response.data\n      } else {\n        state.error = response.error || 'Failed to generate name previews'\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n    } finally {\n      state.loading = false\n    }\n  }\n  \n  /**\n   * Update an existing opportunity\n   */\n  const updateOpportunity = async (id: string, updates: any): Promise<boolean> => {\n    state.updating = true\n    state.error = null\n    \n    try {\n      const response = await opportunitiesApi.updateOpportunity(id, updates)\n      \n      if (response.success && response.data) {\n        // Update in local state\n        const index = state.opportunities.findIndex(opp => opp.id === id)\n        if (index !== -1) {\n          // Update the list item with available data\n          state.opportunities[index] = {\n            ...state.opportunities[index],\n            name: response.data.name,\n            stage: response.data.stage,\n            probability_percent: response.data.probability_percent,\n            expected_close_date: response.data.expected_close_date,\n            deal_owner: response.data.deal_owner,\n            is_won: response.data.is_won,\n            updated_at: response.data.updated_at\n          }\n        }\n        \n        // Update selected opportunity if it's the same one\n        if (state.selectedOpportunity?.id === id) {\n          await fetchOpportunityById(id)\n        }\n        \n        return true\n      } else {\n        state.error = response.error || 'Failed to update opportunity'\n        return false\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n      return false\n    } finally {\n      state.updating = false\n    }\n  }\n  \n  /**\n   * Update opportunity stage with automatic probability adjustment\n   */\n  const updateOpportunityStage = async (id: string, newStage: OpportunityStage): Promise<boolean> => {\n    state.updating = true\n    state.error = null\n    \n    try {\n      const response = await opportunitiesApi.updateOpportunityStage(id, newStage)\n      \n      if (response.success && response.data) {\n        // Update in local state\n        const index = state.opportunities.findIndex(opp => opp.id === id)\n        if (index !== -1) {\n          state.opportunities[index] = {\n            ...state.opportunities[index],\n            stage: response.data.stage,\n            probability_percent: response.data.probability_percent,\n            updated_at: response.data.updated_at\n          }\n        }\n        \n        return true\n      } else {\n        state.error = response.error || 'Failed to update opportunity stage'\n        return false\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n      return false\n    } finally {\n      state.updating = false\n    }\n  }\n  \n  /**\n   * Delete an opportunity (soft delete)\n   */\n  const deleteOpportunity = async (id: string): Promise<boolean> => {\n    state.deleting = true\n    state.error = null\n    \n    try {\n      const response = await opportunitiesApi.deleteOpportunity(id)\n      \n      if (response.success) {\n        // Remove from local state\n        const index = state.opportunities.findIndex(opp => opp.id === id)\n        if (index !== -1) {\n          state.opportunities.splice(index, 1)\n        }\n        \n        // Clear selected opportunity if it was deleted\n        if (state.selectedOpportunity?.id === id) {\n          state.selectedOpportunity = null\n        }\n        \n        return true\n      } else {\n        state.error = response.error || 'Failed to delete opportunity'\n        return false\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n      return false\n    } finally {\n      state.deleting = false\n    }\n  }\n\n  // ===============================\n  // ACTIONS - ANALYTICS & KPIs\n  // ===============================\n  \n  /**\n   * Fetch opportunity KPIs for dashboard\n   */\n  const fetchKPIs = async (): Promise<void> => {\n    state.loading = true\n    state.error = null\n    \n    try {\n      const response = await opportunitiesApi.getOpportunityKPIs()\n      \n      if (response.success && response.data) {\n        state.kpis = response.data\n      } else {\n        // Fallback to demo KPIs\n        console.warn('KPI API failed, using demo data:', response.error)\n        state.kpis = getDemoKPIs()\n      }\n    } catch (error) {\n      console.warn('KPI API error, using demo data:', error)\n      // Fallback to demo KPIs\n      state.kpis = getDemoKPIs()\n    } finally {\n      state.loading = false\n    }\n  }\n  \n  /**\n   * Fetch opportunities grouped by stage for pipeline visualization\n   */\n  const fetchStageDistribution = async (): Promise<void> => {\n    state.loading = true\n    state.error = null\n    \n    try {\n      const response = await opportunitiesApi.getOpportunitiesByStage()\n      \n      if (response.success && response.data) {\n        state.stageDistribution = response.data\n      } else {\n        state.error = response.error || 'Failed to fetch stage distribution'\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n    } finally {\n      state.loading = false\n    }\n  }\n\n  // ===============================\n  // ACTIONS - UTILITY FUNCTIONS\n  // ===============================\n  \n  /**\n   * Clear all error states\n   */\n  const clearError = (): void => {\n    state.error = null\n  }\n  \n  /**\n   * Clear selected opportunity\n   */\n  const clearSelectedOpportunity = (): void => {\n    state.selectedOpportunity = null\n  }\n  \n  /**\n   * Clear batch creation results\n   */\n  const clearBatchResults = (): void => {\n    state.batchCreationResult = null\n    state.namePreviewsCache = []\n  }\n  \n  /**\n   * Reset filters and pagination to defaults\n   */\n  const resetFilters = (): void => {\n    activeFilters.value = {}\n    activePagination.value = {\n      page: 1,\n      limit: 20,\n      sort_by: 'created_at',\n      sort_order: 'desc'\n    }\n  }\n  \n  /**\n   * Refresh current data (re-fetch with current filters)\n   */\n  const refresh = async (): Promise<void> => {\n    await fetchOpportunities(activeFilters.value, activePagination.value)\n  }\n\n  /**\n   * Generate demo KPI data for testing/fallback\n   */\n  const getDemoKPIs = (): OpportunityKPIs => {\n    return {\n      total_opportunities: 15,\n      active_opportunities: 11,\n      won_opportunities: 4,\n      won_this_month: 3,\n      average_probability: 68,\n      total_pipeline_value: 2150000,\n      win_rate: 72,\n      time_to_close_avg: 45,\n      conversion_rate: 26.7,\n      average_days_to_close: 45,\n      stage_distribution: {\n        'New Lead': 3,\n        'Initial Outreach': 2,\n        'Sample/Visit Offered': 3,\n        'Awaiting Response': 2,\n        'Feedback Logged': 2,\n        'Demo Scheduled': 2,\n        'Closed - Won': 4\n      },\n      created_this_week: 2,\n      updated_this_week: 8,\n      closed_this_week: 1\n    }\n  }\n\n  /**\n   * Generate demo opportunities data for testing/fallback\n   */\n  const getDemoOpportunities = (): OpportunityListView[] => {\n    return [\n      {\n        id: 'demo-1',\n        name: 'Enterprise Integration - TechCorp',\n        stage: OpportunityStage.DEMO_SCHEDULED,\n        probability_percent: 75,\n        expected_close_date: '2024-09-15',\n        deal_owner: 'Sarah Johnson',\n        is_won: false,\n        notes: 'Technical demo scheduled for next week. Strong interest in enterprise features and scalability.',\n        created_at: '2024-08-01T10:00:00Z',\n        updated_at: '2024-08-01T15:30:00Z',\n        organization_name: 'TechCorp Solutions',\n        organization_type: 'Technology',\n        principal_name: 'Mike Chen',\n        principal_id: 'principal-1',\n        product_name: 'Enterprise Suite',\n        product_category: 'Software',\n        days_since_created: 15,\n        days_to_close: 45,\n        stage_duration_days: 5\n      },\n      {\n        id: 'demo-2',\n        name: 'Cloud Migration - StartupCo',\n        stage: OpportunityStage.SAMPLE_VISIT_OFFERED,\n        probability_percent: 60,\n        expected_close_date: '2024-10-30',\n        deal_owner: 'Alex Rodriguez',\n        is_won: false,\n        notes: 'Startup looking to migrate legacy systems to cloud infrastructure. Cost-conscious but very interested in scalability features.',\n        created_at: '2024-07-20T14:00:00Z',\n        updated_at: '2024-08-01T09:15:00Z',\n        organization_name: 'StartupCo Inc',\n        organization_type: 'Startup',\n        principal_name: 'Lisa Wang',\n        principal_id: 'principal-2',\n        product_name: 'Cloud Platform',\n        product_category: 'Infrastructure',\n        days_since_created: 27,\n        days_to_close: 90,\n        stage_duration_days: 12\n      },\n      {\n        id: 'demo-3',\n        name: 'Data Analytics - RetailGiant',\n        stage: OpportunityStage.FEEDBACK_LOGGED,\n        probability_percent: 85,\n        expected_close_date: '2024-08-30',\n        deal_owner: 'Emma Thompson',\n        is_won: false,\n        notes: 'Large retail client with extensive data needs. Positive feedback from initial analytics review. Strong alignment with their digital transformation goals.',\n        created_at: '2024-07-10T08:30:00Z',\n        updated_at: '2024-08-01T16:45:00Z',\n        organization_name: 'RetailGiant Corp',\n        organization_type: 'Retail',\n        principal_name: 'David Kim',\n        principal_id: 'principal-3',\n        product_name: 'Analytics Suite',\n        product_category: 'Analytics',\n        days_since_created: 37,\n        days_to_close: 29,\n        stage_duration_days: 8\n      },\n      {\n        id: 'demo-4',\n        name: 'Security Upgrade - FinanceSecure',\n        stage: OpportunityStage.CLOSED_WON,\n        probability_percent: 100,\n        expected_close_date: '2024-07-25',\n        deal_owner: 'James Wilson',\n        is_won: true,\n        notes: 'Successfully closed security platform implementation. Client was impressed with compliance features and rapid deployment capabilities.',\n        created_at: '2024-06-15T11:00:00Z',\n        updated_at: '2024-07-25T17:00:00Z',\n        organization_name: 'Finance Secure Ltd',\n        organization_type: 'Financial Services',\n        principal_name: 'Rachel Green',\n        principal_id: 'principal-4',\n        product_name: 'Security Platform',\n        product_category: 'Security',\n        days_since_created: 55,\n        days_to_close: -7,\n        stage_duration_days: 2\n      }\n    ]\n  }\n\n  // ===============================\n  // RETURN STORE INTERFACE\n  // ===============================\n  \n  return {\n    // State\n    ...state,\n    activeFilters,\n    activePagination,\n    \n    // Computed\n    isLoading,\n    hasError,\n    opportunityCount,\n    getOpportunityById,\n    getOpportunitiesByStage,\n    totalPipelineValue,\n    averageProbability,\n    \n    // Actions - CRUD\n    fetchOpportunities,\n    fetchOpportunityById,\n    createOpportunity,\n    createBatchOpportunities,\n    generateNamePreviews,\n    updateOpportunity,\n    updateOpportunityStage,\n    deleteOpportunity,\n    \n    // Actions - Analytics\n    fetchKPIs,\n    fetchStageDistribution,\n    \n    // Actions - Utilities\n    clearError,\n    clearSelectedOpportunity,\n    clearBatchResults,\n    resetFilters,\n    refresh\n  }\n})"],"names":["OpportunityStage","OpportunityContext","yup.object","yup.string","yup.array","yup.number","value","closeDate","today","yup.boolean","STAGE_DEFAULT_PROBABILITY","STAGE_COLORS","OpportunityNamingService","options","organization_name","principal_name","context","date","custom_context","orgName","principalName","contextStr","dateStr","request","principal_data","principal","generatedName","nameTemplate","variables","part","name","regexPattern","parts","hasContextPlaceholder","organization","dateParts","month","year","error","currentName","updates","parsed","updatedOptions","_name","_excludeId","baseOptions","baseName","finalName","counter","customContext","opportunityNaming","generateBatchNamePreviews","OpportunitiesApiService","query","supabase","sortBy","sortOrder","data","row","createdDate","now","daysSinceCreated","daysToClose","_a","_b","_c","_d","filters","pagination","count","opportunities","totalCount","id","_e","_f","_g","_h","_i","opportunity","cleanedOpportunity","formData","orgData","organizationName","principalData","principalDataFormatted","p","namePreviews","createdOpportunities","failedCreations","preview","opportunityData","result","cleanedUpdates","newStage","defaultProbability","thisMonth","thisWeek","totalOpportunities","activeOpportunities","opp","wonOpportunities","probabilitySum","sum","averageProbability","wonThisMonth","conversionRate","stageDistribution","createdThisWeek","updatedThisWeek","closedThisWeek","groupedOpportunities","opportunitiesApi","useOpportunityStore","defineStore","state","reactive","activeFilters","ref","activePagination","isLoading","computed","hasError","opportunityCount","getOpportunityById","getOpportunitiesByStage","stage","totalPipelineValue","total","fetchOpportunities","response","getDemoOpportunities","fetchOpportunityById","createOpportunity","newOpportunity","createBatchOpportunities","generateNamePreviews","updateOpportunity","index","updateOpportunityStage","deleteOpportunity","fetchKPIs","getDemoKPIs","fetchStageDistribution","clearError","clearSelectedOpportunity","clearBatchResults","resetFilters","refresh"],"mappings":"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"}
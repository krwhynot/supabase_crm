{"version":3,"file":"organizationStore-CCNIEwvT.js","sources":["../../src/types/organizations.ts","../../src/stores/organizationStore.ts"],"sourcesContent":["// =============================================================================\n// Organization Types and Validation Schemas\n// =============================================================================\n// TypeScript types and Yup validation schemas for organizations functionality\n// Generated from Supabase database schema - Stage 3 Enhanced Implementation\n// Updated for Organization Form Redesign with A/B/C/D Priority System\n// =============================================================================\n\nimport * as yup from 'yup';\nimport type { \n  Organization, \n  OrganizationType,\n  OrganizationSize,\n  OrganizationStatus,\n  InteractionType,\n  InteractionDirection\n} from './database.types';\n\n// =============================================================================\n// Enhanced Organization Types for Form Redesign - Stage 3.1\n// =============================================================================\n\n// Priority mapping types (A/B/C/D system)\nexport type OrganizationPriority = 'A' | 'B' | 'C' | 'D';\n\nexport interface PriorityOption {\n  value: number; // 90, 70, 50, 30\n  label: OrganizationPriority; // A, B, C, D\n  description: string;\n}\n\n// Enhanced status options for new business requirements\nexport type EnhancedOrganizationStatus = \n  | 'Prospect' \n  | 'Active Customer' \n  | 'Inactive Customer' \n  | 'Other'\n  | 'Principal'\n  | 'Distributor';\n\n// Principal/Distributor custom fields interface\nexport interface OrganizationCustomFields {\n  is_principal?: boolean;\n  is_distributor?: boolean;\n  distributor_id?: string; // Reference to distributor organization\n  account_manager_id?: string;\n  food_beverage_segment?: string;\n  [key: string]: any;\n}\n\n// =============================================================================\n// Organization Validation Schemas\n// =============================================================================\n\n// Base organization schema for creation/updates\nexport const organizationSchema = yup.object({\n  name: yup\n    .string()\n    .required('Organization name is required')\n    .trim()\n    .min(1, 'Organization name cannot be empty')\n    .max(255, 'Organization name must be less than 255 characters'),\n  \n  legal_name: yup\n    .string()\n    .nullable()\n    .max(255, 'Legal name must be less than 255 characters'),\n  \n  description: yup\n    .string()\n    .nullable(),\n  \n  industry: yup\n    .string()\n    .nullable()\n    .max(255, 'Industry must be less than 255 characters'),\n  \n  type: yup\n    .mixed<OrganizationType>()\n    .oneOf(['B2B', 'B2C', 'B2B2C', 'Non-Profit', 'Government', 'Other'])\n    .nullable(),\n  \n  size: yup\n    .mixed<OrganizationSize>()\n    .oneOf(['Startup', 'Small', 'Medium', 'Large', 'Enterprise'])\n    .nullable(),\n  \n  status: yup\n    .mixed<OrganizationStatus>()\n    .oneOf(['Active', 'Inactive', 'Prospect', 'Customer', 'Partner', 'Vendor'])\n    .nullable(),\n  \n  website: yup\n    .string()\n    .nullable()\n    .matches(/^https?:\\/\\/[^\\s]+$/, 'Website must be a valid URL starting with http:// or https://'),\n  \n  email: yup\n    .string()\n    .nullable()\n    .email('Email must be a valid email address'),\n  \n  primary_phone: yup\n    .string()\n    .nullable()\n    .max(50, 'Primary phone must be less than 50 characters'),\n  \n  secondary_phone: yup\n    .string()\n    .nullable()\n    .max(50, 'Secondary phone must be less than 50 characters'),\n  \n  address_line_1: yup\n    .string()\n    .nullable()\n    .max(255, 'Address line 1 must be less than 255 characters'),\n  \n  address_line_2: yup\n    .string()\n    .nullable()\n    .max(255, 'Address line 2 must be less than 255 characters'),\n  \n  city: yup\n    .string()\n    .nullable()\n    .max(100, 'City must be less than 100 characters'),\n  \n  state_province: yup\n    .string()\n    .nullable()\n    .max(100, 'State/Province must be less than 100 characters'),\n  \n  postal_code: yup\n    .string()\n    .nullable()\n    .max(20, 'Postal code must be less than 20 characters'),\n  \n  country: yup\n    .string()\n    .nullable()\n    .max(100, 'Country must be less than 100 characters'),\n  \n  founded_year: yup\n    .number()\n    .nullable()\n    .integer('Founded year must be a whole number')\n    .min(1800, 'Founded year must be 1800 or later')\n    .max(new Date().getFullYear() + 1, 'Founded year cannot be in the future'),\n  \n  employees_count: yup\n    .number()\n    .nullable()\n    .integer('Employee count must be a whole number')\n    .min(0, 'Employee count cannot be negative'),\n  \n  annual_revenue: yup\n    .number()\n    .nullable()\n    .min(0, 'Annual revenue cannot be negative'),\n  \n  currency_code: yup\n    .string()\n    .nullable()\n    .matches(/^[A-Z]{3}$/, 'Currency code must be 3 uppercase letters (e.g., USD)'),\n  \n  lead_source: yup\n    .string()\n    .nullable()\n    .max(255, 'Lead source must be less than 255 characters'),\n  \n  lead_score: yup\n    .number()\n    .nullable()\n    .integer('Lead score must be a whole number')\n    .min(0, 'Lead score cannot be negative')\n    .max(100, 'Lead score cannot exceed 100'),\n  \n  tags: yup\n    .array()\n    .of(yup.string())\n    .nullable(),\n  \n  custom_fields: yup\n    .object()\n    .nullable(),\n  \n  parent_org_id: yup\n    .string()\n    .nullable()\n    .uuid('Parent organization ID must be a valid UUID'),\n  \n  assigned_user_id: yup\n    .string()\n    .nullable()\n    .uuid('Assigned user ID must be a valid UUID'),\n  \n  last_contact_date: yup\n    .date()\n    .nullable(),\n  \n  next_follow_up_date: yup\n    .date()\n    .nullable(),\n\n  // Principal/Distributor fields for new business logic\n  is_principal: yup\n    .boolean()\n    .nullable(),\n\n  is_distributor: yup\n    .boolean()\n    .nullable(),\n\n  distributor_id: yup\n    .string()\n    .nullable()\n    .uuid('Distributor ID must be a valid UUID'),\n\n  account_manager_id: yup\n    .string()\n    .nullable()\n    .uuid('Account Manager ID must be a valid UUID')\n});\n\n// Schema for creating new organizations\nexport const createOrganizationSchema = organizationSchema;\n\n// Schema for updating organizations (all fields optional except constraints)\nexport const updateOrganizationSchema = organizationSchema.partial();\n\n// =============================================================================\n// Organization Interaction Validation Schemas\n// =============================================================================\n\nexport const organizationInteractionSchema = yup.object({\n  organization_id: yup\n    .string()\n    .required('Organization ID is required')\n    .uuid('Organization ID must be a valid UUID'),\n  \n  contact_id: yup\n    .string()\n    .nullable()\n    .uuid('Contact ID must be a valid UUID'),\n  \n  type: yup\n    .mixed<InteractionType>()\n    .oneOf(['Email', 'Phone', 'Meeting', 'Demo', 'Proposal', 'Contract', 'Note', 'Task', 'Event', 'Social', 'Website', 'Other'])\n    .required('Interaction type is required'),\n  \n  direction: yup\n    .mixed<InteractionDirection>()\n    .oneOf(['Inbound', 'Outbound'])\n    .nullable(),\n  \n  subject: yup\n    .string()\n    .nullable()\n    .max(500, 'Subject must be less than 500 characters')\n    .test('not-empty', 'Subject cannot be empty if provided', function(value) {\n      return value === null || value === undefined || value.trim().length > 0;\n    }),\n  \n  description: yup\n    .string()\n    .nullable(),\n  \n  interaction_date: yup\n    .date()\n    .required('Interaction date is required'),\n  \n  duration_minutes: yup\n    .number()\n    .nullable()\n    .integer('Duration must be a whole number of minutes')\n    .min(0, 'Duration cannot be negative'),\n  \n  tags: yup\n    .array()\n    .of(yup.string())\n    .nullable(),\n  \n  metadata: yup\n    .object()\n    .nullable(),\n  \n  created_by_user_id: yup\n    .string()\n    .nullable()\n    .uuid('Created by user ID must be a valid UUID')\n});\n\nexport const createOrganizationInteractionSchema = organizationInteractionSchema;\nexport const updateOrganizationInteractionSchema = organizationInteractionSchema.partial().shape({\n  organization_id: yup.string().uuid('Organization ID must be a valid UUID'), // Keep required for updates\n});\n\n// =============================================================================\n// Organization Document Validation Schemas\n// =============================================================================\n\nexport const organizationDocumentSchema = yup.object({\n  organization_id: yup\n    .string()\n    .required('Organization ID is required')\n    .uuid('Organization ID must be a valid UUID'),\n  \n  name: yup\n    .string()\n    .required('Document name is required')\n    .trim()\n    .min(1, 'Document name cannot be empty')\n    .max(500, 'Document name must be less than 500 characters'),\n  \n  description: yup\n    .string()\n    .nullable(),\n  \n  file_type: yup\n    .string()\n    .nullable()\n    .max(50, 'File type must be less than 50 characters'),\n  \n  file_size_bytes: yup\n    .number()\n    .nullable()\n    .integer('File size must be a whole number')\n    .min(0, 'File size cannot be negative'),\n  \n  storage_path: yup\n    .string()\n    .nullable()\n    .max(1000, 'Storage path must be less than 1000 characters'),\n  \n  external_url: yup\n    .string()\n    .nullable()\n    .matches(/^https?:\\/\\/[^\\s]+$/, 'External URL must be a valid URL starting with http:// or https://')\n    .max(1000, 'External URL must be less than 1000 characters'),\n  \n  category: yup\n    .string()\n    .nullable()\n    .max(255, 'Category must be less than 255 characters'),\n  \n  tags: yup\n    .array()\n    .of(yup.string())\n    .nullable(),\n  \n  is_public: yup\n    .boolean()\n    .nullable(),\n  \n  access_level: yup\n    .string()\n    .nullable()\n    .max(50, 'Access level must be less than 50 characters'),\n  \n  version: yup\n    .string()\n    .nullable()\n    .max(50, 'Version must be less than 50 characters'),\n  \n  parent_document_id: yup\n    .string()\n    .nullable()\n    .uuid('Parent document ID must be a valid UUID'),\n  \n  uploaded_by_user_id: yup\n    .string()\n    .nullable()\n    .uuid('Uploaded by user ID must be a valid UUID')\n}).test('has-location', 'Document must have either a storage path or external URL', function(value) {\n  return !!(value.storage_path || value.external_url);\n});\n\nexport const createOrganizationDocumentSchema = organizationDocumentSchema;\nexport const updateOrganizationDocumentSchema = organizationDocumentSchema.partial().shape({\n  organization_id: yup.string().uuid('Organization ID must be a valid UUID'), // Keep required for updates\n});\n\n// =============================================================================\n// Organization Analytics Validation Schemas\n// =============================================================================\n\nexport const organizationAnalyticsSchema = yup.object({\n  organization_id: yup\n    .string()\n    .required('Organization ID is required')\n    .uuid('Organization ID must be a valid UUID'),\n  \n  period_start: yup\n    .date()\n    .required('Period start date is required'),\n  \n  period_end: yup\n    .date()\n    .required('Period end date is required')\n    .test('after-start', 'Period end must be after period start', function(value) {\n      const { period_start } = this.parent;\n      if (!period_start || !value) return true;\n      return value > period_start;\n    }),\n  \n  period_type: yup\n    .string()\n    .required('Period type is required')\n    .oneOf(['daily', 'weekly', 'monthly', 'quarterly', 'yearly'], 'Period type must be one of: daily, weekly, monthly, quarterly, yearly'),\n  \n  total_interactions: yup\n    .number()\n    .nullable()\n    .integer('Total interactions must be a whole number')\n    .min(0, 'Total interactions cannot be negative'),\n  \n  email_interactions: yup\n    .number()\n    .nullable()\n    .integer('Email interactions must be a whole number')\n    .min(0, 'Email interactions cannot be negative'),\n  \n  phone_interactions: yup\n    .number()\n    .nullable()\n    .integer('Phone interactions must be a whole number')\n    .min(0, 'Phone interactions cannot be negative'),\n  \n  meeting_interactions: yup\n    .number()\n    .nullable()\n    .integer('Meeting interactions must be a whole number')\n    .min(0, 'Meeting interactions cannot be negative'),\n  \n  revenue_generated: yup\n    .number()\n    .nullable()\n    .min(0, 'Revenue generated cannot be negative'),\n  \n  deals_closed: yup\n    .number()\n    .nullable()\n    .integer('Deals closed must be a whole number')\n    .min(0, 'Deals closed cannot be negative'),\n  \n  deals_in_progress: yup\n    .number()\n    .nullable()\n    .integer('Deals in progress must be a whole number')\n    .min(0, 'Deals in progress cannot be negative'),\n  \n  lead_score_change: yup\n    .number()\n    .nullable()\n    .integer('Lead score change must be a whole number'),\n  \n  conversion_events: yup\n    .number()\n    .nullable()\n    .integer('Conversion events must be a whole number')\n    .min(0, 'Conversion events cannot be negative'),\n  \n  documents_added: yup\n    .number()\n    .nullable()\n    .integer('Documents added must be a whole number')\n    .min(0, 'Documents added cannot be negative'),\n  \n  documents_accessed: yup\n    .number()\n    .nullable()\n    .integer('Documents accessed must be a whole number')\n    .min(0, 'Documents accessed cannot be negative'),\n  \n  new_contacts_added: yup\n    .number()\n    .nullable()\n    .integer('New contacts added must be a whole number')\n    .min(0, 'New contacts added cannot be negative'),\n  \n  active_contacts: yup\n    .number()\n    .nullable()\n    .integer('Active contacts must be a whole number')\n    .min(0, 'Active contacts cannot be negative'),\n  \n  custom_metrics: yup\n    .object()\n    .nullable()\n});\n\nexport const createOrganizationAnalyticsSchema = organizationAnalyticsSchema;\nexport const updateOrganizationAnalyticsSchema = organizationAnalyticsSchema.partial().shape({\n  organization_id: yup.string().uuid('Organization ID must be a valid UUID'), // Keep required for updates\n});\n\n// =============================================================================\n// Type Inference from Schemas\n// =============================================================================\n\n// Infer TypeScript types from Yup schemas for form handling\nexport type OrganizationFormData = yup.InferType<typeof organizationSchema>;\nexport type CreateOrganizationFormData = yup.InferType<typeof createOrganizationSchema>;\nexport type UpdateOrganizationFormData = yup.InferType<typeof updateOrganizationSchema>;\n\nexport type OrganizationInteractionFormData = yup.InferType<typeof organizationInteractionSchema>;\nexport type CreateOrganizationInteractionFormData = yup.InferType<typeof createOrganizationInteractionSchema>;\nexport type UpdateOrganizationInteractionFormData = yup.InferType<typeof updateOrganizationInteractionSchema>;\n\nexport type OrganizationDocumentFormData = yup.InferType<typeof organizationDocumentSchema>;\nexport type CreateOrganizationDocumentFormData = yup.InferType<typeof createOrganizationDocumentSchema>;\nexport type UpdateOrganizationDocumentFormData = yup.InferType<typeof updateOrganizationDocumentSchema>;\n\nexport type OrganizationAnalyticsFormData = yup.InferType<typeof organizationAnalyticsSchema>;\nexport type CreateOrganizationAnalyticsFormData = yup.InferType<typeof createOrganizationAnalyticsSchema>;\nexport type UpdateOrganizationAnalyticsFormData = yup.InferType<typeof updateOrganizationAnalyticsSchema>;\n\n// =============================================================================\n// Form Type Aliases for Composables\n// =============================================================================\n\n// Form types used by composables and components\nexport type OrganizationCreateForm = CreateOrganizationFormData;\nexport type OrganizationUpdateForm = UpdateOrganizationFormData;\nexport type OrganizationInteractionCreateForm = CreateOrganizationInteractionFormData;\n\n// Enhanced form data interface for redesigned form\nexport interface EnhancedOrganizationCreateForm extends Omit<OrganizationCreateForm, 'status' | 'custom_fields'> {\n  status: EnhancedOrganizationStatus;\n  custom_fields: OrganizationCustomFields;\n  priority_letter: OrganizationPriority; // UI-friendly priority representation\n  assigned_contacts?: string[]; // Array of contact IDs to associate\n}\n\n// Schema exports for composables\nexport const organizationCreateSchema = createOrganizationSchema;\nexport const organizationUpdateSchema = updateOrganizationSchema;\nexport const organizationInteractionCreateSchema = createOrganizationInteractionSchema;\n\n// Enhanced validation schema for redesigned form\nexport const enhancedOrganizationCreateSchema = organizationCreateSchema.shape({\n  status: yup.mixed<EnhancedOrganizationStatus>()\n    .oneOf(['Prospect', 'Active Customer', 'Inactive Customer', 'Other', 'Principal', 'Distributor'])\n    .required('Organization status is required'),\n  \n  custom_fields: yup.object({\n    is_principal: yup.boolean().nullable(),\n    is_distributor: yup.boolean().nullable(),\n    distributor_id: yup.string().nullable().uuid('Distributor ID must be valid UUID'),\n    account_manager_id: yup.string().nullable().uuid('Account Manager ID must be valid UUID'),\n    food_beverage_segment: yup.string().nullable().max(255)\n  }).test('principal-distributor-exclusive', 'Cannot be both Principal and Distributor', function(value) {\n    return !(value?.is_principal && value?.is_distributor);\n  }),\n  \n  priority_letter: yup.mixed<OrganizationPriority>()\n    .oneOf(['A', 'B', 'C', 'D'])\n    .required('Priority is required'),\n    \n  assigned_contacts: yup.array().of(yup.string().uuid()).nullable()\n});\n\n// =============================================================================\n// Organization List and Detail Types\n// =============================================================================\n\n// Organization list item for tables and cards\nexport interface OrganizationListItem {\n  id: string;\n  name: string;\n  legal_name: string | null;\n  industry: string | null;\n  type: OrganizationType | null;\n  size: OrganizationSize | null;\n  status: OrganizationStatus | null;\n  website: string | null;\n  email: string | null;\n  primary_phone: string | null;\n  city: string | null;\n  country: string | null;\n  employees_count: number | null;\n  annual_revenue: number | null;\n  lead_score: number | null;\n  contact_count?: number;\n  last_interaction_date: string | null;\n  next_follow_up_date: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n}\n\n// Organization detail data with relationships\nexport interface OrganizationDetailData extends Organization {\n  contact_count: number;\n  interaction_count: number;\n  document_count: number;\n  recent_interactions: Array<{\n    id: string;\n    type: InteractionType | null;\n    subject: string | null;\n    interaction_date: string | null;\n    contact_name?: string;\n  }>;\n}\n\n// Organization creation data\nexport interface OrganizationCreateData {\n  name: string;\n  legal_name?: string | null;\n  description?: string | null;\n  industry?: string | null;\n  type?: OrganizationType | null;\n  size?: OrganizationSize | null;\n  status?: OrganizationStatus | null;\n  website?: string | null;\n  email?: string | null;\n  primary_phone?: string | null;\n  secondary_phone?: string | null;\n  address_line_1?: string | null;\n  address_line_2?: string | null;\n  city?: string | null;\n  state_province?: string | null;\n  postal_code?: string | null;\n  country?: string | null;\n  founded_year?: number | null;\n  employees_count?: number | null;\n  annual_revenue?: number | null;\n  currency_code?: string | null;\n  lead_source?: string | null;\n  lead_score?: number | null;\n  parent_org_id?: string | null;\n  tags?: string[] | null;\n  next_follow_up_date?: Date | null;\n}\n\n// =============================================================================\n// Filter and Sort Types\n// =============================================================================\n\n// Organization filters interface\nexport interface OrganizationFilters {\n  search?: string;\n  industry?: string[];\n  type?: OrganizationType[];\n  size?: OrganizationSize[];\n  status?: OrganizationStatus[];\n  country?: string[];\n  tags?: string[];\n  leadScoreRange?: {\n    min?: number;\n    max?: number;\n  };\n  employeeRange?: {\n    min?: number;\n    max?: number;\n  };\n  revenueRange?: {\n    min?: number;\n    max?: number;\n  };\n  foundedYearRange?: {\n    min?: number;\n    max?: number;\n  };\n  lastContactDateRange?: {\n    start?: Date;\n    end?: Date;\n  };\n}\n\n// Sort configuration\nexport type OrganizationSortField = \n  | 'name' \n  | 'legal_name' \n  | 'industry' \n  | 'type' \n  | 'size' \n  | 'status' \n  | 'lead_score' \n  | 'employees_count' \n  | 'annual_revenue' \n  | 'founded_year' \n  | 'created_at' \n  | 'updated_at' \n  | 'last_contact_date' \n  | 'next_follow_up_date';\n\nexport type SortOrder = 'asc' | 'desc';\n\nexport interface OrganizationSortConfig {\n  field: OrganizationSortField;\n  order: SortOrder;\n}\n\n// =============================================================================\n// Pagination and Response Types\n// =============================================================================\n\n// Pagination configuration\nexport interface PaginationConfig {\n  page: number;\n  limit: number;\n  total: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\n// Organization list response\nexport interface OrganizationListResponse {\n  data: OrganizationListItem[];\n  pagination: PaginationConfig;\n  filters: OrganizationFilters;\n  sort: OrganizationSortConfig;\n}\n\n// =============================================================================\n// Search and Validation Types\n// =============================================================================\n\n// Organization search form\nexport interface OrganizationSearchForm {\n  search?: string | null;\n  industry?: string | null;\n  type?: OrganizationType | null;\n  size?: OrganizationSize | null;\n  status?: OrganizationStatus | null;\n  country?: string | null;\n  min_employees?: number | null;\n  max_employees?: number | null;\n  min_revenue?: number | null;\n  max_revenue?: number | null;\n  min_lead_score?: number | null;\n  max_lead_score?: number | null;\n  tags?: string[] | null;\n  limit?: number;\n  offset?: number;\n  sortBy?: OrganizationSortField;\n  sortOrder?: SortOrder;\n}\n\n// Search schema\nexport const organizationSearchSchema = yup.object({\n  search: yup.string().nullable().optional(),\n  industry: yup.string().nullable().optional(),\n  type: yup.mixed<OrganizationType>().oneOf(['B2B', 'B2C', 'B2B2C', 'Non-Profit', 'Government', 'Other']).nullable().optional(),\n  size: yup.mixed<OrganizationSize>().oneOf(['Startup', 'Small', 'Medium', 'Large', 'Enterprise']).nullable().optional(),\n  status: yup.mixed<OrganizationStatus>().oneOf(['Active', 'Inactive', 'Prospect', 'Customer', 'Partner', 'Vendor']).nullable().optional(),\n  country: yup.string().nullable().optional(),\n  min_employees: yup.number().min(0).nullable().optional(),\n  max_employees: yup.number().min(0).nullable().optional(),\n  min_revenue: yup.number().min(0).nullable().optional(),\n  max_revenue: yup.number().min(0).nullable().optional(),\n  min_lead_score: yup.number().min(0).max(100).nullable().optional(),\n  max_lead_score: yup.number().min(0).max(100).nullable().optional(),\n  tags: yup.array().of(yup.string()).nullable().optional(),\n  limit: yup.number().min(1).max(100).optional().default(20),\n  offset: yup.number().min(0).optional().default(0),\n  sortBy: yup.mixed<OrganizationSortField>().oneOf(['name', 'legal_name', 'industry', 'type', 'size', 'status', 'lead_score', 'employees_count', 'annual_revenue', 'founded_year', 'created_at', 'updated_at', 'last_contact_date', 'next_follow_up_date']).optional().default('name'),\n  sortOrder: yup.mixed<SortOrder>().oneOf(['asc', 'desc']).optional().default('asc')\n});\n\n// Validation error type\nexport interface OrganizationValidationError {\n  field: string;\n  message: string;\n}\n\n// Form validation result\nexport interface OrganizationFormValidationResult<T> {\n  isValid: boolean;\n  data?: T;\n  errors: OrganizationValidationError[];\n}\n\n// =============================================================================\n// Metrics and Analytics Types\n// =============================================================================\n\n// Organization metrics for dashboard and analytics\nexport interface OrganizationMetrics {\n  totalOrganizations: number;\n  activeOrganizations: number;\n  prospects: number;\n  customers: number;\n  partners: number;\n  averageLeadScore: number;\n  totalRevenue: number;\n  monthlyGrowth: number;\n  industryDistribution: Array<{\n    industry: string;\n    count: number;\n    percentage: number;\n  }>;\n  statusDistribution: Array<{\n    status: OrganizationStatus;\n    count: number;\n    percentage: number;\n  }>;\n  recentActivity: Array<{\n    date: string;\n    organizationsAdded: number;\n    interactionsLogged: number;\n  }>;\n}\n\n// =============================================================================\n// Bulk Operations Types\n// =============================================================================\n\n// Bulk operation types\nexport interface BulkOrganizationOperationData {\n  type: 'delete' | 'update_status' | 'update_assigned_user' | 'add_tags' | 'remove_tags' | 'export';\n  organizationIds: string[];\n  data?: {\n    status?: OrganizationStatus;\n    assigned_user_id?: string;\n    tags?: string[];\n  };\n}\n\nexport type BulkOrganizationOperation = BulkOrganizationOperationData;\n\nexport interface BulkOperationResult {\n  operation: BulkOrganizationOperation;\n  success: boolean;\n  total: number;\n  successful: number;\n  failed: number;\n  errors: Array<{\n    id: string;\n    error: string;\n  }>;\n}\n\n// =============================================================================\n// Enum Arrays for Form Options\n// =============================================================================\n\nexport const ORGANIZATION_TYPES: OrganizationType[] = [\n  'B2B', 'B2C', 'B2B2C', 'Non-Profit', 'Government', 'Other'\n];\n\nexport const ORGANIZATION_SIZES: OrganizationSize[] = [\n  'Startup', 'Small', 'Medium', 'Large', 'Enterprise'\n];\n\nexport const ORGANIZATION_STATUSES: OrganizationStatus[] = [\n  'Active', 'Inactive', 'Prospect', 'Customer', 'Partner', 'Vendor'\n];\n\n// Enhanced status options for redesigned form\nexport const ENHANCED_ORGANIZATION_STATUSES: EnhancedOrganizationStatus[] = [\n  'Prospect', 'Active Customer', 'Inactive Customer', 'Other', 'Principal', 'Distributor'\n];\n\n// Priority options with mapping values\nexport const PRIORITY_OPTIONS: PriorityOption[] = [\n  { value: 90, label: 'A', description: 'Highest priority - Strategic accounts' },\n  { value: 70, label: 'B', description: 'High priority - Major opportunities' },\n  { value: 50, label: 'C', description: 'Medium priority - Qualified prospects' },\n  { value: 30, label: 'D', description: 'Lower priority - New prospects' }\n];\n\nexport const INTERACTION_TYPES: InteractionType[] = [\n  'Email', 'Phone', 'Meeting', 'Demo', 'Proposal', 'Contract', \n  'Note', 'Task', 'Event', 'Social', 'Website', 'Other'\n];\n\nexport const INTERACTION_DIRECTIONS: InteractionDirection[] = [\n  'Inbound', 'Outbound'\n];\n\nexport const PERIOD_TYPES = [\n  'daily', 'weekly', 'monthly', 'quarterly', 'yearly'\n] as const;\n\n// =============================================================================\n// Helper Functions\n// =============================================================================\n\n/**\n * Validates organization data against the schema\n */\nexport const validateOrganization = async (data: unknown): Promise<OrganizationFormData> => {\n  return await organizationSchema.validate(data, { abortEarly: false });\n};\n\n/**\n * Validates organization interaction data against the schema\n */\nexport const validateOrganizationInteraction = async (data: unknown): Promise<OrganizationInteractionFormData> => {\n  return await organizationInteractionSchema.validate(data, { abortEarly: false });\n};\n\n/**\n * Validates organization document data against the schema\n */\nexport const validateOrganizationDocument = async (data: unknown): Promise<OrganizationDocumentFormData> => {\n  return await organizationDocumentSchema.validate(data, { abortEarly: false });\n};\n\n/**\n * Validates organization analytics data against the schema\n */\nexport const validateOrganizationAnalytics = async (data: unknown): Promise<OrganizationAnalyticsFormData> => {\n  return await organizationAnalyticsSchema.validate(data, { abortEarly: false });\n};\n\n/**\n * Gets display label for organization type\n */\nexport const getOrganizationTypeLabel = (type: OrganizationType | null): string => {\n  if (!type) return 'Not specified';\n  return type;\n};\n\n/**\n * Gets display label for organization status\n */\nexport const getOrganizationStatusLabel = (status: OrganizationStatus | null): string => {\n  if (!status) return 'Not specified';\n  return status;\n};\n\n/**\n * Gets CSS class for organization status badge\n */\nexport const getOrganizationStatusClass = (status: OrganizationStatus | null): string => {\n  switch (status) {\n    case 'Active': return 'bg-green-100 text-green-800';\n    case 'Customer': return 'bg-blue-100 text-blue-800';\n    case 'Prospect': return 'bg-yellow-100 text-yellow-800';\n    case 'Partner': return 'bg-purple-100 text-purple-800';\n    case 'Vendor': return 'bg-indigo-100 text-indigo-800';\n    case 'Inactive': return 'bg-gray-100 text-gray-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n};\n\n/**\n * Gets CSS class for enhanced organization status badge\n */\nexport const getEnhancedOrganizationStatusClass = (status: EnhancedOrganizationStatus | null): string => {\n  switch (status) {\n    case 'Active Customer': return 'bg-green-100 text-green-800';\n    case 'Inactive Customer': return 'bg-gray-100 text-gray-800';\n    case 'Prospect': return 'bg-yellow-100 text-yellow-800';\n    case 'Principal': return 'bg-purple-100 text-purple-800';\n    case 'Distributor': return 'bg-indigo-100 text-indigo-800';\n    case 'Other': return 'bg-blue-100 text-blue-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n};\n\n/**\n * Maps priority letter to lead score value\n */\nexport const priorityLetterToScore = (letter: OrganizationPriority): number => {\n  const mapping = { 'A': 90, 'B': 70, 'C': 50, 'D': 30 };\n  return mapping[letter];\n};\n\n/**\n * Maps lead score to priority letter\n */\nexport const scoreToPriorityLetter = (score: number | null): OrganizationPriority => {\n  if (!score) return 'D';\n  if (score >= 90) return 'A';\n  if (score >= 70) return 'B';\n  if (score >= 50) return 'C';\n  return 'D';\n};\n\n/**\n * Gets CSS class for priority badge\n */\nexport const getPriorityClass = (priority: OrganizationPriority): string => {\n  switch (priority) {\n    case 'A': return 'bg-red-100 text-red-800';\n    case 'B': return 'bg-orange-100 text-orange-800';\n    case 'C': return 'bg-yellow-100 text-yellow-800';\n    case 'D': return 'bg-blue-100 text-blue-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n};\n\n/**\n * Gets CSS class for lead score indicator\n */\nexport const getLeadScoreClass = (score: number | null): string => {\n  if (!score) return 'bg-gray-100 text-gray-800';\n  if (score >= 80) return 'bg-red-100 text-red-800'; // Hot\n  if (score >= 60) return 'bg-orange-100 text-orange-800'; // Warm\n  if (score >= 40) return 'bg-yellow-100 text-yellow-800'; // Cool\n  return 'bg-blue-100 text-blue-800'; // Cold\n};\n\n/**\n * Gets lead temperature label\n */\nexport const getLeadTemperatureLabel = (score: number | null): string => {\n  if (!score) return 'Cold';\n  if (score >= 80) return 'Hot';\n  if (score >= 60) return 'Warm';\n  if (score >= 40) return 'Cool';\n  return 'Cold';\n};\n\n// Re-export database types for convenience\nexport type {\n  Organization,\n  OrganizationType,\n  OrganizationSize,\n  OrganizationStatus,\n  InteractionType,\n  InteractionDirection\n} from './database.types';","import { defineStore } from 'pinia'\nimport { ref, computed, reactive } from 'vue'\nimport { supabase } from '@/config/supabaseClient'\nimport type {\n  Organization,\n  OrganizationInsert,\n  OrganizationUpdate,\n  OrganizationInteraction,\n  OrganizationInteractionInsert,\n  OrganizationDocument,\n  OrganizationDocumentInsert,\n  OrganizationSummaryAnalytics,\n  MonthlyOrganizationPerformance,\n  OrganizationLeadScoring\n} from '@/types/database.types'\nimport type {\n  OrganizationListItem,\n  OrganizationDetailData,\n  OrganizationListResponse,\n  OrganizationFilters,\n  OrganizationSortConfig,\n  OrganizationSortField,\n  PaginationConfig,\n  OrganizationMetrics,\n  BulkOrganizationOperation,\n  BulkOperationResult,\n  EnhancedOrganizationCreateForm,\n  PriorityOption\n} from '@/types/organizations'\nimport {\n  PRIORITY_OPTIONS,\n  priorityLetterToScore,\n  scoreToPriorityLetter\n} from '@/types/organizations'\n\n/**\n * Organization Store - Manages organization data and operations\n * Follows established Pinia patterns with reactive state management\n * Comprehensive CRUD operations with analytics and relationship management\n */\nexport const useOrganizationStore = defineStore('organization', () => {\n  // ===============================\n  // MONITORING INTEGRATION\n  // ===============================\n  \n  // Monitoring functionality removed - was unused\n  \n  // ===============================\n  // STATE MANAGEMENT\n  // ===============================\n  \n  // Core data state\n  const organizations = ref<OrganizationListItem[]>([])\n  const currentOrganization = ref<OrganizationDetailData | null>(null)\n  \n  // Analytics and performance data\n  const analyticsData = ref<OrganizationSummaryAnalytics[]>([])\n  const performanceData = ref<MonthlyOrganizationPerformance[]>([])\n  const leadScoringData = ref<OrganizationLeadScoring[]>([])\n  const dashboardMetrics = ref<OrganizationMetrics | null>(null)\n  \n  // Interactions and documents\n  const interactions = ref<OrganizationInteraction[]>([])\n  const documents = ref<OrganizationDocument[]>([])\n  \n  // Loading states - granular loading management\n  const loading = reactive({\n    organizations: false,\n    currentOrganization: false,\n    analytics: false,\n    performance: false,\n    leadScoring: false,\n    metrics: false,\n    interactions: false,\n    documents: false,\n    creating: false,\n    updating: false,\n    deleting: false,\n    bulkOperations: false\n  })\n  \n  // Error states\n  const errors = reactive({\n    organizations: '',\n    currentOrganization: '',\n    analytics: '',\n    performance: '',\n    leadScoring: '',\n    metrics: '',\n    interactions: '',\n    documents: '',\n    creating: '',\n    updating: '',\n    deleting: '',\n    bulkOperations: ''\n  })\n  \n  // Search and filtering state\n  const searchQuery = ref('')\n  const appliedFilters = ref<OrganizationFilters>({})\n  const sortConfig = ref<OrganizationSortConfig>({\n    field: 'name',\n    order: 'asc'\n  })\n  \n  // Pagination state\n  const pagination = ref<PaginationConfig>({\n    page: 1,\n    limit: 20,\n    total: 0,\n    totalPages: 0,\n    hasNext: false,\n    hasPrevious: false\n  })\n  \n  // Cache and optimization\n  const lastRefreshed = ref<Date | null>(null)\n  const dataCache = reactive<Record<string, { data: any; timestamp: number; ttl: number }>>({})\n  \n  // ===============================\n  // COMPUTED PROPERTIES\n  // ===============================\n  \n  const hasOrganizations = computed(() => organizations.value.length > 0)\n  const totalOrganizations = computed(() => pagination.value.total)\n  const isLoading = computed(() => Object.values(loading).some(state => state))\n  const hasErrors = computed(() => Object.values(errors).some(error => error !== ''))\n  const currentError = computed(() => {\n    const errorKeys = Object.keys(errors) as Array<keyof typeof errors>\n    const firstError = errorKeys.find(key => errors[key] !== '')\n    return firstError ? errors[firstError] : ''\n  })\n  \n  // Analytics computed properties\n  const organizationStats = computed(() => {\n    if (!dashboardMetrics.value) return null\n    \n    return {\n      total: dashboardMetrics.value.totalOrganizations,\n      active: dashboardMetrics.value.activeOrganizations,\n      prospects: dashboardMetrics.value.prospects,\n      customers: dashboardMetrics.value.customers,\n      partners: dashboardMetrics.value.partners,\n      totalRevenue: dashboardMetrics.value.totalRevenue,\n      averageLeadScore: dashboardMetrics.value.averageLeadScore,\n      thisMonth: dashboardMetrics.value.monthlyGrowth > 0 ? Math.round(dashboardMetrics.value.totalOrganizations * dashboardMetrics.value.monthlyGrowth / 100) : 0,\n      thisWeek: Math.round((dashboardMetrics.value.monthlyGrowth > 0 ? dashboardMetrics.value.totalOrganizations * dashboardMetrics.value.monthlyGrowth / 100 : 0) / 4)\n    }\n  })\n  \n  // Top performing organizations\n  const topPerformingOrganizations = computed(() => {\n    return organizations.value\n      .filter(org => org.lead_score !== null)\n      .sort((a, b) => (b.lead_score || 0) - (a.lead_score || 0))\n      .slice(0, 10)\n  })\n  \n  // Organizations by status\n  const organizationsByStatus = computed(() => {\n    return organizations.value.reduce((acc, org) => {\n      const status = org.status || 'Unknown'\n      acc[status] = (acc[status] || 0) + 1\n      return acc\n    }, {} as Record<string, number>)\n  })\n  \n  // Recent organizations (created in last 30 days)\n  const recentOrganizations = computed(() => {\n    const thirtyDaysAgo = new Date()\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)\n    \n    return organizations.value.filter(org => {\n      if (!org.created_at) return false\n      return new Date(org.created_at) >= thirtyDaysAgo\n    })\n  })\n\n  // ===============================\n  // ENHANCED FORM REDESIGN COMPUTED PROPERTIES - Stage 3.1\n  // ===============================\n\n  // Priority options for A/B/C/D system\n  const priorityOptions = computed<PriorityOption[]>(() => PRIORITY_OPTIONS)\n\n  // Food & Beverage segments prioritized list\n  const foodBeverageSegments = computed(() => [\n    { value: 'Food & Beverage - Restaurants', label: 'Food & Beverage - Restaurants', priority: true },\n    { value: 'Food & Beverage - Manufacturing', label: 'Food & Beverage - Manufacturing', priority: true },\n    { value: 'Food & Beverage - Distribution', label: 'Food & Beverage - Distribution', priority: true },\n    { value: 'Food & Beverage - Retail', label: 'Food & Beverage - Retail', priority: true },\n    { value: 'Food & Beverage - Service', label: 'Food & Beverage - Service', priority: true },\n    // Add other industry segments with lower priority\n    { value: 'Technology', label: 'Technology', priority: false },\n    { value: 'Healthcare', label: 'Healthcare', priority: false },\n    { value: 'Manufacturing', label: 'Manufacturing', priority: false },\n    { value: 'Retail', label: 'Retail', priority: false },\n    { value: 'Financial Services', label: 'Financial Services', priority: false },\n    { value: 'Real Estate', label: 'Real Estate', priority: false },\n    { value: 'Education', label: 'Education', priority: false },\n    { value: 'Government', label: 'Government', priority: false },\n    { value: 'Non-Profit', label: 'Non-Profit', priority: false },\n    { value: 'Other', label: 'Other', priority: false }\n  ])\n\n  // Distributor organizations for dropdown\n  const distributorOrganizations = computed(() => \n    organizations.value.filter(org => {\n      const orgWithFields = org as any\n      return orgWithFields.custom_fields && \n        typeof orgWithFields.custom_fields === 'object' && \n        'is_distributor' in orgWithFields.custom_fields &&\n        orgWithFields.custom_fields.is_distributor === true\n    })\n  )\n\n  // Principal organizations for reference\n  const principalOrganizations = computed(() => \n    organizations.value.filter(org => {\n      const orgWithFields = org as any\n      return orgWithFields.custom_fields && \n        typeof orgWithFields.custom_fields === 'object' && \n        'is_principal' in orgWithFields.custom_fields &&\n        orgWithFields.custom_fields.is_principal === true\n    })\n  )\n  \n  // ===============================\n  // ERROR MANAGEMENT\n  // ===============================\n  \n  /**\n   * Clear all errors\n   */\n  const clearErrors = () => {\n    Object.keys(errors).forEach(key => {\n      errors[key as keyof typeof errors] = ''\n    })\n  }\n  \n  /**\n   * Clear specific error\n   */\n  const clearError = (type: keyof typeof errors) => {\n    errors[type] = ''\n  }\n  \n  /**\n   * Set error message\n   */\n  const setError = (type: keyof typeof errors, message: string) => {\n    errors[type] = message\n    console.error(`Organization Store Error (${type}):`, message)\n  }\n  \n  // ===============================\n  // CACHE MANAGEMENT\n  // ===============================\n  \n  /**\n   * Check if cached data is still valid\n   */\n  const isCacheValid = (key: string): boolean => {\n    const cached = dataCache[key]\n    if (!cached) return false\n    return Date.now() - cached.timestamp < cached.ttl\n  }\n  \n  /**\n   * Get cached data if valid\n   */\n  const getCachedData = <T>(key: string): T | null => {\n    if (isCacheValid(key)) {\n      return dataCache[key].data as T\n    }\n    return null\n  }\n  \n  /**\n   * Set cache data with TTL\n   */\n  const setCacheData = (key: string, data: any, ttlMs: number = 300000) => { // 5 minutes default\n    dataCache[key] = {\n      data,\n      timestamp: Date.now(),\n      ttl: ttlMs\n    }\n  }\n  \n  /**\n   * Clear specific cache entry\n   */\n  const clearCache = (key?: string) => {\n    if (key) {\n      delete dataCache[key]\n    } else {\n      Object.keys(dataCache).forEach(k => delete dataCache[k])\n    }\n  }\n  \n  // ===============================\n  // CORE CRUD OPERATIONS\n  // ===============================\n  \n  /**\n   * Fetch organizations with advanced filtering, sorting, and pagination\n   */\n  const fetchOrganizations = async (options: {\n    page?: number\n    limit?: number\n    filters?: Partial<OrganizationFilters>\n    sort?: Partial<OrganizationSortConfig>\n    search?: string\n    useCache?: boolean\n    resetList?: boolean\n  } = {}): Promise<OrganizationListResponse | null> => {\n    try {\n      loading.organizations = true\n      clearError('organizations')\n      \n      // Update pagination and filters\n      if (options.page !== undefined) pagination.value.page = options.page\n      if (options.limit !== undefined) pagination.value.limit = options.limit\n      if (options.filters) appliedFilters.value = { ...appliedFilters.value, ...options.filters }\n      if (options.sort) sortConfig.value = { ...sortConfig.value, ...options.sort }\n      if (options.search !== undefined) searchQuery.value = options.search\n      \n      // Check cache first\n      const cacheKey = `organizations_${JSON.stringify({ \n        page: pagination.value.page, \n        limit: pagination.value.limit,\n        filters: appliedFilters.value,\n        sort: sortConfig.value,\n        search: searchQuery.value\n      })}`\n      \n      if (options.useCache !== false) {\n        const cached = getCachedData<OrganizationListResponse>(cacheKey)\n        if (cached) {\n          organizations.value = options.resetList ? cached.data : [...organizations.value, ...cached.data]\n          pagination.value = cached.pagination\n          return cached\n        }\n      }\n      \n      // Build Supabase query - using basic organizations table instead of missing analytics view\n      let query = supabase\n        .from('organizations')\n        .select('*', { count: 'exact' })\n      \n      // Apply search\n      if (searchQuery.value.trim()) {\n        const searchTerm = searchQuery.value.trim()\n        query = query.or(`name.ilike.%${searchTerm}%,legal_name.ilike.%${searchTerm}%,industry.ilike.%${searchTerm}%`)\n      }\n      \n      // Apply filters\n      if (appliedFilters.value.industry && appliedFilters.value.industry.length > 0) {\n        query = query.in('industry', appliedFilters.value.industry)\n      }\n      \n      if (appliedFilters.value.status && appliedFilters.value.status.length > 0) {\n        query = query.in('status', appliedFilters.value.status)\n      }\n      \n      if (appliedFilters.value.type && appliedFilters.value.type.length > 0) {\n        query = query.in('type', appliedFilters.value.type)\n      }\n      \n      if (appliedFilters.value.size && appliedFilters.value.size.length > 0) {\n        query = query.in('size', appliedFilters.value.size)\n      }\n      \n      if (appliedFilters.value.country && appliedFilters.value.country.length > 0) {\n        query = query.in('country', appliedFilters.value.country)\n      }\n      \n      // Lead score range filter\n      if (appliedFilters.value.leadScoreRange) {\n        if (appliedFilters.value.leadScoreRange.min !== undefined) {\n          query = query.gte('lead_score', appliedFilters.value.leadScoreRange.min)\n        }\n        if (appliedFilters.value.leadScoreRange.max !== undefined) {\n          query = query.lte('lead_score', appliedFilters.value.leadScoreRange.max)\n        }\n      }\n      \n      // Employee range filter\n      if (appliedFilters.value.employeeRange) {\n        if (appliedFilters.value.employeeRange.min !== undefined) {\n          query = query.gte('employees_count', appliedFilters.value.employeeRange.min)\n        }\n        if (appliedFilters.value.employeeRange.max !== undefined) {\n          query = query.lte('employees_count', appliedFilters.value.employeeRange.max)\n        }\n      }\n      \n      // Revenue range filter\n      if (appliedFilters.value.revenueRange) {\n        if (appliedFilters.value.revenueRange.min !== undefined) {\n          query = query.gte('annual_revenue', appliedFilters.value.revenueRange.min)\n        }\n        if (appliedFilters.value.revenueRange.max !== undefined) {\n          query = query.lte('annual_revenue', appliedFilters.value.revenueRange.max)\n        }\n      }\n      \n      // Date range filters\n      if (appliedFilters.value.lastContactDateRange) {\n        if (appliedFilters.value.lastContactDateRange.start) {\n          query = query.gte('last_contact_date', appliedFilters.value.lastContactDateRange.start.toISOString())\n        }\n        if (appliedFilters.value.lastContactDateRange.end) {\n          query = query.lte('last_contact_date', appliedFilters.value.lastContactDateRange.end.toISOString())\n        }\n      }\n      \n      // Apply sorting\n      const ascending = sortConfig.value.order === 'asc'\n      query = query.order(sortConfig.value.field, { ascending })\n      \n      // Apply pagination\n      const offset = (pagination.value.page - 1) * pagination.value.limit\n      query = query.range(offset, offset + pagination.value.limit - 1)\n      \n      const { data, error, count } = await query\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Transform data to OrganizationListItem format using full organization data\n      const transformedData: OrganizationListItem[] = (data || []).map(item => ({\n        id: item.id || '',\n        name: item.name || '',\n        legal_name: item.legal_name,\n        industry: item.industry,\n        type: item.type,\n        size: item.size,\n        status: item.status,\n        website: item.website,\n        email: item.email,\n        primary_phone: item.primary_phone,\n        city: item.city,\n        country: item.country,\n        employees_count: item.employees_count,\n        annual_revenue: item.annual_revenue,\n        lead_score: item.lead_score,\n        contact_count: undefined, // Will need to be calculated separately if needed\n        last_interaction_date: item.last_contact_date,\n        next_follow_up_date: item.next_follow_up_date,\n        created_at: item.created_at,\n        updated_at: item.updated_at\n      }))\n      \n      // Update pagination\n      pagination.value.total = count || 0\n      pagination.value.totalPages = Math.ceil(pagination.value.total / pagination.value.limit)\n      pagination.value.hasNext = pagination.value.page < pagination.value.totalPages\n      pagination.value.hasPrevious = pagination.value.page > 1\n      \n      // Update organizations list\n      if (options.resetList !== false) {\n        organizations.value = transformedData\n      } else {\n        organizations.value = [...organizations.value, ...transformedData]\n      }\n      \n      const response: OrganizationListResponse = {\n        data: transformedData,\n        pagination: { ...pagination.value },\n        filters: { ...appliedFilters.value },\n        sort: { ...sortConfig.value }\n      }\n      \n      // Cache the response\n      setCacheData(cacheKey, response)\n      lastRefreshed.value = new Date()\n      \n      return response\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch organizations'\n      setError('organizations', message)\n      \n      console.error(`Failed to fetch organizations: ${message}`, {\n        operation: 'fetch_organizations',\n        options\n      })\n      \n      return null\n    } finally {\n      loading.organizations = false\n    }\n  }\n  \n  /**\n   * Fetch organization by ID with detailed information\n   */\n  const fetchOrganization = async (id: string): Promise<OrganizationDetailData | null> => {\n    try {\n      loading.currentOrganization = true\n      clearError('currentOrganization')\n      \n      // Check cache first\n      const cacheKey = `organization_${id}`\n      const cached = getCachedData<OrganizationDetailData>(cacheKey)\n      if (cached) {\n        currentOrganization.value = cached\n        return cached\n      }\n      \n      // Fetch organization data\n      const { data: orgData, error: orgError } = await supabase\n        .from('organizations')\n        .select('*')\n        .eq('id', id)\n        .single()\n      \n      if (orgError) {\n        throw new Error(orgError.message)\n      }\n      \n      // Fetch related data in parallel\n      const [contactsResult, interactionsResult, documentsResult] = await Promise.all([\n        supabase\n          .from('contacts')\n          .select('id, first_name, last_name, email, position')\n          .eq('organization_id', id),\n        \n        supabase\n          .from('organization_interactions')\n          .select('id, type, subject, interaction_date, contact_id, direction')\n          .eq('organization_id', id)\n          .order('interaction_date', { ascending: false })\n          .limit(10),\n        \n        supabase\n          .from('organization_documents')\n          .select('id, name, category, size, created_at')\n          .eq('organization_id', id)\n      ])\n      \n      // Build detailed data\n      const detailData: OrganizationDetailData = {\n        ...orgData,\n        contact_count: contactsResult.data?.length || 0,\n        interaction_count: interactionsResult.data?.length || 0,\n        document_count: documentsResult.data?.length || 0,\n        recent_interactions: (interactionsResult.data || []).map(interaction => ({\n          id: interaction.id,\n          type: interaction.type,\n          subject: interaction.subject,\n          interaction_date: interaction.interaction_date,\n          contact_name: contactsResult.data?.find(c => c.id === interaction.contact_id)\n            ? `${contactsResult.data.find(c => c.id === interaction.contact_id)?.first_name} ${contactsResult.data.find(c => c.id === interaction.contact_id)?.last_name}`\n            : undefined\n        }))\n      }\n      \n      currentOrganization.value = detailData\n      \n      // Cache the result\n      setCacheData(cacheKey, detailData)\n      \n      return detailData\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch organization'\n      setError('currentOrganization', message)\n      currentOrganization.value = null\n      return null\n    } finally {\n      loading.currentOrganization = false\n    }\n  }\n  \n  /**\n   * Create new organization\n   */\n  const createOrganization = async (organizationData: OrganizationInsert): Promise<Organization | null> => {\n    try {\n      loading.creating = true\n      clearError('creating')\n        \n        const { data, error } = await supabase\n          .from('organizations')\n          .insert(organizationData)\n          .select()\n          .single()\n        \n        if (error) {\n          console.error(`Failed to create organization: ${error.message}`, {\n            operation: 'create_organization',\n            data: organizationData\n          })\n          throw new Error(error.message)\n        }\n        \n        // Clear cache and refresh list\n        clearCache()\n        await fetchOrganizations({ resetList: true })\n        \n        // Record successful user action\n        console.log('Organization created successfully', {\n          organizationName: organizationData.name,\n          organizationIndustry: organizationData.industry\n        })\n        \n        return data\n        \n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to create organization'\n        setError('creating', message)\n        \n        console.error('Failed to create organization', message, {\n          organizationData\n        })\n        \n        return null\n      } finally {\n        loading.creating = false\n      }\n    }\n\n  /**\n   * Create new organization with contact associations\n   */\n  const createOrganizationWithContacts = async (\n    organizationData: OrganizationInsert,\n    contactData: {\n      mode: 'select' | 'create'\n      selectedContactIds: string[]\n      newContacts: Array<{\n        first_name: string\n        last_name: string\n        email: string\n        phone?: string\n        title?: string\n        department?: string\n      }>\n    }\n  ): Promise<Organization | null> => {\n    try {\n      loading.creating = true\n      clearError('creating')\n\n      // Start transaction by creating organization first\n      const { data: organization, error: orgError } = await supabase\n        .from('organizations')\n        .insert(organizationData)\n        .select()\n        .single()\n\n      if (orgError) {\n        throw new Error(orgError.message)\n      }\n\n      // Handle contacts based on mode\n      if (contactData.mode === 'create' && contactData.newContacts.length > 0) {\n        // Create new contacts and associate with organization\n        const contactInserts = contactData.newContacts.map(contact => ({\n          organization_id: organization.id,\n          first_name: contact.first_name,\n          last_name: contact.last_name,\n          email: contact.email,\n          phone: contact.phone || null,\n          position: contact.title || 'Unknown', // Map title to position\n          purchase_influence: 'Unknown' as 'High' | 'Medium' | 'Low' | 'Unknown',\n          decision_authority: 'End User' as 'Decision Maker' | 'Influencer' | 'End User' | 'Gatekeeper',\n          department: contact.department || null\n        }))\n\n        const { error: contactError } = await supabase\n          .from('contacts')\n          .insert(contactInserts)\n\n        if (contactError) {\n          console.warn('Failed to create some contacts:', contactError.message)\n          // Don't fail the entire operation for contact creation errors\n        }\n      } else if (contactData.mode === 'select' && contactData.selectedContactIds.length > 0) {\n        // Update existing contacts to associate with this organization\n        const { error: updateError } = await supabase\n          .from('contacts')\n          .update({ organization_id: organization.id })\n          .in('id', contactData.selectedContactIds)\n\n        if (updateError) {\n          console.warn('Failed to associate some contacts:', updateError.message)\n          // Don't fail the entire operation for contact association errors\n        }\n      }\n\n      // Clear cache and refresh list\n      clearCache()\n      await fetchOrganizations({ resetList: true })\n\n      // Record successful user action\n      console.log('Organization with contacts created successfully', {\n        organizationName: organizationData.name,\n        organizationIndustry: organizationData.industry,\n        contactMode: contactData.mode,\n        contactCount: contactData.mode === 'create' \n          ? contactData.newContacts.length \n          : contactData.selectedContactIds.length\n      })\n\n      return organization\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create organization with contacts'\n      setError('creating', message)\n\n      console.error('Failed to create organization with contacts', message, {\n        organizationData,\n        contactData\n      })\n\n      return null\n    } finally {\n      loading.creating = false\n    }\n  }\n\n  /**\n   * Enhanced creation method for redesigned form - Stage 3.1\n   */\n  const createOrganizationWithEnhancedForm = async (\n    formData: EnhancedOrganizationCreateForm\n  ): Promise<{ success: boolean; data?: Organization; error?: string }> => {\n    try {\n      loading.creating = true\n      clearError('creating')\n\n      // Transform priority letter to lead_score and filter out non-database fields\n      const { priority_letter, ...organizationData } = formData\n      \n      // Clean up the data for database insertion\n      const transformedData: OrganizationInsert = {\n        ...organizationData,\n        lead_score: priorityLetterToScore(priority_letter),\n        status: getAutoStatus(formData) as any, // Cast to allow enhanced status values\n        // Ensure tags is properly formatted for JSON field\n        tags: organizationData.tags ? organizationData.tags.filter(tag => tag !== undefined) : null,\n        // Ensure custom_fields is properly typed\n        custom_fields: organizationData.custom_fields as any,\n        // Convert Date objects to ISO strings for database\n        last_contact_date: organizationData.last_contact_date instanceof Date \n          ? organizationData.last_contact_date.toISOString() \n          : organizationData.last_contact_date,\n        next_follow_up_date: organizationData.next_follow_up_date instanceof Date \n          ? organizationData.next_follow_up_date.toISOString() \n          : organizationData.next_follow_up_date\n      }\n\n      // Create organization\n      const { data: orgData, error: orgError } = await supabase\n        .from('organizations')\n        .insert(transformedData)\n        .select()\n        .single()\n\n      if (orgError) throw orgError\n\n      // Create contact relationships if specified\n      if (formData.assigned_contacts?.length && orgData) {\n        await createContactRelationships(orgData.id, formData.assigned_contacts)\n      }\n\n      // Refresh organization list\n      clearCache()\n      await fetchOrganizations({ resetList: true })\n\n      console.log('Enhanced organization created successfully', {\n        organizationName: formData.name,\n        priority: formData.priority_letter,\n        leadScore: transformedData.lead_score,\n        isPrincipal: formData.custom_fields?.is_principal,\n        isDistributor: formData.custom_fields?.is_distributor,\n        contactCount: formData.assigned_contacts?.length || 0\n      })\n\n      return { success: true, data: orgData }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create organization'\n      setError('creating', message)\n      return { success: false, error: message }\n    } finally {\n      loading.creating = false\n    }\n  }\n\n  // Helper methods for enhanced form\n  const getAutoStatus = (formData: EnhancedOrganizationCreateForm): string => {\n    if (formData.custom_fields?.is_principal) return 'Principal'\n    if (formData.custom_fields?.is_distributor) return 'Distributor'\n    return formData.status\n  }\n\n  const createContactRelationships = async (organizationId: string, contactIds: string[]) => {\n    // This would create entries in organization_contacts junction table when implemented\n    // For now, update existing contacts table with organization_id (legacy approach)\n    try {\n      const { error } = await supabase\n        .from('contacts')\n        .update({ organization_id: organizationId })\n        .in('id', contactIds)\n\n      if (error) throw error\n    } catch (error) {\n      console.warn('Failed to create contact relationships:', error)\n      throw error\n    }\n  }\n\n  // ===============================\n  // ENHANCED HELPER METHODS - Stage 4.1\n  // ===============================\n\n  /**\n   * Convert priority letter (A/B/C/D) to lead score value\n   */\n  const convertPriorityLetterToScore = (letter: 'A' | 'B' | 'C' | 'D'): number => {\n    return priorityLetterToScore(letter)\n  }\n\n  /**\n   * Convert lead score value to priority letter (A/B/C/D)\n   */\n  const convertScoreToPriorityLetter = (score: number | null): 'A' | 'B' | 'C' | 'D' => {\n    return scoreToPriorityLetter(score)\n  }\n  \n  /**\n   * Update existing organization\n   */\n  const updateOrganization = async (id: string, updates: OrganizationUpdate): Promise<Organization | null> => {\n    try {\n      loading.updating = true\n      clearError('updating')\n      \n      const { data, error } = await supabase\n        .from('organizations')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Update current organization if it's the one being updated\n      if (currentOrganization.value?.id === id) {\n        await fetchOrganization(id)\n      }\n      \n      // Clear cache and refresh list\n      clearCache()\n      await fetchOrganizations({ resetList: true })\n      \n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to update organization'\n      setError('updating', message)\n      return null\n    } finally {\n      loading.updating = false\n    }\n  }\n\n  /**\n   * Update existing organization with contact associations\n   */\n  const updateOrganizationWithContacts = async (\n    id: string,\n    updates: OrganizationUpdate,\n    contactData: {\n      mode: 'select' | 'create'\n      selectedContactIds: string[]\n      newContacts: Array<{\n        first_name: string\n        last_name: string\n        email: string\n        phone?: string\n        title?: string\n        department?: string\n      }>\n    }\n  ): Promise<Organization | null> => {\n    try {\n      loading.updating = true\n      clearError('updating')\n\n      // Update the organization first\n      const { data: organization, error: orgError } = await supabase\n        .from('organizations')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (orgError) {\n        throw new Error(orgError.message)\n      }\n\n      // Handle contacts based on mode\n      if (contactData.mode === 'create' && contactData.newContacts.length > 0) {\n        // Create new contacts and associate with organization\n        const contactInserts = contactData.newContacts.map(contact => ({\n          organization_id: id,\n          first_name: contact.first_name,\n          last_name: contact.last_name,\n          email: contact.email,\n          phone: contact.phone || null,\n          position: contact.title || 'Unknown', // Map title to position\n          purchase_influence: 'Unknown' as 'High' | 'Medium' | 'Low' | 'Unknown',\n          decision_authority: 'End User' as 'Decision Maker' | 'Influencer' | 'End User' | 'Gatekeeper',\n          department: contact.department || null\n        }))\n\n        const { error: contactError } = await supabase\n          .from('contacts')\n          .insert(contactInserts)\n\n        if (contactError) {\n          console.warn('Failed to create some contacts:', contactError.message)\n          // Don't fail the entire operation for contact creation errors\n        }\n      } else if (contactData.mode === 'select' && contactData.selectedContactIds.length > 0) {\n        // Update existing contacts to associate with this organization\n        const { error: updateError } = await supabase\n          .from('contacts')\n          .update({ organization_id: id })\n          .in('id', contactData.selectedContactIds)\n\n        if (updateError) {\n          console.warn('Failed to associate some contacts:', updateError.message)\n          // Don't fail the entire operation for contact association errors\n        }\n      }\n\n      // Update current organization if it's the one being updated\n      if (currentOrganization.value?.id === id) {\n        await fetchOrganization(id)\n      }\n\n      // Clear cache and refresh list\n      clearCache()\n      await fetchOrganizations({ resetList: true })\n\n      // Record successful user action\n      console.log('Organization with contacts updated successfully', {\n        organizationId: id,\n        contactMode: contactData.mode,\n        contactCount: contactData.mode === 'create' \n          ? contactData.newContacts.length \n          : contactData.selectedContactIds.length\n      })\n\n      return organization\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to update organization with contacts'\n      setError('updating', message)\n      return null\n    } finally {\n      loading.updating = false\n    }\n  }\n  \n  /**\n   * Delete organization\n   */\n  const deleteOrganization = async (id: string): Promise<boolean> => {\n    try {\n      loading.deleting = true\n      clearError('deleting')\n      \n      const { error } = await supabase\n        .from('organizations')\n        .delete()\n        .eq('id', id)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Remove from local state\n      organizations.value = organizations.value.filter(org => org.id !== id)\n      \n      // Clear current organization if it was deleted\n      if (currentOrganization.value?.id === id) {\n        currentOrganization.value = null\n      }\n      \n      // Clear cache\n      clearCache()\n      \n      return true\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to delete organization'\n      setError('deleting', message)\n      return false\n    } finally {\n      loading.deleting = false\n    }\n  }\n  \n  // ===============================\n  // SEARCH AND FILTERING\n  // ===============================\n  \n  /**\n   * Search organizations\n   */\n  const searchOrganizations = async (query: string) => {\n    searchQuery.value = query\n    pagination.value.page = 1 // Reset to first page on new search\n    await fetchOrganizations({ search: query, resetList: true })\n  }\n  \n  /**\n   * Clear search and show all organizations\n   */\n  const clearSearch = async () => {\n    searchQuery.value = ''\n    pagination.value.page = 1\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  /**\n   * Apply filters\n   */\n  const applyFilters = async (filters: Partial<OrganizationFilters>) => {\n    appliedFilters.value = { ...appliedFilters.value, ...filters }\n    pagination.value.page = 1 // Reset to first page\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  /**\n   * Clear all filters\n   */\n  const clearFilters = async () => {\n    appliedFilters.value = {}\n    pagination.value.page = 1\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  /**\n   * Change sorting\n   */\n  const setSorting = async (field: OrganizationSortField, order: 'asc' | 'desc') => {\n    sortConfig.value = { field, order }\n    pagination.value.page = 1 // Reset to first page on sort change\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  // ===============================\n  // PAGINATION\n  // ===============================\n  \n  /**\n   * Change page\n   */\n  const setPage = async (page: number) => {\n    if (page >= 1 && page <= pagination.value.totalPages) {\n      pagination.value.page = page\n      await fetchOrganizations()\n    }\n  }\n  \n  /**\n   * Go to next page\n   */\n  const nextPage = async () => {\n    if (pagination.value.hasNext) {\n      await setPage(pagination.value.page + 1)\n    }\n  }\n  \n  /**\n   * Go to previous page\n   */\n  const previousPage = async () => {\n    if (pagination.value.hasPrevious) {\n      await setPage(pagination.value.page - 1)\n    }\n  }\n  \n  // ===============================\n  // ANALYTICS AND METRICS\n  // ===============================\n  \n  /**\n   * Fetch dashboard metrics\n   */\n  const fetchDashboardMetrics = async (): Promise<OrganizationMetrics | null> => {\n    try {\n      loading.metrics = true\n      clearError('metrics')\n      \n      // Check cache first\n      const cacheKey = 'dashboard_metrics'\n      const cached = getCachedData<OrganizationMetrics>(cacheKey)\n      if (cached) {\n        dashboardMetrics.value = cached\n        return cached\n      }\n      \n      // Fetch metrics in parallel\n      const [totalResult, activeResult, prospectResult, customerResult, partnerResult, revenueResult] = await Promise.all([\n        supabase.from('organizations').select('id', { count: 'exact', head: true }),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Active'),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Prospect'),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Customer'),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Partner'),\n        supabase.from('organizations').select('annual_revenue, lead_score', { count: 'exact' }).not('annual_revenue', 'is', null)\n      ])\n      \n      // Calculate date ranges\n      const now = new Date()\n      const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1)\n      \n      const monthResult = await supabase.from('organizations').select('id', { count: 'exact', head: true }).gte('created_at', firstDayOfMonth.toISOString())\n      \n      // Calculate metrics\n      const totalRevenue = revenueResult.data?.reduce((sum, org) => sum + (org.annual_revenue || 0), 0) || 0\n      const averageLeadScore = revenueResult.data?.length \n        ? revenueResult.data.reduce((sum, org) => sum + (org.lead_score || 0), 0) / revenueResult.data.length\n        : 0\n      \n      const metrics: OrganizationMetrics = {\n        totalOrganizations: totalResult.count || 0,\n        activeOrganizations: activeResult.count || 0,\n        prospects: prospectResult.count || 0,\n        customers: customerResult.count || 0,\n        partners: partnerResult.count || 0,\n        totalRevenue: totalRevenue,\n        averageLeadScore: averageLeadScore,\n        monthlyGrowth: monthResult.count || 0,\n        industryDistribution: [], // Will be populated by industry analytics\n        statusDistribution: [], // Will be populated by status analytics\n        recentActivity: [] // Will be populated by activity analytics\n      }\n      \n      dashboardMetrics.value = metrics\n      \n      // Cache the result\n      setCacheData(cacheKey, metrics, 600000) // 10 minutes cache\n      \n      return metrics\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch dashboard metrics'\n      setError('metrics', message)\n      return null\n    } finally {\n      loading.metrics = false\n    }\n  }\n  \n  /**\n   * Fetch organization analytics data\n   */\n  const fetchAnalytics = async (): Promise<OrganizationSummaryAnalytics[] | null> => {\n    try {\n      loading.analytics = true\n      clearError('analytics')\n      \n      const { data, error } = await supabase\n        .from('organization_summary_analytics')\n        .select('*')\n        .order('lead_score', { ascending: false })\n        .limit(50)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      analyticsData.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch analytics'\n      setError('analytics', message)\n      return null\n    } finally {\n      loading.analytics = false\n    }\n  }\n  \n  /**\n   * Fetch performance data\n   */\n  const fetchPerformanceData = async (): Promise<MonthlyOrganizationPerformance[] | null> => {\n    try {\n      loading.performance = true\n      clearError('performance')\n      \n      const { data, error } = await supabase\n        .from('monthly_organization_performance')\n        .select('*')\n        .order('performance_month', { ascending: false })\n        .limit(12)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      performanceData.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch performance data'\n      setError('performance', message)\n      return null\n    } finally {\n      loading.performance = false\n    }\n  }\n  \n  /**\n   * Fetch lead scoring data\n   */\n  const fetchLeadScoringData = async (): Promise<OrganizationLeadScoring[] | null> => {\n    try {\n      loading.leadScoring = true\n      clearError('leadScoring')\n      \n      const { data, error } = await supabase\n        .from('organization_lead_scoring')\n        .select('*')\n        .order('lead_score', { ascending: false })\n        .limit(100)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      leadScoringData.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch lead scoring data'\n      setError('leadScoring', message)\n      return null\n    } finally {\n      loading.leadScoring = false\n    }\n  }\n  \n  // ===============================\n  // INTERACTION MANAGEMENT\n  // ===============================\n  \n  /**\n   * Fetch interactions for current organization\n   */\n  const fetchInteractions = async (organizationId?: string): Promise<OrganizationInteraction[] | null> => {\n    try {\n      loading.interactions = true\n      clearError('interactions')\n      \n      const orgId = organizationId || currentOrganization.value?.id\n      if (!orgId) {\n        throw new Error('No organization ID provided')\n      }\n      \n      const { data, error } = await supabase\n        .from('organization_interactions')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('interaction_date', { ascending: false })\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      interactions.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch interactions'\n      setError('interactions', message)\n      return null\n    } finally {\n      loading.interactions = false\n    }\n  }\n  \n  /**\n   * Create new interaction\n   */\n  const createInteraction = async (interactionData: OrganizationInteractionInsert): Promise<OrganizationInteraction | null> => {\n    try {\n      const { data, error } = await supabase\n        .from('organization_interactions')\n        .insert(interactionData)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Refresh interactions\n      await fetchInteractions(interactionData.organization_id)\n      \n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create interaction'\n      setError('interactions', message)\n      return null\n    }\n  }\n  \n  // ===============================\n  // DOCUMENT MANAGEMENT\n  // ===============================\n  \n  /**\n   * Fetch documents for current organization\n   */\n  const fetchDocuments = async (organizationId?: string): Promise<OrganizationDocument[] | null> => {\n    try {\n      loading.documents = true\n      clearError('documents')\n      \n      const orgId = organizationId || currentOrganization.value?.id\n      if (!orgId) {\n        throw new Error('No organization ID provided')\n      }\n      \n      const { data, error } = await supabase\n        .from('organization_documents')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false })\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      documents.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch documents'\n      setError('documents', message)\n      return null\n    } finally {\n      loading.documents = false\n    }\n  }\n  \n  /**\n   * Create new document\n   */\n  const createDocument = async (documentData: OrganizationDocumentInsert): Promise<OrganizationDocument | null> => {\n    try {\n      const { data, error } = await supabase\n        .from('organization_documents')\n        .insert(documentData)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Refresh documents\n      await fetchDocuments(documentData.organization_id)\n      \n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create document'\n      setError('documents', message)\n      return null\n    }\n  }\n  \n  // ===============================\n  // BULK OPERATIONS\n  // ===============================\n  \n  /**\n   * Perform bulk operations on multiple organizations\n   */\n  const performBulkOperation = async (operation: BulkOrganizationOperation): Promise<BulkOperationResult> => {\n    try {\n      loading.bulkOperations = true\n      clearError('bulkOperations')\n      \n      let processedCount = 0\n      let errorCount = 0\n      const errors: Array<{ id: string; error: string }> = []\n      \n      for (const orgId of operation.organizationIds) {\n        try {\n          switch (operation.type) {\n            case 'update_status':\n              if (operation.data?.status) {\n                await updateOrganization(orgId, { status: operation.data.status })\n                processedCount++\n              }\n              break\n              \n            case 'delete':\n              await deleteOrganization(orgId)\n              processedCount++\n              break\n              \n            case 'add_tags':\n              if (operation.data?.tags) {\n                const org = organizations.value.find(o => o.id === orgId)\n                if (org) {\n                  await updateOrganization(orgId, { tags: operation.data.tags })\n                  processedCount++\n                }\n              }\n              break\n              \n            default:\n              throw new Error(`Unsupported bulk operation: ${operation.type}`)\n          }\n        } catch (error) {\n          errorCount++\n          errors.push({\n            id: orgId,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }\n      }\n      \n      return {\n        operation,\n        success: errorCount === 0,\n        total: operation.organizationIds.length,\n        successful: processedCount,\n        failed: errorCount,\n        errors\n      }\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to perform bulk operation'\n      setError('bulkOperations', message)\n      return {\n        operation,\n        success: false,\n        total: operation.organizationIds.length,\n        successful: 0,\n        failed: operation.organizationIds.length,\n        errors: operation.organizationIds.map(id => ({ id: id, error: message }))\n      }\n    } finally {\n      loading.bulkOperations = false\n    }\n  }\n  \n  // ===============================\n  // UTILITY FUNCTIONS\n  // ===============================\n  \n  /**\n   * Get organization by ID from local state\n   */\n  const getOrganizationById = (id: string): OrganizationListItem | undefined => {\n    return organizations.value.find(org => org.id === id)\n  }\n  \n  /**\n   * Check if organization exists in local state\n   */\n  const organizationExists = (id: string): boolean => {\n    return organizations.value.some(org => org.id === id)\n  }\n  \n  /**\n   * Get engagement status based on interaction count\n   */\n  \n  /**\n   * Refresh all data\n   */\n  const refreshAllData = async () => {\n    clearCache()\n    await Promise.all([\n      fetchOrganizations({ resetList: true }),\n      fetchDashboardMetrics(),\n      fetchAnalytics()\n    ])\n    lastRefreshed.value = new Date()\n  }\n  \n  /**\n   * Reset store to initial state\n   */\n  const resetStore = () => {\n    organizations.value = []\n    currentOrganization.value = null\n    analyticsData.value = []\n    performanceData.value = []\n    leadScoringData.value = []\n    dashboardMetrics.value = null\n    interactions.value = []\n    documents.value = []\n    \n    searchQuery.value = ''\n    appliedFilters.value = {}\n    sortConfig.value = { field: 'name', order: 'asc' }\n    \n    pagination.value = {\n      page: 1,\n      limit: 20,\n      total: 0,\n      totalPages: 0,\n      hasNext: false,\n      hasPrevious: false\n    }\n    \n    Object.keys(loading).forEach(key => {\n      loading[key as keyof typeof loading] = false\n    })\n    \n    clearErrors()\n    clearCache()\n    lastRefreshed.value = null\n  }\n  \n  // ===============================\n  // RETURN STATEMENT\n  // ===============================\n  \n  return {\n    // State\n    organizations,\n    currentOrganization,\n    analyticsData,\n    performanceData,\n    leadScoringData,\n    dashboardMetrics,\n    interactions,\n    documents,\n    searchQuery,\n    appliedFilters,\n    sortConfig,\n    pagination,\n    lastRefreshed,\n    \n    // Loading states\n    loading,\n    isLoading,\n    \n    // Error states\n    errors,\n    hasErrors,\n    currentError,\n    \n    // Computed\n    hasOrganizations,\n    totalOrganizations,\n    organizationStats,\n    topPerformingOrganizations,\n    organizationsByStatus,\n    recentOrganizations,\n    \n    // Enhanced form redesign computed properties\n    priorityOptions,\n    foodBeverageSegments,\n    distributorOrganizations,\n    principalOrganizations,\n    \n    // Core CRUD operations\n    fetchOrganizations,\n    fetchOrganization,\n    createOrganization,\n    createOrganizationWithContacts,\n    createOrganizationWithEnhancedForm,\n    updateOrganization,\n    updateOrganizationWithContacts,\n    deleteOrganization,\n    \n    // Search and filtering\n    searchOrganizations,\n    clearSearch,\n    applyFilters,\n    clearFilters,\n    setSorting,\n    \n    // Pagination\n    setPage,\n    nextPage,\n    previousPage,\n    \n    // Analytics and metrics\n    fetchDashboardMetrics,\n    fetchAnalytics,\n    fetchPerformanceData,\n    fetchLeadScoringData,\n    \n    // Interaction management\n    fetchInteractions,\n    createInteraction,\n    \n    // Document management\n    fetchDocuments,\n    createDocument,\n    \n    // Bulk operations\n    performBulkOperation,\n    \n    // Utility methods\n    getOrganizationById,\n    organizationExists,\n    refreshAllData,\n    resetStore,\n    clearErrors,\n    clearError,\n    clearCache,\n    \n    // Enhanced helper methods - Stage 4.1\n    convertPriorityLetterToScore,\n    convertScoreToPriorityLetter,\n    getAutoStatus,\n    createContactRelationships\n  }\n})"],"names":["organizationSchema","yup.object","yup.string","yup.mixed","yup.number","yup.array","yup.date","yup.boolean","createOrganizationSchema","organizationInteractionSchema","value","organizationDocumentSchema","organizationAnalyticsSchema","period_start","organizationCreateSchema","PRIORITY_OPTIONS","priorityLetterToScore","letter","scoreToPriorityLetter","score","useOrganizationStore","defineStore","organizations","ref","currentOrganization","analyticsData","performanceData","leadScoringData","dashboardMetrics","interactions","documents","loading","reactive","errors","searchQuery","appliedFilters","sortConfig","pagination","lastRefreshed","dataCache","hasOrganizations","computed","totalOrganizations","isLoading","state","hasErrors","error","currentError","firstError","key","organizationStats","topPerformingOrganizations","org","a","b","organizationsByStatus","acc","status","recentOrganizations","thirtyDaysAgo","priorityOptions","foodBeverageSegments","distributorOrganizations","orgWithFields","principalOrganizations","clearErrors","clearError","type","setError","message","isCacheValid","cached","getCachedData","setCacheData","data","ttlMs","clearCache","k","fetchOrganizations","options","cacheKey","query","supabase","searchTerm","ascending","offset","count","transformedData","item","response","fetchOrganization","id","orgData","orgError","contactsResult","interactionsResult","documentsResult","detailData","_a","_b","_c","interaction","c","createOrganization","organizationData","createOrganizationWithContacts","contactData","organization","contactInserts","contact","contactError","updateError","createOrganizationWithEnhancedForm","formData","priority_letter","getAutoStatus","tag","createContactRelationships","_d","organizationId","contactIds","convertPriorityLetterToScore","convertScoreToPriorityLetter","updateOrganization","updates","updateOrganizationWithContacts","deleteOrganization","searchOrganizations","clearSearch","applyFilters","filters","clearFilters","setSorting","field","order","setPage","page","nextPage","previousPage","fetchDashboardMetrics","totalResult","activeResult","prospectResult","customerResult","partnerResult","revenueResult","now","firstDayOfMonth","monthResult","totalRevenue","sum","averageLeadScore","metrics","fetchAnalytics","fetchPerformanceData","fetchLeadScoringData","fetchInteractions","orgId","createInteraction","interactionData","fetchDocuments","documentData","operation","processedCount","errorCount","o"],"mappings":"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"}
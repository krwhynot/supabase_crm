{"version":3,"file":"principalStore-JxlbTJes.js","sources":["../../src/stores/principalStore.ts"],"sourcesContent":["/**\n * Principal Store - Relationship-Focused State Management\n * Manages principal data with organization relationships and product associations\n * Optimized for opportunity form integration and multi-principal operations  \n */\n\nimport { defineStore } from 'pinia'\nimport { ref, computed, reactive } from 'vue'\nimport { organizationsApi } from '@/services/organizationsApi'\nimport type {\n  Organization\n} from '@/types/organizations'\nimport type { ApiResponse } from '@/services/organizationsApi'\n\n/**\n * Principal-specific interfaces\n */\nexport interface Principal {\n  id: string\n  name: string\n  organization_id: string\n  organization_name: string\n  organization_type: string | null\n  is_active: boolean\n  contact_count: number\n  product_count: number\n  opportunity_count: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface PrincipalOption {\n  id: string\n  name: string\n  organization_id: string\n  organization_name: string\n  organization_type: string | null\n  available_products: string[] // Product IDs available to this principal\n}\n\nexport interface PrincipalFilters {\n  organization_ids?: string[]\n  organization_types?: string[]\n  has_products?: boolean\n  is_active?: boolean\n  search?: string\n}\n\nexport interface PrincipalStats {\n  total_principals: number\n  active_principals: number\n  principals_with_products: number\n  principals_with_opportunities: number\n  average_products_per_principal: number\n  top_organizations_by_principals: Array<{\n    organization_id: string\n    organization_name: string\n    principal_count: number\n  }>\n}\n\n/**\n * Store state interface for better type safety\n */\ninterface PrincipalStoreState {\n  // Data collections\n  principals: Principal[]\n  selectedPrincipal: Principal | null\n  principalOptions: PrincipalOption[] // For opportunity forms\n  \n  // UI state\n  loading: boolean\n  creating: boolean\n  updating: boolean\n  deleting: boolean\n  \n  // Error handling\n  error: string | null\n  \n  // Search and filtering\n  searchTerm: string\n  \n  // Analytics\n  stats: PrincipalStats | null\n  \n  // Organization context\n  selectedOrganizationId: string | null\n}\n\nexport const usePrincipalStore = defineStore('principal', () => {\n  // ===============================\n  // STATE MANAGEMENT\n  // ===============================\n  \n  const state = reactive<PrincipalStoreState>({\n    // Data collections\n    principals: [],\n    selectedPrincipal: null,\n    principalOptions: [],\n    \n    // UI state\n    loading: false,\n    creating: false,\n    updating: false,\n    deleting: false,\n    \n    // Error handling\n    error: null,\n    \n    // Search and filtering\n    searchTerm: '',\n    \n    // Analytics\n    stats: null,\n    \n    // Organization context\n    selectedOrganizationId: null\n  })\n\n  // Active filters\n  const activeFilters = ref<PrincipalFilters>({})\n\n  // ===============================\n  // COMPUTED PROPERTIES\n  // ===============================\n  \n  const isLoading = computed(() => \n    state.loading || state.creating || state.updating || state.deleting\n  )\n  \n  const hasError = computed(() => !!state.error)\n  \n  const principalCount = computed(() => state.principals.length)\n  \n  const activePrincipalCount = computed(() => \n    state.principals.filter(p => p.is_active).length\n  )\n  \n  const getPrincipalById = computed(() => {\n    return (id: string) => state.principals.find(p => p.id === id)\n  })\n  \n  const getPrincipalsByOrganization = computed(() => {\n    return (organizationId: string) => \n      state.principals.filter(p => p.organization_id === organizationId)\n  })\n  \n  const principalsWithProducts = computed(() => \n    state.principals.filter(p => p.product_count > 0)\n  )\n  \n  const principalsWithOpportunities = computed(() => \n    state.principals.filter(p => p.opportunity_count > 0)\n  )\n  \n  const getOrganizationsWithPrincipals = computed(() => {\n    const orgMap = new Map<string, { \n      id: string; \n      name: string; \n      type: string | null; \n      principal_count: number \n    }>()\n    \n    state.principals.forEach(principal => {\n      const existing = orgMap.get(principal.organization_id)\n      if (existing) {\n        existing.principal_count++\n      } else {\n        orgMap.set(principal.organization_id, {\n          id: principal.organization_id,\n          name: principal.organization_name,\n          type: principal.organization_type,\n          principal_count: 1\n        })\n      }\n    })\n    \n    return Array.from(orgMap.values())\n  })\n\n  const principalsByOrganizationType = computed(() => {\n    const typeMap = new Map<string, Principal[]>()\n    \n    state.principals.forEach(principal => {\n      const type = principal.organization_type || 'Unknown'\n      if (!typeMap.has(type)) {\n        typeMap.set(type, [])\n      }\n      typeMap.get(type)!.push(principal)\n    })\n    \n    return typeMap\n  })\n\n  // ===============================\n  // ACTIONS - CRUD OPERATIONS\n  // ===============================\n  \n  /**\n   * Fetch all principals from organizations (derived from organizations table)\n   */\n  const fetchPrincipals = async (filters: PrincipalFilters = {}): Promise<void> => {\n    state.loading = true\n    state.error = null\n    \n    try {\n      // In this implementation, principals are derived from organizations\n      // that have is_principal flag set to true in custom_fields\n      const response = await organizationsApi.getOrganizations()\n      \n      if (response.success && response.data) {\n        // Transform organizations to principals\n        state.principals = response.data.map(org => ({\n          id: org.id, // Principal ID is same as organization ID\n          name: org.name,\n          organization_id: org.id,\n          organization_name: org.name,\n          organization_type: org.type,\n          is_active: true,\n          contact_count: 0,\n          product_count: 0,\n          opportunity_count: 0,\n          created_at: org.created_at || new Date().toISOString(),\n          updated_at: org.updated_at || new Date().toISOString()\n        }))\n        \n        // Apply filters\n        applyFiltersToState(filters)\n      } else {\n        state.error = response.error || 'Failed to fetch principals'\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n    } finally {\n      state.loading = false\n    }\n  }\n  \n  /**\n   * Fetch principal options for opportunity forms (simplified data)\n   */\n  const fetchPrincipalOptions = async (organizationId?: string): Promise<void> => {\n    state.loading = true\n    state.error = null\n    \n    try {\n      let response: ApiResponse<Organization[]>\n      \n      if (organizationId) {\n        // Fetch principals for specific organization\n        response = await organizationsApi.getOrganizations()\n      } else {\n        // Fetch all organizations that have principals\n        response = await organizationsApi.getOrganizations()\n      }\n      \n      if (response.success && response.data) {\n        state.principalOptions = response.data.map(org => ({\n          id: org.id,\n          name: org.name,\n          organization_id: org.id,\n          organization_name: org.name,\n          organization_type: org.type,\n          available_products: [] // Available products for this organization\n        }))\n      } else {\n        state.error = response.error || 'Failed to fetch principal options'\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n    } finally {\n      state.loading = false\n    }\n  }\n  \n  /**\n   * Fetch principals for a specific organization\n   */\n  const fetchPrincipalsByOrganization = async (organizationId: string): Promise<void> => {\n    state.loading = true\n    state.error = null\n    state.selectedOrganizationId = organizationId\n    \n    try {\n      const response = await organizationsApi.getOrganizations()\n      \n      if (response.success && response.data) {\n        // Transform organization principals to principal format\n        state.principals = response.data.map(org => ({\n          id: org.id,\n          name: org.name,\n          organization_id: organizationId,\n          organization_name: org.name,\n          organization_type: org.type,\n          is_active: true,\n          contact_count: 0,\n          product_count: 0,\n          opportunity_count: 0,\n          created_at: org.created_at || new Date().toISOString(),\n          updated_at: org.updated_at || new Date().toISOString()\n        }))\n      } else {\n        state.error = response.error || 'Failed to fetch principals for organization'\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n    } finally {\n      state.loading = false\n    }\n  }\n  \n  /**\n   * Fetch a single principal by ID\n   */\n  const fetchPrincipalById = async (id: string): Promise<void> => {\n    state.loading = true\n    state.error = null\n    \n    try {\n      // Since principals are organizations, use organization API\n      const response = await organizationsApi.getOrganization(id)\n      \n      if (response.success && response.data) {\n        state.selectedPrincipal = {\n          id: response.data.id,\n          name: response.data.name,\n          organization_id: response.data.id,\n          organization_name: response.data.name,\n          organization_type: response.data.type,\n          is_active: true,\n          contact_count: 0,\n          product_count: 0,\n          opportunity_count: 0,\n          created_at: response.data.created_at || new Date().toISOString(),\n          updated_at: response.data.updated_at || new Date().toISOString()\n        }\n      } else {\n        state.error = response.error || 'Failed to fetch principal'\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n    } finally {\n      state.loading = false\n    }\n  }\n\n  // ===============================\n  // ACTIONS - SEARCH & ANALYTICS\n  // ===============================\n  \n  /**\n   * Search principals by name or organization\n   */\n  const searchPrincipals = async (searchTerm: string, filters: PrincipalFilters = {}): Promise<void> => {\n    state.loading = true\n    state.error = null\n    state.searchTerm = searchTerm\n    \n    try {\n      // Use organization search since principals are organizations\n      const response = await organizationsApi.getOrganizations()\n      \n      if (response.success && response.data) {\n        // Filter results to only include principals and transform\n        const principalResults = response.data\n          .filter(org => {\n            // Check if organization has is_principal flag\n            const customFields = (org as any).custom_fields\n            return customFields && customFields.is_principal === true\n          })\n          .map(org => ({\n            id: org.id,\n            name: org.name,\n            organization_id: org.id,\n            organization_name: org.name,\n            organization_type: (org as any).type || null,\n            is_active: true,\n            contact_count: 0,\n            product_count: 0,\n            opportunity_count: 0,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }))\n        \n        state.principals = principalResults\n        applyFiltersToState(filters)\n      } else {\n        state.error = response.error || 'Failed to search principals'\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n    } finally {\n      state.loading = false\n    }\n  }\n  \n  /**\n   * Fetch principal statistics for dashboard\n   */\n  const fetchStats = async (): Promise<void> => {\n    state.loading = true\n    state.error = null\n    \n    try {\n      // Calculate stats from current principals data\n      // In a full implementation, this would be a dedicated API endpoint\n      const totalPrincipals = state.principals.length\n      const activePrincipals = state.principals.filter(p => p.is_active).length\n      const principalsWithProducts = state.principals.filter(p => p.product_count > 0).length\n      const principalsWithOpportunities = state.principals.filter(p => p.opportunity_count > 0).length\n      \n      const avgProducts = totalPrincipals > 0 \n        ? state.principals.reduce((sum, p) => sum + p.product_count, 0) / totalPrincipals \n        : 0\n      \n      // Group by organization for top organizations\n      const orgCounts = new Map<string, { name: string; count: number }>()\n      state.principals.forEach(principal => {\n        const existing = orgCounts.get(principal.organization_id)\n        if (existing) {\n          existing.count++\n        } else {\n          orgCounts.set(principal.organization_id, {\n            name: principal.organization_name,\n            count: 1\n          })\n        }\n      })\n      \n      const topOrganizations = Array.from(orgCounts.entries())\n        .map(([id, data]) => ({\n          organization_id: id,\n          organization_name: data.name,\n          principal_count: data.count\n        }))\n        .sort((a, b) => b.principal_count - a.principal_count)\n        .slice(0, 10)\n      \n      state.stats = {\n        total_principals: totalPrincipals,\n        active_principals: activePrincipals,\n        principals_with_products: principalsWithProducts,\n        principals_with_opportunities: principalsWithOpportunities,\n        average_products_per_principal: avgProducts,\n        top_organizations_by_principals: topOrganizations\n      }\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Unexpected error occurred'\n    } finally {\n      state.loading = false\n    }\n  }\n\n  // ===============================\n  // ACTIONS - RELATIONSHIP MANAGEMENT\n  // ===============================\n  \n  /**\n   * Get available products for specific principals\n   */\n  const getAvailableProductsForPrincipals = async (principalIds: string[]): Promise<string[]> => {\n    try {\n      // This would typically call a dedicated API endpoint\n      // For now, return mock data based on principal relationships\n      const availableProducts: string[] = []\n      \n      for (const principalId of principalIds) {\n        const principal = state.principalOptions.find(p => p.id === principalId)\n        if (principal) {\n          availableProducts.push(...principal.available_products)\n        }\n      }\n      \n      // Return unique product IDs\n      return [...new Set(availableProducts)]\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Failed to get available products'\n      return []\n    }\n  }\n  \n  /**\n   * Associate products with principals\n   */\n  const associateProductsWithPrincipals = async (\n    productIds: string[], \n    principalIds: string[]\n  ): Promise<boolean> => {\n    state.updating = true\n    state.error = null\n    \n    try {\n      // This would typically call a product-principal association API\n      // For now, simulate the operation\n      console.log('Associating products', productIds, 'with principals', principalIds)\n      \n      // Update local state to reflect the associations\n      principalIds.forEach(principalId => {\n        const principal = state.principals.find(p => p.id === principalId)\n        if (principal) {\n          principal.product_count += productIds.length\n        }\n        \n        const principalOption = state.principalOptions.find(p => p.id === principalId)\n        if (principalOption) {\n          principalOption.available_products = [\n            ...new Set([...principalOption.available_products, ...productIds])\n          ]\n        }\n      })\n      \n      return true\n    } catch (error) {\n      state.error = error instanceof Error ? error.message : 'Failed to associate products with principals'\n      return false\n    } finally {\n      state.updating = false\n    }\n  }\n\n  // ===============================\n  // ACTIONS - FILTERING & UTILITIES\n  // ===============================\n  \n  /**\n   * Apply filters to current principals data\n   */\n  const applyFiltersToState = (filters: PrincipalFilters): void => {\n    let filteredPrincipals = [...state.principals]\n    \n    if (filters.organization_ids && filters.organization_ids.length > 0) {\n      filteredPrincipals = filteredPrincipals.filter(p => \n        filters.organization_ids!.includes(p.organization_id)\n      )\n    }\n    \n    if (filters.organization_types && filters.organization_types.length > 0) {\n      filteredPrincipals = filteredPrincipals.filter(p => \n        p.organization_type && filters.organization_types!.includes(p.organization_type)\n      )\n    }\n    \n    if (filters.has_products !== undefined) {\n      filteredPrincipals = filteredPrincipals.filter(p => \n        filters.has_products ? p.product_count > 0 : p.product_count === 0\n      )\n    }\n    \n    if (filters.is_active !== undefined) {\n      filteredPrincipals = filteredPrincipals.filter(p => \n        p.is_active === filters.is_active\n      )\n    }\n    \n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase()\n      filteredPrincipals = filteredPrincipals.filter(p => \n        p.name.toLowerCase().includes(searchLower) ||\n        p.organization_name.toLowerCase().includes(searchLower)\n      )\n    }\n    \n    // Update active filters\n    activeFilters.value = filters\n  }\n  \n  /**\n   * Clear all error states\n   */\n  const clearError = (): void => {\n    state.error = null\n  }\n  \n  /**\n   * Clear selected principal\n   */\n  const clearSelectedPrincipal = (): void => {\n    state.selectedPrincipal = null\n  }\n  \n  /**\n   * Clear search results and filters\n   */\n  const clearSearch = (): void => {\n    state.searchTerm = ''\n    activeFilters.value = {}\n    state.selectedOrganizationId = null\n  }\n  \n  /**\n   * Refresh current data\n   */\n  const refresh = async (): Promise<void> => {\n    if (state.selectedOrganizationId) {\n      await fetchPrincipalsByOrganization(state.selectedOrganizationId)\n    } else {\n      await fetchPrincipals(activeFilters.value)\n    }\n  }\n\n  // ===============================\n  // RETURN STORE INTERFACE\n  // ===============================\n  \n  return {\n    // State\n    ...state,\n    activeFilters,\n    \n    // Computed\n    isLoading,\n    hasError,\n    principalCount,\n    activePrincipalCount,\n    getPrincipalById,\n    getPrincipalsByOrganization,\n    principalsWithProducts,\n    principalsWithOpportunities,\n    getOrganizationsWithPrincipals,\n    principalsByOrganizationType,\n    \n    // Actions - CRUD\n    fetchPrincipals,\n    fetchPrincipalOptions,\n    fetchPrincipalsByOrganization,\n    fetchPrincipalById,\n    \n    // Actions - Search & Analytics\n    searchPrincipals,\n    fetchStats,\n    \n    // Actions - Relationship Management\n    getAvailableProductsForPrincipals,\n    associateProductsWithPrincipals,\n    \n    // Actions - Utilities\n    clearError,\n    clearSelectedPrincipal,\n    clearSearch,\n    refresh\n  }\n})"],"names":["usePrincipalStore","defineStore","state","reactive","activeFilters","ref","isLoading","computed","hasError","principalCount","activePrincipalCount","p","getPrincipalById","id","getPrincipalsByOrganization","organizationId","principalsWithProducts","principalsWithOpportunities","getOrganizationsWithPrincipals","orgMap","principal","existing","principalsByOrganizationType","typeMap","type","fetchPrincipals","filters","response","organizationsApi","org","applyFiltersToState","error","fetchPrincipalOptions","fetchPrincipalsByOrganization","fetchPrincipalById","searchPrincipals","searchTerm","principalResults","customFields","fetchStats","totalPrincipals","activePrincipals","avgProducts","sum","orgCounts","topOrganizations","data","a","b","getAvailableProductsForPrincipals","principalIds","availableProducts","principalId","associateProductsWithPrincipals","productIds","principalOption","filteredPrincipals","searchLower"],"mappings":"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"}
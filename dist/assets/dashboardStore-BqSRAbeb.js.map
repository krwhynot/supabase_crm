{"version":3,"file":"dashboardStore-BqSRAbeb.js","sources":["../../src/stores/dashboardStore.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { useContactStore } from './contactStore'\n\n/**\n * Dashboard Store - Manages dashboard data and state\n * Follows established Pinia patterns with reactive state management\n */\nexport const useDashboardStore = defineStore('dashboard', () => {\n  // State\n  const isLoading = ref(false)\n  const errorMessage = ref('')\n  const lastRefreshed = ref<Date | null>(null)\n  \n  // Dashboard preferences\n  const preferences = ref({\n    weekFilterEnabled: false,\n    sidebarCollapsed: false,\n    refreshInterval: 300000, // 5 minutes in milliseconds\n    theme: 'light' as 'light' | 'dark'\n  })\n\n  // Widget visibility state\n  const widgetVisibility = ref({\n    stats: true,\n    quickActions: true,\n    recentActivity: true,\n    weeklyFilter: true\n  })\n\n  // Get contact store for data access\n  const contactStore = useContactStore()\n\n  // Computed properties\n  const dashboardStats = computed(() => ({\n    totalContacts: contactStore.totalCount,\n    recentContacts: Math.min(contactStore.totalCount, 5),\n    organizations: new Set(\n      contactStore.contacts\n        .map(c => c.organization_id)\n        .filter(Boolean)\n    ).size,\n    activeContacts: contactStore.contacts.filter(c => {\n      const updateDate = c.updated_at || c.created_at\n      return updateDate && new Date(updateDate).getTime() > Date.now() - (30 * 24 * 60 * 60 * 1000) // 30 days\n    }).length\n  }))\n\n  const recentActivity = computed(() => {\n    // Generate activity feed from recent contacts\n    return contactStore.contacts\n      .filter(contact => contact.created_at) // Ensure created_at exists\n      .map(contact => ({\n        id: contact.id,\n        action: 'Contact Added',\n        description: `${contact.first_name} ${contact.last_name} was added`,\n        timestamp: new Date(contact.created_at!), // Non-null assertion after filter\n        type: 'contact_created' as const\n      }))\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, 5) // Take only the 5 most recent after sorting\n  })\n\n  const isStale = computed(() => {\n    if (!lastRefreshed.value) return true\n    return Date.now() - lastRefreshed.value.getTime() > preferences.value.refreshInterval\n  })\n\n  // Actions\n  const clearError = () => {\n    errorMessage.value = ''\n  }\n\n  const setError = (message: string) => {\n    errorMessage.value = message\n    console.error('Dashboard Store Error:', message)\n  }\n\n  const refreshDashboard = async () => {\n    try {\n      isLoading.value = true\n      clearError()\n\n      // Refresh contact data which drives dashboard stats\n      await contactStore.fetchContacts()\n      \n      lastRefreshed.value = new Date()\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to refresh dashboard'\n      setError(message)\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const updatePreferences = (newPreferences: Partial<typeof preferences.value>) => {\n    preferences.value = { ...preferences.value, ...newPreferences }\n    localStorage.setItem('dashboard-preferences', JSON.stringify(preferences.value))\n  }\n\n  const updateWidgetVisibility = (widgetKey: keyof typeof widgetVisibility.value, visible: boolean) => {\n    widgetVisibility.value[widgetKey] = visible\n    localStorage.setItem('dashboard-widgets', JSON.stringify(widgetVisibility.value))\n  }\n\n  const toggleWeekFilter = () => {\n    updatePreferences({ weekFilterEnabled: !preferences.value.weekFilterEnabled })\n  }\n\n  const toggleSidebar = () => {\n    updatePreferences({ sidebarCollapsed: !preferences.value.sidebarCollapsed })\n  }\n\n  const initializeDashboard = () => {\n    // Restore preferences from localStorage\n    const savedPreferences = localStorage.getItem('dashboard-preferences')\n    if (savedPreferences) {\n      try {\n        const parsed = JSON.parse(savedPreferences)\n        preferences.value = { ...preferences.value, ...parsed }\n      } catch (error) {\n        console.warn('Failed to parse saved dashboard preferences:', error)\n      }\n    }\n\n    // Restore widget visibility from localStorage\n    const savedWidgets = localStorage.getItem('dashboard-widgets')\n    if (savedWidgets) {\n      try {\n        const parsed = JSON.parse(savedWidgets)\n        widgetVisibility.value = { ...widgetVisibility.value, ...parsed }\n      } catch (error) {\n        console.warn('Failed to parse saved widget visibility:', error)\n      }\n    }\n  }\n\n  const resetDashboard = () => {\n    isLoading.value = false\n    errorMessage.value = ''\n    lastRefreshed.value = null\n    preferences.value = {\n      weekFilterEnabled: false,\n      sidebarCollapsed: false,\n      refreshInterval: 300000,\n      theme: 'light'\n    }\n    widgetVisibility.value = {\n      stats: true,\n      quickActions: true,\n      recentActivity: true,\n      weeklyFilter: true\n    }\n    \n    // Clear localStorage\n    localStorage.removeItem('dashboard-preferences')\n    localStorage.removeItem('dashboard-widgets')\n  }\n\n  const getFilteredData = (weekFilter: boolean = preferences.value.weekFilterEnabled) => {\n    if (!weekFilter) {\n      return {\n        contacts: contactStore.contacts,\n        stats: dashboardStats.value,\n        activity: recentActivity.value\n      }\n    }\n\n    // Calculate current week (Monday-based)\n    const now = new Date()\n    const dayOfWeek = now.getDay()\n    const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek // Handle Sunday (0) and other days\n    const monday = new Date(now)\n    monday.setDate(now.getDate() + mondayOffset)\n    monday.setHours(0, 0, 0, 0)\n\n    const sunday = new Date(monday)\n    sunday.setDate(monday.getDate() + 6)\n    sunday.setHours(23, 59, 59, 999)\n\n    // Filter contacts created this week\n    const weekContacts = contactStore.contacts.filter(contact => {\n      if (!contact.created_at) return false\n      const createdDate = new Date(contact.created_at)\n      return createdDate >= monday && createdDate <= sunday\n    })\n\n    // Calculate week-specific stats\n    const weekStats = {\n      totalContacts: weekContacts.length,\n      recentContacts: Math.min(weekContacts.length, 5),\n      organizations: new Set(\n        weekContacts\n          .map(c => c.organization_id)\n          .filter(Boolean)\n      ).size,\n      activeContacts: weekContacts.length\n    }\n\n    // Filter activity for this week\n    const weekActivity = recentActivity.value.filter(activity =>\n      activity.timestamp >= monday && activity.timestamp <= sunday\n    )\n\n    return {\n      contacts: weekContacts,\n      stats: weekStats,\n      activity: weekActivity,\n      weekRange: { start: monday, end: sunday }\n    }\n  }\n\n  return {\n    // State\n    isLoading,\n    errorMessage,\n    lastRefreshed,\n    preferences,\n    widgetVisibility,\n    \n    // Computed\n    dashboardStats,\n    recentActivity,\n    isStale,\n    \n    // Actions\n    refreshDashboard,\n    updatePreferences,\n    updateWidgetVisibility,\n    toggleWeekFilter,\n    toggleSidebar,\n    initializeDashboard,\n    resetDashboard,\n    getFilteredData,\n    clearError\n  }\n})"],"names":["useDashboardStore","defineStore","isLoading","ref","errorMessage","lastRefreshed","preferences","widgetVisibility","contactStore","useContactStore","dashboardStats","computed","c","updateDate","recentActivity","contact","a","b","isStale","clearError","setError","message","refreshDashboard","error","updatePreferences","newPreferences","widgetKey","visible","savedPreferences","parsed","savedWidgets","weekFilter","now","dayOfWeek","mondayOffset","monday","sunday","weekContacts","createdDate","weekStats","weekActivity","activity"],"mappings":"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"}
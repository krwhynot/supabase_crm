{"version":3,"file":"organizationStore-vuf2Lv1g.js","sources":["../../node_modules/@heroicons/vue/24/outline/esm/ChevronRightIcon.js","../../src/composables/monitoring/usePerformanceMonitoring.ts","../../src/composables/monitoring/useErrorTracking.ts","../../src/stores/organizationStore.ts"],"sourcesContent":["import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport default function render(_ctx, _cache) {\n  return (_openBlock(), _createElementBlock(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    \"stroke-width\": \"1.5\",\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\"\n  }, [\n    _createElementVNode(\"path\", {\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n      d: \"m8.25 4.5 7.5 7.5-7.5 7.5\"\n    })\n  ]))\n}","import { ref, computed, reactive } from 'vue'\n\n/**\n * Performance Monitoring Composable\n * Tracks API response times, user interactions, and system performance metrics\n */\n\nexport interface PerformanceMetric {\n  id: string\n  name: string\n  type: 'api_call' | 'user_interaction' | 'page_load' | 'database_query'\n  duration: number\n  timestamp: string\n  success: boolean\n  metadata?: Record<string, any>\n}\n\nexport interface PerformanceStatistics {\n  averageResponseTime: number\n  p95ResponseTime: number\n  p99ResponseTime: number\n  successRate: number\n  totalRequests: number\n  errorCount: number\n  slowestRequests: PerformanceMetric[]\n  fastestRequests: PerformanceMetric[]\n}\n\nexport interface PerformanceThresholds {\n  acceptable: number // ms\n  tolerable: number // ms\n  // anything above tolerable is considered slow\n}\n\nconst DEFAULT_THRESHOLDS: Record<PerformanceMetric['type'], PerformanceThresholds> = {\n  api_call: { acceptable: 500, tolerable: 2000 },\n  user_interaction: { acceptable: 100, tolerable: 300 },\n  page_load: { acceptable: 2000, tolerable: 5000 },\n  database_query: { acceptable: 200, tolerable: 1000 }\n}\n\nexport function usePerformanceMonitoring() {\n  // State\n  const metrics = ref<PerformanceMetric[]>([])\n  const isRecording = ref(true)\n  const activeOperations = reactive<Map<string, { start: number; name: string; type: PerformanceMetric['type'] }>>(new Map())\n  \n  // Computed\n  const statistics = computed((): Record<PerformanceMetric['type'], PerformanceStatistics> => {\n    const result = {} as Record<PerformanceMetric['type'], PerformanceStatistics>\n    \n    const types: PerformanceMetric['type'][] = ['api_call', 'user_interaction', 'page_load', 'database_query']\n    \n    types.forEach(type => {\n      const typeMetrics = metrics.value.filter(m => m.type === type)\n      \n      if (typeMetrics.length === 0) {\n        result[type] = {\n          averageResponseTime: 0,\n          p95ResponseTime: 0,\n          p99ResponseTime: 0,\n          successRate: 0,\n          totalRequests: 0,\n          errorCount: 0,\n          slowestRequests: [],\n          fastestRequests: []\n        }\n        return\n      }\n      \n      const durations = typeMetrics.map(m => m.duration).sort((a, b) => a - b)\n      const successCount = typeMetrics.filter(m => m.success).length\n      \n      const p95Index = Math.floor(durations.length * 0.95)\n      const p99Index = Math.floor(durations.length * 0.99)\n      \n      result[type] = {\n        averageResponseTime: durations.reduce((sum, d) => sum + d, 0) / durations.length,\n        p95ResponseTime: durations[p95Index] || 0,\n        p99ResponseTime: durations[p99Index] || 0,\n        successRate: successCount / typeMetrics.length,\n        totalRequests: typeMetrics.length,\n        errorCount: typeMetrics.length - successCount,\n        slowestRequests: [...typeMetrics].sort((a, b) => b.duration - a.duration).slice(0, 5),\n        fastestRequests: [...typeMetrics].sort((a, b) => a.duration - b.duration).slice(0, 5)\n      }\n    })\n    \n    return result\n  })\n  \n  const overallStatistics = computed((): PerformanceStatistics => {\n    if (metrics.value.length === 0) {\n      return {\n        averageResponseTime: 0,\n        p95ResponseTime: 0,\n        p99ResponseTime: 0,\n        successRate: 0,\n        totalRequests: 0,\n        errorCount: 0,\n        slowestRequests: [],\n        fastestRequests: []\n      }\n    }\n    \n    const durations = metrics.value.map(m => m.duration).sort((a, b) => a - b)\n    const successCount = metrics.value.filter(m => m.success).length\n    \n    const p95Index = Math.floor(durations.length * 0.95)\n    const p99Index = Math.floor(durations.length * 0.99)\n    \n    return {\n      averageResponseTime: durations.reduce((sum, d) => sum + d, 0) / durations.length,\n      p95ResponseTime: durations[p95Index] || 0,\n      p99ResponseTime: durations[p99Index] || 0,\n      successRate: successCount / metrics.value.length,\n      totalRequests: metrics.value.length,\n      errorCount: metrics.value.length - successCount,\n      slowestRequests: [...metrics.value].sort((a, b) => b.duration - a.duration).slice(0, 10),\n      fastestRequests: [...metrics.value].sort((a, b) => a.duration - b.duration).slice(0, 10)\n    }\n  })\n  \n  const recentMetrics = computed(() => {\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString()\n    return metrics.value.filter(m => m.timestamp > oneHourAgo)\n  })\n  \n  const slowRequests = computed(() => {\n    return metrics.value.filter(metric => {\n      const threshold = DEFAULT_THRESHOLDS[metric.type]\n      return metric.duration > threshold.tolerable\n    })\n  })\n  \n  const performanceIssues = computed(() => {\n    const issues: Array<{ type: string; message: string; severity: 'warning' | 'error' }> = []\n    \n    Object.entries(statistics.value).forEach(([type, stats]) => {\n      const threshold = DEFAULT_THRESHOLDS[type as PerformanceMetric['type']]\n      \n      if (stats.averageResponseTime > threshold.tolerable) {\n        issues.push({\n          type,\n          message: `Average ${type} response time (${Math.round(stats.averageResponseTime)}ms) exceeds tolerable threshold (${threshold.tolerable}ms)`,\n          severity: 'error'\n        })\n      } else if (stats.averageResponseTime > threshold.acceptable) {\n        issues.push({\n          type,\n          message: `Average ${type} response time (${Math.round(stats.averageResponseTime)}ms) exceeds acceptable threshold (${threshold.acceptable}ms)`,\n          severity: 'warning'\n        })\n      }\n      \n      if (stats.successRate < 0.95) {\n        issues.push({\n          type,\n          message: `${type} success rate (${Math.round(stats.successRate * 100)}%) is below 95%`,\n          severity: 'error'\n        })\n      } else if (stats.successRate < 0.98) {\n        issues.push({\n          type,\n          message: `${type} success rate (${Math.round(stats.successRate * 100)}%) is below 98%`,\n          severity: 'warning'\n        })\n      }\n    })\n    \n    return issues\n  })\n  \n  // Methods\n  const startOperation = (operationId: string, name: string, type: PerformanceMetric['type']) => {\n    if (!isRecording.value) return\n    \n    activeOperations.set(operationId, {\n      start: performance.now(),\n      name,\n      type\n    })\n  }\n  \n  const endOperation = (operationId: string, success: boolean = true, metadata?: Record<string, any>) => {\n    if (!isRecording.value) return\n    \n    const operation = activeOperations.get(operationId)\n    if (!operation) return\n    \n    const duration = performance.now() - operation.start\n    \n    const metric: PerformanceMetric = {\n      id: operationId,\n      name: operation.name,\n      type: operation.type,\n      duration,\n      timestamp: new Date().toISOString(),\n      success,\n      metadata\n    }\n    \n    metrics.value.push(metric)\n    activeOperations.delete(operationId)\n    \n    // Keep only last 1000 metrics to prevent memory issues\n    if (metrics.value.length > 1000) {\n      metrics.value = metrics.value.slice(-1000)\n    }\n  }\n  \n  const recordMetric = (name: string, type: PerformanceMetric['type'], duration: number, success: boolean = true, metadata?: Record<string, any>) => {\n    if (!isRecording.value) return\n    \n    const metric: PerformanceMetric = {\n      id: `${type}_${Date.now()}_${Math.random()}`,\n      name,\n      type,\n      duration,\n      timestamp: new Date().toISOString(),\n      success,\n      metadata\n    }\n    \n    metrics.value.push(metric)\n    \n    // Keep only last 1000 metrics\n    if (metrics.value.length > 1000) {\n      metrics.value = metrics.value.slice(-1000)\n    }\n  }\n  \n  const measureFunction = async <T>(\n    fn: () => Promise<T>,\n    name: string,\n    type: PerformanceMetric['type'],\n    metadata?: Record<string, any>\n  ): Promise<T> => {\n    const operationId = `${type}_${Date.now()}_${Math.random()}`\n    startOperation(operationId, name, type)\n    \n    try {\n      const result = await fn()\n      endOperation(operationId, true, metadata)\n      return result\n    } catch (error) {\n      endOperation(operationId, false, { \n        ...metadata, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      })\n      throw error\n    }\n  }\n  \n  const measureSyncFunction = <T>(\n    fn: () => T,\n    name: string,\n    type: PerformanceMetric['type'],\n    metadata?: Record<string, any>\n  ): T => {\n    const start = performance.now()\n    \n    try {\n      const result = fn()\n      const duration = performance.now() - start\n      recordMetric(name, type, duration, true, metadata)\n      return result\n    } catch (error) {\n      const duration = performance.now() - start\n      recordMetric(name, type, duration, false, { \n        ...metadata, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      })\n      throw error\n    }\n  }\n  \n  const clearMetrics = () => {\n    metrics.value = []\n    activeOperations.clear()\n  }\n  \n  const exportMetrics = () => {\n    return {\n      metrics: metrics.value,\n      statistics: statistics.value,\n      overallStatistics: overallStatistics.value,\n      exportedAt: new Date().toISOString()\n    }\n  }\n  \n  const getMetricsByTimeRange = (startTime: string, endTime: string) => {\n    return metrics.value.filter(m => m.timestamp >= startTime && m.timestamp <= endTime)\n  }\n  \n  const getAverageResponseTimeByHour = (hours: number = 24) => {\n    const now = new Date()\n    const hourlyData: Array<{ hour: string; averageTime: number; requestCount: number }> = []\n    \n    for (let i = hours - 1; i >= 0; i--) {\n      const hourStart = new Date(now.getTime() - i * 60 * 60 * 1000)\n      const hourEnd = new Date(hourStart.getTime() + 60 * 60 * 1000)\n      \n      const hourMetrics = metrics.value.filter(m => {\n        const metricTime = new Date(m.timestamp)\n        return metricTime >= hourStart && metricTime < hourEnd\n      })\n      \n      const averageTime = hourMetrics.length > 0 \n        ? hourMetrics.reduce((sum, m) => sum + m.duration, 0) / hourMetrics.length \n        : 0\n      \n      hourlyData.push({\n        hour: hourStart.toISOString().substring(0, 13) + ':00',\n        averageTime,\n        requestCount: hourMetrics.length\n      })\n    }\n    \n    return hourlyData\n  }\n  \n  const startRecording = () => {\n    isRecording.value = true\n  }\n  \n  const stopRecording = () => {\n    isRecording.value = false\n  }\n  \n  return {\n    // State\n    metrics: computed(() => metrics.value),\n    isRecording: computed(() => isRecording.value),\n    activeOperations: computed(() => Array.from(activeOperations.entries())),\n    \n    // Computed\n    statistics,\n    overallStatistics,\n    recentMetrics,\n    slowRequests,\n    performanceIssues,\n    \n    // Methods\n    startOperation,\n    endOperation,\n    recordMetric,\n    measureFunction,\n    measureSyncFunction,\n    clearMetrics,\n    exportMetrics,\n    getMetricsByTimeRange,\n    getAverageResponseTimeByHour,\n    startRecording,\n    stopRecording,\n    \n    // Configuration\n    thresholds: DEFAULT_THRESHOLDS\n  }\n}","import { ref, computed, reactive } from 'vue'\n\n/**\n * Error Tracking Composable\n * Comprehensive error collection, analysis, and alerting system\n */\n\nexport interface ErrorRecord {\n  id: string\n  message: string\n  stack?: string\n  source: 'javascript' | 'api' | 'database' | 'user_action' | 'system'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  timestamp: string\n  url: string\n  userAgent: string\n  userId?: string\n  context?: Record<string, any>\n  resolved: boolean\n  resolvedAt?: string\n  resolvedBy?: string\n  tags: string[]\n  fingerprint: string // For grouping similar errors\n}\n\nexport interface ErrorGroup {\n  fingerprint: string\n  message: string\n  count: number\n  firstSeen: string\n  lastSeen: string\n  severity: ErrorRecord['severity']\n  source: ErrorRecord['source']\n  resolved: boolean\n  errors: ErrorRecord[]\n}\n\nexport interface ErrorStatistics {\n  total: number\n  bySource: Record<ErrorRecord['source'], number>\n  bySeverity: Record<ErrorRecord['severity'], number>\n  errorRate: number // errors per minute\n  uniqueErrors: number\n  resolvedErrors: number\n  averageResolutionTime: number // in minutes\n}\n\nexport interface AlertRule {\n  id: string\n  name: string\n  condition: {\n    type: 'error_rate' | 'error_count' | 'new_error' | 'severity'\n    threshold: number\n    timeWindow: number // minutes\n    severity?: ErrorRecord['severity']\n    source?: ErrorRecord['source']\n  }\n  enabled: boolean\n  webhookUrl?: string\n  emailRecipients?: string[]\n  cooldownPeriod: number // minutes\n  lastTriggered?: string\n}\n\nexport function useErrorTracking() {\n  // State\n  const errors = ref<ErrorRecord[]>([])\n  const alertRules = ref<AlertRule[]>([])\n  const isTracking = ref(true)\n  const lastAlerts = reactive<Map<string, string>>(new Map()) // rule ID -> last triggered time\n  \n  // Computed\n  const errorGroups = computed((): ErrorGroup[] => {\n    const groups = new Map<string, ErrorGroup>()\n    \n    errors.value.forEach(error => {\n      const existing = groups.get(error.fingerprint)\n      \n      if (existing) {\n        existing.count++\n        existing.lastSeen = error.timestamp\n        existing.errors.push(error)\n        \n        // Update severity to highest\n        const severityLevels = { low: 1, medium: 2, high: 3, critical: 4 }\n        if (severityLevels[error.severity] > severityLevels[existing.severity]) {\n          existing.severity = error.severity\n        }\n      } else {\n        groups.set(error.fingerprint, {\n          fingerprint: error.fingerprint,\n          message: error.message,\n          count: 1,\n          firstSeen: error.timestamp,\n          lastSeen: error.timestamp,\n          severity: error.severity,\n          source: error.source,\n          resolved: error.resolved,\n          errors: [error]\n        })\n      }\n    })\n    \n    return Array.from(groups.values()).sort((a, b) => new Date(b.lastSeen).getTime() - new Date(a.lastSeen).getTime())\n  })\n  \n  const statistics = computed((): ErrorStatistics => {\n    const now = new Date()\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000)\n    const recentErrors = errors.value.filter(e => new Date(e.timestamp) > oneHourAgo)\n    \n    const bySource: Record<ErrorRecord['source'], number> = {\n      javascript: 0,\n      api: 0,\n      database: 0,\n      user_action: 0,\n      system: 0\n    }\n    \n    const bySeverity: Record<ErrorRecord['severity'], number> = {\n      low: 0,\n      medium: 0,\n      high: 0,\n      critical: 0\n    }\n    \n    errors.value.forEach(error => {\n      bySource[error.source]++\n      bySeverity[error.severity]++\n    })\n    \n    const resolvedErrors = errors.value.filter(e => e.resolved)\n    const avgResolutionTime = resolvedErrors.length > 0\n      ? resolvedErrors.reduce((sum, error) => {\n          if (error.resolvedAt) {\n            const resolutionTime = new Date(error.resolvedAt).getTime() - new Date(error.timestamp).getTime()\n            return sum + (resolutionTime / (1000 * 60)) // Convert to minutes\n          }\n          return sum\n        }, 0) / resolvedErrors.length\n      : 0\n    \n    return {\n      total: errors.value.length,\n      bySource,\n      bySeverity,\n      errorRate: recentErrors.length / 60, // errors per minute\n      uniqueErrors: errorGroups.value.length,\n      resolvedErrors: resolvedErrors.length,\n      averageResolutionTime: avgResolutionTime\n    }\n  })\n  \n  const recentErrors = computed(() => {\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString()\n    return errors.value.filter(e => e.timestamp > oneHourAgo)\n  })\n  \n  const criticalErrors = computed(() => {\n    return errors.value.filter(e => e.severity === 'critical' && !e.resolved)\n  })\n  \n  const unresolvedErrors = computed(() => {\n    return errors.value.filter(e => !e.resolved)\n  })\n  \n  // Methods\n  const generateFingerprint = (message: string, stack?: string, source?: string): string => {\n    // Create a fingerprint for grouping similar errors\n    const stackLines = stack?.split('\\n').slice(0, 3).join('|') || ''\n    const content = `${source}:${message}:${stackLines}`\n    \n    // Simple hash function\n    let hash = 0\n    for (let i = 0; i < content.length; i++) {\n      const char = content.charCodeAt(i)\n      hash = ((hash << 5) - hash) + char\n      hash = hash & hash // Convert to 32-bit integer\n    }\n    \n    return Math.abs(hash).toString(36)\n  }\n  \n  const recordError = (\n    message: string,\n    options: {\n      stack?: string\n      source?: ErrorRecord['source']\n      severity?: ErrorRecord['severity']\n      context?: Record<string, any>\n      tags?: string[]\n      userId?: string\n    } = {}\n  ) => {\n    if (!isTracking.value) return\n    \n    const error: ErrorRecord = {\n      id: `error_${Date.now()}_${Math.random().toString(36).substring(7)}`,\n      message,\n      stack: options.stack,\n      source: options.source || 'javascript',\n      severity: options.severity || 'medium',\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      userId: options.userId,\n      context: options.context,\n      resolved: false,\n      tags: options.tags || [],\n      fingerprint: generateFingerprint(message, options.stack, options.source)\n    }\n    \n    errors.value.push(error)\n    \n    // Keep only last 2000 errors to prevent memory issues\n    if (errors.value.length > 2000) {\n      errors.value = errors.value.slice(-2000)\n    }\n    \n    // Check alert rules\n    checkAlertRules(error)\n    \n    return error\n  }\n  \n  const recordJavaScriptError = (error: Error, context?: Record<string, any>) => {\n    return recordError(error.message, {\n      stack: error.stack,\n      source: 'javascript',\n      severity: 'high',\n      context,\n      tags: ['javascript', 'unhandled']\n    })\n  }\n  \n  const recordApiError = (\n    message: string,\n    statusCode?: number,\n    endpoint?: string,\n    context?: Record<string, any>\n  ) => {\n    const severity = statusCode && statusCode >= 500 ? 'high' : 'medium'\n    \n    return recordError(message, {\n      source: 'api',\n      severity,\n      context: {\n        statusCode,\n        endpoint,\n        ...context\n      },\n      tags: ['api', 'http']\n    })\n  }\n  \n  const recordDatabaseError = (message: string, query?: string, context?: Record<string, any>) => {\n    return recordError(message, {\n      source: 'database',\n      severity: 'high',\n      context: {\n        query,\n        ...context\n      },\n      tags: ['database', 'sql']\n    })\n  }\n  \n  const recordUserActionError = (\n    action: string,\n    message: string,\n    context?: Record<string, any>\n  ) => {\n    return recordError(`User action failed: ${action} - ${message}`, {\n      source: 'user_action',\n      severity: 'medium',\n      context: {\n        action,\n        ...context\n      },\n      tags: ['user_action', action]\n    })\n  }\n  \n  const resolveError = (errorId: string, resolvedBy?: string) => {\n    const error = errors.value.find(e => e.id === errorId)\n    if (error) {\n      error.resolved = true\n      error.resolvedAt = new Date().toISOString()\n      error.resolvedBy = resolvedBy\n    }\n  }\n  \n  const resolveErrorGroup = (fingerprint: string, resolvedBy?: string) => {\n    const groupErrors = errors.value.filter(e => e.fingerprint === fingerprint)\n    groupErrors.forEach(error => {\n      error.resolved = true\n      error.resolvedAt = new Date().toISOString()\n      error.resolvedBy = resolvedBy\n    })\n  }\n  \n  const addTag = (errorId: string, tag: string) => {\n    const error = errors.value.find(e => e.id === errorId)\n    if (error && !error.tags.includes(tag)) {\n      error.tags.push(tag)\n    }\n  }\n  \n  const removeTag = (errorId: string, tag: string) => {\n    const error = errors.value.find(e => e.id === errorId)\n    if (error) {\n      error.tags = error.tags.filter(t => t !== tag)\n    }\n  }\n  \n  const checkAlertRules = (error: ErrorRecord) => {\n    alertRules.value.forEach(rule => {\n      if (!rule.enabled) return\n      \n      const now = new Date()\n      const lastTriggered = lastAlerts.get(rule.id)\n      \n      // Check cooldown period\n      if (lastTriggered) {\n        const cooldownEnd = new Date(lastTriggered)\n        cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownPeriod)\n        if (now < cooldownEnd) return\n      }\n      \n      let shouldTrigger = false\n      \n      switch (rule.condition.type) {\n        case 'new_error':\n          shouldTrigger = true\n          break\n          \n        case 'severity':\n          shouldTrigger = rule.condition.severity === error.severity\n          break\n          \n        case 'error_rate':\n          const windowStart = new Date(now.getTime() - rule.condition.timeWindow * 60 * 1000)\n          const windowErrors = errors.value.filter(e => new Date(e.timestamp) > windowStart)\n          const rate = windowErrors.length / rule.condition.timeWindow // errors per minute\n          shouldTrigger = rate > rule.condition.threshold\n          break\n          \n        case 'error_count':\n          const countWindowStart = new Date(now.getTime() - rule.condition.timeWindow * 60 * 1000)\n          const countWindowErrors = errors.value.filter(e => new Date(e.timestamp) > countWindowStart)\n          shouldTrigger = countWindowErrors.length > rule.condition.threshold\n          break\n      }\n      \n      if (shouldTrigger) {\n        triggerAlert(rule, error)\n      }\n    })\n  }\n  \n  const triggerAlert = (rule: AlertRule, triggeringError: ErrorRecord) => {\n    console.warn(`Alert triggered: ${rule.name}`, {\n      rule,\n      error: triggeringError,\n      timestamp: new Date().toISOString()\n    })\n    \n    lastAlerts.set(rule.id, new Date().toISOString())\n    \n    // In a real implementation, you would send webhooks, emails, etc.\n    if (rule.webhookUrl) {\n      // Send webhook notification\n      console.log(`Would send webhook to: ${rule.webhookUrl}`)\n    }\n    \n    if (rule.emailRecipients?.length) {\n      // Send email notifications\n      console.log(`Would send emails to: ${rule.emailRecipients.join(', ')}`)\n    }\n  }\n  \n  const addAlertRule = (rule: Omit<AlertRule, 'id'>) => {\n    const newRule: AlertRule = {\n      ...rule,\n      id: `rule_${Date.now()}_${Math.random().toString(36).substring(7)}`\n    }\n    \n    alertRules.value.push(newRule)\n    return newRule\n  }\n  \n  const removeAlertRule = (ruleId: string) => {\n    const index = alertRules.value.findIndex(r => r.id === ruleId)\n    if (index > -1) {\n      alertRules.value.splice(index, 1)\n      lastAlerts.delete(ruleId)\n    }\n  }\n  \n  const clearErrors = () => {\n    errors.value = []\n  }\n  \n  const exportErrors = (filters?: {\n    startDate?: string\n    endDate?: string\n    source?: ErrorRecord['source']\n    severity?: ErrorRecord['severity']\n    resolved?: boolean\n  }) => {\n    let filteredErrors = errors.value\n    \n    if (filters) {\n      filteredErrors = errors.value.filter(error => {\n        if (filters.startDate && error.timestamp < filters.startDate) return false\n        if (filters.endDate && error.timestamp > filters.endDate) return false\n        if (filters.source && error.source !== filters.source) return false\n        if (filters.severity && error.severity !== filters.severity) return false\n        if (filters.resolved !== undefined && error.resolved !== filters.resolved) return false\n        return true\n      })\n    }\n    \n    return {\n      errors: filteredErrors,\n      statistics: statistics.value,\n      errorGroups: errorGroups.value,\n      exportedAt: new Date().toISOString(),\n      filters\n    }\n  }\n  \n  const getErrorTrend = (hours: number = 24) => {\n    const now = new Date()\n    const hourlyData: Array<{ hour: string; errorCount: number; uniqueErrors: number }> = []\n    \n    for (let i = hours - 1; i >= 0; i--) {\n      const hourStart = new Date(now.getTime() - i * 60 * 60 * 1000)\n      const hourEnd = new Date(hourStart.getTime() + 60 * 60 * 1000)\n      \n      const hourErrors = errors.value.filter(e => {\n        const errorTime = new Date(e.timestamp)\n        return errorTime >= hourStart && errorTime < hourEnd\n      })\n      \n      const uniqueFingerprints = new Set(hourErrors.map(e => e.fingerprint))\n      \n      hourlyData.push({\n        hour: hourStart.toISOString().substring(0, 13) + ':00',\n        errorCount: hourErrors.length,\n        uniqueErrors: uniqueFingerprints.size\n      })\n    }\n    \n    return hourlyData\n  }\n  \n  const startTracking = () => {\n    isTracking.value = true\n  }\n  \n  const stopTracking = () => {\n    isTracking.value = false\n  }\n  \n  // Set up global error handlers\n  const setupGlobalErrorHandlers = () => {\n    // JavaScript errors\n    window.addEventListener('error', (event) => {\n      recordJavaScriptError(event.error || new Error(event.message), {\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno\n      })\n    })\n    \n    // Promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      const error = event.reason instanceof Error ? event.reason : new Error(String(event.reason))\n      recordJavaScriptError(error, { type: 'unhandled_promise_rejection' })\n    })\n  }\n  \n  return {\n    // State\n    errors: computed(() => errors.value),\n    alertRules: computed(() => alertRules.value),\n    isTracking: computed(() => isTracking.value),\n    \n    // Computed\n    errorGroups,\n    statistics,\n    recentErrors,\n    criticalErrors,\n    unresolvedErrors,\n    \n    // Methods\n    recordError,\n    recordJavaScriptError,\n    recordApiError,\n    recordDatabaseError,\n    recordUserActionError,\n    resolveError,\n    resolveErrorGroup,\n    addTag,\n    removeTag,\n    addAlertRule,\n    removeAlertRule,\n    clearErrors,\n    exportErrors,\n    getErrorTrend,\n    startTracking,\n    stopTracking,\n    setupGlobalErrorHandlers\n  }\n}","import { defineStore } from 'pinia'\nimport { ref, computed, reactive } from 'vue'\nimport { supabase } from '@/config/supabaseClient'\nimport { usePerformanceMonitoring } from '@/composables/monitoring/usePerformanceMonitoring'\nimport { useErrorTracking } from '@/composables/monitoring/useErrorTracking'\nimport type {\n  Organization,\n  OrganizationInsert,\n  OrganizationUpdate,\n  OrganizationInteraction,\n  OrganizationInteractionInsert,\n  OrganizationDocument,\n  OrganizationDocumentInsert,\n  OrganizationSummaryAnalytics,\n  MonthlyOrganizationPerformance,\n  OrganizationLeadScoring\n} from '@/types/database.types'\nimport type {\n  OrganizationListItem,\n  OrganizationDetailData,\n  OrganizationListResponse,\n  OrganizationFilters,\n  OrganizationSortConfig,\n  OrganizationSortField,\n  PaginationConfig,\n  OrganizationMetrics,\n  BulkOrganizationOperation,\n  BulkOperationResult\n} from '@/types/organizations'\n\n/**\n * Organization Store - Manages organization data and operations\n * Follows established Pinia patterns with reactive state management\n * Comprehensive CRUD operations with analytics and relationship management\n */\nexport const useOrganizationStore = defineStore('organization', () => {\n  // ===============================\n  // MONITORING INTEGRATION\n  // ===============================\n  \n  const { measureFunction, recordMetric } = usePerformanceMonitoring()\n  const { recordDatabaseError, recordUserActionError } = useErrorTracking()\n  \n  // ===============================\n  // STATE MANAGEMENT\n  // ===============================\n  \n  // Core data state\n  const organizations = ref<OrganizationListItem[]>([])\n  const currentOrganization = ref<OrganizationDetailData | null>(null)\n  \n  // Analytics and performance data\n  const analyticsData = ref<OrganizationSummaryAnalytics[]>([])\n  const performanceData = ref<MonthlyOrganizationPerformance[]>([])\n  const leadScoringData = ref<OrganizationLeadScoring[]>([])\n  const dashboardMetrics = ref<OrganizationMetrics | null>(null)\n  \n  // Interactions and documents\n  const interactions = ref<OrganizationInteraction[]>([])\n  const documents = ref<OrganizationDocument[]>([])\n  \n  // Loading states - granular loading management\n  const loading = reactive({\n    organizations: false,\n    currentOrganization: false,\n    analytics: false,\n    performance: false,\n    leadScoring: false,\n    metrics: false,\n    interactions: false,\n    documents: false,\n    creating: false,\n    updating: false,\n    deleting: false,\n    bulkOperations: false\n  })\n  \n  // Error states\n  const errors = reactive({\n    organizations: '',\n    currentOrganization: '',\n    analytics: '',\n    performance: '',\n    leadScoring: '',\n    metrics: '',\n    interactions: '',\n    documents: '',\n    creating: '',\n    updating: '',\n    deleting: '',\n    bulkOperations: ''\n  })\n  \n  // Search and filtering state\n  const searchQuery = ref('')\n  const appliedFilters = ref<OrganizationFilters>({})\n  const sortConfig = ref<OrganizationSortConfig>({\n    field: 'name',\n    order: 'asc'\n  })\n  \n  // Pagination state\n  const pagination = ref<PaginationConfig>({\n    page: 1,\n    limit: 20,\n    total: 0,\n    totalPages: 0,\n    hasNext: false,\n    hasPrevious: false\n  })\n  \n  // Cache and optimization\n  const lastRefreshed = ref<Date | null>(null)\n  const dataCache = reactive<Record<string, { data: any; timestamp: number; ttl: number }>>({})\n  \n  // ===============================\n  // COMPUTED PROPERTIES\n  // ===============================\n  \n  const hasOrganizations = computed(() => organizations.value.length > 0)\n  const totalOrganizations = computed(() => pagination.value.total)\n  const isLoading = computed(() => Object.values(loading).some(state => state))\n  const hasErrors = computed(() => Object.values(errors).some(error => error !== ''))\n  const currentError = computed(() => {\n    const errorKeys = Object.keys(errors) as Array<keyof typeof errors>\n    const firstError = errorKeys.find(key => errors[key] !== '')\n    return firstError ? errors[firstError] : ''\n  })\n  \n  // Analytics computed properties\n  const organizationStats = computed(() => {\n    if (!dashboardMetrics.value) return null\n    \n    return {\n      total: dashboardMetrics.value.totalOrganizations,\n      active: dashboardMetrics.value.activeOrganizations,\n      prospects: dashboardMetrics.value.prospects,\n      customers: dashboardMetrics.value.customers,\n      partners: dashboardMetrics.value.partners,\n      totalRevenue: dashboardMetrics.value.totalRevenue,\n      averageLeadScore: dashboardMetrics.value.averageLeadScore,\n      thisMonth: dashboardMetrics.value.monthlyGrowth > 0 ? Math.round(dashboardMetrics.value.totalOrganizations * dashboardMetrics.value.monthlyGrowth / 100) : 0,\n      thisWeek: Math.round((dashboardMetrics.value.monthlyGrowth > 0 ? dashboardMetrics.value.totalOrganizations * dashboardMetrics.value.monthlyGrowth / 100 : 0) / 4)\n    }\n  })\n  \n  // Top performing organizations\n  const topPerformingOrganizations = computed(() => {\n    return organizations.value\n      .filter(org => org.lead_score !== null)\n      .sort((a, b) => (b.lead_score || 0) - (a.lead_score || 0))\n      .slice(0, 10)\n  })\n  \n  // Organizations by status\n  const organizationsByStatus = computed(() => {\n    return organizations.value.reduce((acc, org) => {\n      const status = org.status || 'Unknown'\n      acc[status] = (acc[status] || 0) + 1\n      return acc\n    }, {} as Record<string, number>)\n  })\n  \n  // Recent organizations (created in last 30 days)\n  const recentOrganizations = computed(() => {\n    const thirtyDaysAgo = new Date()\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)\n    \n    return organizations.value.filter(org => {\n      if (!org.created_at) return false\n      return new Date(org.created_at) >= thirtyDaysAgo\n    })\n  })\n  \n  // ===============================\n  // ERROR MANAGEMENT\n  // ===============================\n  \n  /**\n   * Clear all errors\n   */\n  const clearErrors = () => {\n    Object.keys(errors).forEach(key => {\n      errors[key as keyof typeof errors] = ''\n    })\n  }\n  \n  /**\n   * Clear specific error\n   */\n  const clearError = (type: keyof typeof errors) => {\n    errors[type] = ''\n  }\n  \n  /**\n   * Set error message\n   */\n  const setError = (type: keyof typeof errors, message: string) => {\n    errors[type] = message\n    console.error(`Organization Store Error (${type}):`, message)\n  }\n  \n  // ===============================\n  // CACHE MANAGEMENT\n  // ===============================\n  \n  /**\n   * Check if cached data is still valid\n   */\n  const isCacheValid = (key: string): boolean => {\n    const cached = dataCache[key]\n    if (!cached) return false\n    return Date.now() - cached.timestamp < cached.ttl\n  }\n  \n  /**\n   * Get cached data if valid\n   */\n  const getCachedData = <T>(key: string): T | null => {\n    if (isCacheValid(key)) {\n      return dataCache[key].data as T\n    }\n    return null\n  }\n  \n  /**\n   * Set cache data with TTL\n   */\n  const setCacheData = (key: string, data: any, ttlMs: number = 300000) => { // 5 minutes default\n    dataCache[key] = {\n      data,\n      timestamp: Date.now(),\n      ttl: ttlMs\n    }\n  }\n  \n  /**\n   * Clear specific cache entry\n   */\n  const clearCache = (key?: string) => {\n    if (key) {\n      delete dataCache[key]\n    } else {\n      Object.keys(dataCache).forEach(k => delete dataCache[k])\n    }\n  }\n  \n  // ===============================\n  // CORE CRUD OPERATIONS\n  // ===============================\n  \n  /**\n   * Fetch organizations with advanced filtering, sorting, and pagination\n   */\n  const fetchOrganizations = async (options: {\n    page?: number\n    limit?: number\n    filters?: Partial<OrganizationFilters>\n    sort?: Partial<OrganizationSortConfig>\n    search?: string\n    useCache?: boolean\n    resetList?: boolean\n  } = {}): Promise<OrganizationListResponse | null> => {\n    return await measureFunction(async () => {\n      try {\n        loading.organizations = true\n        clearError('organizations')\n      \n      // Update pagination and filters\n      if (options.page !== undefined) pagination.value.page = options.page\n      if (options.limit !== undefined) pagination.value.limit = options.limit\n      if (options.filters) appliedFilters.value = { ...appliedFilters.value, ...options.filters }\n      if (options.sort) sortConfig.value = { ...sortConfig.value, ...options.sort }\n      if (options.search !== undefined) searchQuery.value = options.search\n      \n      // Check cache first\n      const cacheKey = `organizations_${JSON.stringify({ \n        page: pagination.value.page, \n        limit: pagination.value.limit,\n        filters: appliedFilters.value,\n        sort: sortConfig.value,\n        search: searchQuery.value\n      })}`\n      \n      if (options.useCache !== false) {\n        const cached = getCachedData<OrganizationListResponse>(cacheKey)\n        if (cached) {\n          organizations.value = options.resetList ? cached.data : [...organizations.value, ...cached.data]\n          pagination.value = cached.pagination\n          return cached\n        }\n      }\n      \n      // Build Supabase query - using basic organizations table instead of missing analytics view\n      let query = supabase\n        .from('organizations')\n        .select('*', { count: 'exact' })\n      \n      // Apply search\n      if (searchQuery.value.trim()) {\n        const searchTerm = searchQuery.value.trim()\n        query = query.or(`name.ilike.%${searchTerm}%,legal_name.ilike.%${searchTerm}%,industry.ilike.%${searchTerm}%`)\n      }\n      \n      // Apply filters\n      if (appliedFilters.value.industry && appliedFilters.value.industry.length > 0) {\n        query = query.in('industry', appliedFilters.value.industry)\n      }\n      \n      if (appliedFilters.value.status && appliedFilters.value.status.length > 0) {\n        query = query.in('status', appliedFilters.value.status)\n      }\n      \n      if (appliedFilters.value.type && appliedFilters.value.type.length > 0) {\n        query = query.in('type', appliedFilters.value.type)\n      }\n      \n      if (appliedFilters.value.size && appliedFilters.value.size.length > 0) {\n        query = query.in('size', appliedFilters.value.size)\n      }\n      \n      if (appliedFilters.value.country && appliedFilters.value.country.length > 0) {\n        query = query.in('country', appliedFilters.value.country)\n      }\n      \n      // Lead score range filter\n      if (appliedFilters.value.leadScoreRange) {\n        if (appliedFilters.value.leadScoreRange.min !== undefined) {\n          query = query.gte('lead_score', appliedFilters.value.leadScoreRange.min)\n        }\n        if (appliedFilters.value.leadScoreRange.max !== undefined) {\n          query = query.lte('lead_score', appliedFilters.value.leadScoreRange.max)\n        }\n      }\n      \n      // Employee range filter\n      if (appliedFilters.value.employeeRange) {\n        if (appliedFilters.value.employeeRange.min !== undefined) {\n          query = query.gte('employees_count', appliedFilters.value.employeeRange.min)\n        }\n        if (appliedFilters.value.employeeRange.max !== undefined) {\n          query = query.lte('employees_count', appliedFilters.value.employeeRange.max)\n        }\n      }\n      \n      // Revenue range filter\n      if (appliedFilters.value.revenueRange) {\n        if (appliedFilters.value.revenueRange.min !== undefined) {\n          query = query.gte('annual_revenue', appliedFilters.value.revenueRange.min)\n        }\n        if (appliedFilters.value.revenueRange.max !== undefined) {\n          query = query.lte('annual_revenue', appliedFilters.value.revenueRange.max)\n        }\n      }\n      \n      // Date range filters\n      if (appliedFilters.value.lastContactDateRange) {\n        if (appliedFilters.value.lastContactDateRange.start) {\n          query = query.gte('last_contact_date', appliedFilters.value.lastContactDateRange.start.toISOString())\n        }\n        if (appliedFilters.value.lastContactDateRange.end) {\n          query = query.lte('last_contact_date', appliedFilters.value.lastContactDateRange.end.toISOString())\n        }\n      }\n      \n      // Apply sorting\n      const ascending = sortConfig.value.order === 'asc'\n      query = query.order(sortConfig.value.field, { ascending })\n      \n      // Apply pagination\n      const offset = (pagination.value.page - 1) * pagination.value.limit\n      query = query.range(offset, offset + pagination.value.limit - 1)\n      \n      const { data, error, count } = await query\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Transform data to OrganizationListItem format using full organization data\n      const transformedData: OrganizationListItem[] = (data || []).map(item => ({\n        id: item.id || '',\n        name: item.name || '',\n        legal_name: item.legal_name,\n        industry: item.industry,\n        type: item.type,\n        size: item.size,\n        status: item.status,\n        website: item.website,\n        email: item.email,\n        primary_phone: item.primary_phone,\n        city: item.city,\n        country: item.country,\n        employees_count: item.employees_count,\n        annual_revenue: item.annual_revenue,\n        lead_score: item.lead_score,\n        contact_count: undefined, // Will need to be calculated separately if needed\n        last_interaction_date: item.last_contact_date,\n        next_follow_up_date: item.next_follow_up_date,\n        created_at: item.created_at,\n        updated_at: item.updated_at\n      }))\n      \n      // Update pagination\n      pagination.value.total = count || 0\n      pagination.value.totalPages = Math.ceil(pagination.value.total / pagination.value.limit)\n      pagination.value.hasNext = pagination.value.page < pagination.value.totalPages\n      pagination.value.hasPrevious = pagination.value.page > 1\n      \n      // Update organizations list\n      if (options.resetList !== false) {\n        organizations.value = transformedData\n      } else {\n        organizations.value = [...organizations.value, ...transformedData]\n      }\n      \n      const response: OrganizationListResponse = {\n        data: transformedData,\n        pagination: { ...pagination.value },\n        filters: { ...appliedFilters.value },\n        sort: { ...sortConfig.value }\n      }\n      \n      // Cache the response\n      setCacheData(cacheKey, response)\n      lastRefreshed.value = new Date()\n      \n      return response\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch organizations'\n      setError('organizations', message)\n      \n      recordDatabaseError(`Failed to fetch organizations: ${message}`, 'SELECT FROM organizations', {\n        operation: 'fetch_organizations',\n        options\n      })\n      \n      return null\n    } finally {\n      loading.organizations = false\n    }\n    }, 'Fetch Organizations', 'database_query', { \n      operation: 'fetch',\n      filters: options.filters,\n      page: options.page,\n      limit: options.limit\n    })\n  }\n  \n  /**\n   * Fetch organization by ID with detailed information\n   */\n  const fetchOrganization = async (id: string): Promise<OrganizationDetailData | null> => {\n    try {\n      loading.currentOrganization = true\n      clearError('currentOrganization')\n      \n      // Check cache first\n      const cacheKey = `organization_${id}`\n      const cached = getCachedData<OrganizationDetailData>(cacheKey)\n      if (cached) {\n        currentOrganization.value = cached\n        return cached\n      }\n      \n      // Fetch organization data\n      const { data: orgData, error: orgError } = await supabase\n        .from('organizations')\n        .select('*')\n        .eq('id', id)\n        .single()\n      \n      if (orgError) {\n        throw new Error(orgError.message)\n      }\n      \n      // Fetch related data in parallel\n      const [contactsResult, interactionsResult, documentsResult] = await Promise.all([\n        supabase\n          .from('contacts')\n          .select('id, first_name, last_name, email, title')\n          .eq('organization_id', id),\n        \n        supabase\n          .from('organization_interactions')\n          .select('id, type, subject, interaction_date, contact_id, direction')\n          .eq('organization_id', id)\n          .order('interaction_date', { ascending: false })\n          .limit(10),\n        \n        supabase\n          .from('organization_documents')\n          .select('id, name, category, size, created_at')\n          .eq('organization_id', id)\n      ])\n      \n      // Build detailed data\n      const detailData: OrganizationDetailData = {\n        ...orgData,\n        contact_count: contactsResult.data?.length || 0,\n        interaction_count: interactionsResult.data?.length || 0,\n        document_count: documentsResult.data?.length || 0,\n        recent_interactions: (interactionsResult.data || []).map(interaction => ({\n          id: interaction.id,\n          type: interaction.type,\n          subject: interaction.subject,\n          interaction_date: interaction.interaction_date,\n          contact_name: contactsResult.data?.find(c => c.id === interaction.contact_id)\n            ? `${contactsResult.data.find(c => c.id === interaction.contact_id)?.first_name} ${contactsResult.data.find(c => c.id === interaction.contact_id)?.last_name}`\n            : undefined\n        }))\n      }\n      \n      currentOrganization.value = detailData\n      \n      // Cache the result\n      setCacheData(cacheKey, detailData)\n      \n      return detailData\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch organization'\n      setError('currentOrganization', message)\n      currentOrganization.value = null\n      return null\n    } finally {\n      loading.currentOrganization = false\n    }\n  }\n  \n  /**\n   * Create new organization\n   */\n  const createOrganization = async (organizationData: OrganizationInsert): Promise<Organization | null> => {\n    return await measureFunction(async () => {\n      try {\n        loading.creating = true\n        clearError('creating')\n        \n        const { data, error } = await supabase\n          .from('organizations')\n          .insert(organizationData)\n          .select()\n          .single()\n        \n        if (error) {\n          recordDatabaseError(`Failed to create organization: ${error.message}`, 'INSERT INTO organizations', {\n            operation: 'create_organization',\n            data: organizationData\n          })\n          throw new Error(error.message)\n        }\n        \n        // Clear cache and refresh list\n        clearCache()\n        await fetchOrganizations({ resetList: true })\n        \n        // Record successful user action\n        recordMetric('create_organization_success', 'user_interaction', 0, true, {\n          organizationName: organizationData.name,\n          organizationIndustry: organizationData.industry\n        })\n        \n        return data\n        \n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Failed to create organization'\n        setError('creating', message)\n        \n        recordUserActionError('create_organization', message, {\n          organizationData\n        })\n        \n        return null\n      } finally {\n        loading.creating = false\n      }\n    }, 'Create Organization', 'database_query', { operation: 'create' })\n  }\n  \n  /**\n   * Update existing organization\n   */\n  const updateOrganization = async (id: string, updates: OrganizationUpdate): Promise<Organization | null> => {\n    try {\n      loading.updating = true\n      clearError('updating')\n      \n      const { data, error } = await supabase\n        .from('organizations')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Update current organization if it's the one being updated\n      if (currentOrganization.value?.id === id) {\n        await fetchOrganization(id)\n      }\n      \n      // Clear cache and refresh list\n      clearCache()\n      await fetchOrganizations({ resetList: true })\n      \n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to update organization'\n      setError('updating', message)\n      return null\n    } finally {\n      loading.updating = false\n    }\n  }\n  \n  /**\n   * Delete organization\n   */\n  const deleteOrganization = async (id: string): Promise<boolean> => {\n    try {\n      loading.deleting = true\n      clearError('deleting')\n      \n      const { error } = await supabase\n        .from('organizations')\n        .delete()\n        .eq('id', id)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Remove from local state\n      organizations.value = organizations.value.filter(org => org.id !== id)\n      \n      // Clear current organization if it was deleted\n      if (currentOrganization.value?.id === id) {\n        currentOrganization.value = null\n      }\n      \n      // Clear cache\n      clearCache()\n      \n      return true\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to delete organization'\n      setError('deleting', message)\n      return false\n    } finally {\n      loading.deleting = false\n    }\n  }\n  \n  // ===============================\n  // SEARCH AND FILTERING\n  // ===============================\n  \n  /**\n   * Search organizations\n   */\n  const searchOrganizations = async (query: string) => {\n    searchQuery.value = query\n    pagination.value.page = 1 // Reset to first page on new search\n    await fetchOrganizations({ search: query, resetList: true })\n  }\n  \n  /**\n   * Clear search and show all organizations\n   */\n  const clearSearch = async () => {\n    searchQuery.value = ''\n    pagination.value.page = 1\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  /**\n   * Apply filters\n   */\n  const applyFilters = async (filters: Partial<OrganizationFilters>) => {\n    appliedFilters.value = { ...appliedFilters.value, ...filters }\n    pagination.value.page = 1 // Reset to first page\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  /**\n   * Clear all filters\n   */\n  const clearFilters = async () => {\n    appliedFilters.value = {}\n    pagination.value.page = 1\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  /**\n   * Change sorting\n   */\n  const setSorting = async (field: OrganizationSortField, order: 'asc' | 'desc') => {\n    sortConfig.value = { field, order }\n    pagination.value.page = 1 // Reset to first page on sort change\n    await fetchOrganizations({ resetList: true })\n  }\n  \n  // ===============================\n  // PAGINATION\n  // ===============================\n  \n  /**\n   * Change page\n   */\n  const setPage = async (page: number) => {\n    if (page >= 1 && page <= pagination.value.totalPages) {\n      pagination.value.page = page\n      await fetchOrganizations()\n    }\n  }\n  \n  /**\n   * Go to next page\n   */\n  const nextPage = async () => {\n    if (pagination.value.hasNext) {\n      await setPage(pagination.value.page + 1)\n    }\n  }\n  \n  /**\n   * Go to previous page\n   */\n  const previousPage = async () => {\n    if (pagination.value.hasPrevious) {\n      await setPage(pagination.value.page - 1)\n    }\n  }\n  \n  // ===============================\n  // ANALYTICS AND METRICS\n  // ===============================\n  \n  /**\n   * Fetch dashboard metrics\n   */\n  const fetchDashboardMetrics = async (): Promise<OrganizationMetrics | null> => {\n    try {\n      loading.metrics = true\n      clearError('metrics')\n      \n      // Check cache first\n      const cacheKey = 'dashboard_metrics'\n      const cached = getCachedData<OrganizationMetrics>(cacheKey)\n      if (cached) {\n        dashboardMetrics.value = cached\n        return cached\n      }\n      \n      // Fetch metrics in parallel\n      const [totalResult, activeResult, prospectResult, customerResult, partnerResult, revenueResult] = await Promise.all([\n        supabase.from('organizations').select('id', { count: 'exact', head: true }),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Active'),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Prospect'),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Customer'),\n        supabase.from('organizations').select('id', { count: 'exact', head: true }).eq('status', 'Partner'),\n        supabase.from('organizations').select('annual_revenue, lead_score', { count: 'exact' }).not('annual_revenue', 'is', null)\n      ])\n      \n      // Calculate date ranges\n      const now = new Date()\n      const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1)\n      \n      const monthResult = await supabase.from('organizations').select('id', { count: 'exact', head: true }).gte('created_at', firstDayOfMonth.toISOString())\n      \n      // Calculate metrics\n      const totalRevenue = revenueResult.data?.reduce((sum, org) => sum + (org.annual_revenue || 0), 0) || 0\n      const averageLeadScore = revenueResult.data?.length \n        ? revenueResult.data.reduce((sum, org) => sum + (org.lead_score || 0), 0) / revenueResult.data.length\n        : 0\n      \n      const metrics: OrganizationMetrics = {\n        totalOrganizations: totalResult.count || 0,\n        activeOrganizations: activeResult.count || 0,\n        prospects: prospectResult.count || 0,\n        customers: customerResult.count || 0,\n        partners: partnerResult.count || 0,\n        totalRevenue: totalRevenue,\n        averageLeadScore: averageLeadScore,\n        monthlyGrowth: monthResult.count || 0,\n        industryDistribution: [], // Will be populated by industry analytics\n        statusDistribution: [], // Will be populated by status analytics\n        recentActivity: [] // Will be populated by activity analytics\n      }\n      \n      dashboardMetrics.value = metrics\n      \n      // Cache the result\n      setCacheData(cacheKey, metrics, 600000) // 10 minutes cache\n      \n      return metrics\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch dashboard metrics'\n      setError('metrics', message)\n      return null\n    } finally {\n      loading.metrics = false\n    }\n  }\n  \n  /**\n   * Fetch organization analytics data\n   */\n  const fetchAnalytics = async (): Promise<OrganizationSummaryAnalytics[] | null> => {\n    try {\n      loading.analytics = true\n      clearError('analytics')\n      \n      const { data, error } = await supabase\n        .from('organization_summary_analytics')\n        .select('*')\n        .order('lead_score', { ascending: false })\n        .limit(50)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      analyticsData.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch analytics'\n      setError('analytics', message)\n      return null\n    } finally {\n      loading.analytics = false\n    }\n  }\n  \n  /**\n   * Fetch performance data\n   */\n  const fetchPerformanceData = async (): Promise<MonthlyOrganizationPerformance[] | null> => {\n    try {\n      loading.performance = true\n      clearError('performance')\n      \n      const { data, error } = await supabase\n        .from('monthly_organization_performance')\n        .select('*')\n        .order('performance_month', { ascending: false })\n        .limit(12)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      performanceData.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch performance data'\n      setError('performance', message)\n      return null\n    } finally {\n      loading.performance = false\n    }\n  }\n  \n  /**\n   * Fetch lead scoring data\n   */\n  const fetchLeadScoringData = async (): Promise<OrganizationLeadScoring[] | null> => {\n    try {\n      loading.leadScoring = true\n      clearError('leadScoring')\n      \n      const { data, error } = await supabase\n        .from('organization_lead_scoring')\n        .select('*')\n        .order('lead_score', { ascending: false })\n        .limit(100)\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      leadScoringData.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch lead scoring data'\n      setError('leadScoring', message)\n      return null\n    } finally {\n      loading.leadScoring = false\n    }\n  }\n  \n  // ===============================\n  // INTERACTION MANAGEMENT\n  // ===============================\n  \n  /**\n   * Fetch interactions for current organization\n   */\n  const fetchInteractions = async (organizationId?: string): Promise<OrganizationInteraction[] | null> => {\n    try {\n      loading.interactions = true\n      clearError('interactions')\n      \n      const orgId = organizationId || currentOrganization.value?.id\n      if (!orgId) {\n        throw new Error('No organization ID provided')\n      }\n      \n      const { data, error } = await supabase\n        .from('organization_interactions')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('interaction_date', { ascending: false })\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      interactions.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch interactions'\n      setError('interactions', message)\n      return null\n    } finally {\n      loading.interactions = false\n    }\n  }\n  \n  /**\n   * Create new interaction\n   */\n  const createInteraction = async (interactionData: OrganizationInteractionInsert): Promise<OrganizationInteraction | null> => {\n    try {\n      const { data, error } = await supabase\n        .from('organization_interactions')\n        .insert(interactionData)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Refresh interactions\n      await fetchInteractions(interactionData.organization_id)\n      \n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create interaction'\n      setError('interactions', message)\n      return null\n    }\n  }\n  \n  // ===============================\n  // DOCUMENT MANAGEMENT\n  // ===============================\n  \n  /**\n   * Fetch documents for current organization\n   */\n  const fetchDocuments = async (organizationId?: string): Promise<OrganizationDocument[] | null> => {\n    try {\n      loading.documents = true\n      clearError('documents')\n      \n      const orgId = organizationId || currentOrganization.value?.id\n      if (!orgId) {\n        throw new Error('No organization ID provided')\n      }\n      \n      const { data, error } = await supabase\n        .from('organization_documents')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false })\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      documents.value = data || []\n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to fetch documents'\n      setError('documents', message)\n      return null\n    } finally {\n      loading.documents = false\n    }\n  }\n  \n  /**\n   * Create new document\n   */\n  const createDocument = async (documentData: OrganizationDocumentInsert): Promise<OrganizationDocument | null> => {\n    try {\n      const { data, error } = await supabase\n        .from('organization_documents')\n        .insert(documentData)\n        .select()\n        .single()\n      \n      if (error) {\n        throw new Error(error.message)\n      }\n      \n      // Refresh documents\n      await fetchDocuments(documentData.organization_id)\n      \n      return data\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to create document'\n      setError('documents', message)\n      return null\n    }\n  }\n  \n  // ===============================\n  // BULK OPERATIONS\n  // ===============================\n  \n  /**\n   * Perform bulk operations on multiple organizations\n   */\n  const performBulkOperation = async (operation: BulkOrganizationOperation): Promise<BulkOperationResult> => {\n    try {\n      loading.bulkOperations = true\n      clearError('bulkOperations')\n      \n      let processedCount = 0\n      let errorCount = 0\n      const errors: Array<{ id: string; error: string }> = []\n      \n      for (const orgId of operation.organizationIds) {\n        try {\n          switch (operation.type) {\n            case 'update_status':\n              if (operation.data?.status) {\n                await updateOrganization(orgId, { status: operation.data.status })\n                processedCount++\n              }\n              break\n              \n            case 'delete':\n              await deleteOrganization(orgId)\n              processedCount++\n              break\n              \n            case 'add_tags':\n              if (operation.data?.tags) {\n                const org = organizations.value.find(o => o.id === orgId)\n                if (org) {\n                  await updateOrganization(orgId, { tags: operation.data.tags })\n                  processedCount++\n                }\n              }\n              break\n              \n            default:\n              throw new Error(`Unsupported bulk operation: ${operation.type}`)\n          }\n        } catch (error) {\n          errorCount++\n          errors.push({\n            id: orgId,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }\n      }\n      \n      return {\n        operation,\n        success: errorCount === 0,\n        total: operation.organizationIds.length,\n        successful: processedCount,\n        failed: errorCount,\n        errors\n      }\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to perform bulk operation'\n      setError('bulkOperations', message)\n      return {\n        operation,\n        success: false,\n        total: operation.organizationIds.length,\n        successful: 0,\n        failed: operation.organizationIds.length,\n        errors: operation.organizationIds.map(id => ({ id: id, error: message }))\n      }\n    } finally {\n      loading.bulkOperations = false\n    }\n  }\n  \n  // ===============================\n  // UTILITY FUNCTIONS\n  // ===============================\n  \n  /**\n   * Get organization by ID from local state\n   */\n  const getOrganizationById = (id: string): OrganizationListItem | undefined => {\n    return organizations.value.find(org => org.id === id)\n  }\n  \n  /**\n   * Check if organization exists in local state\n   */\n  const organizationExists = (id: string): boolean => {\n    return organizations.value.some(org => org.id === id)\n  }\n  \n  /**\n   * Get engagement status based on interaction count\n   */\n  \n  /**\n   * Refresh all data\n   */\n  const refreshAllData = async () => {\n    clearCache()\n    await Promise.all([\n      fetchOrganizations({ resetList: true }),\n      fetchDashboardMetrics(),\n      fetchAnalytics()\n    ])\n    lastRefreshed.value = new Date()\n  }\n  \n  /**\n   * Reset store to initial state\n   */\n  const resetStore = () => {\n    organizations.value = []\n    currentOrganization.value = null\n    analyticsData.value = []\n    performanceData.value = []\n    leadScoringData.value = []\n    dashboardMetrics.value = null\n    interactions.value = []\n    documents.value = []\n    \n    searchQuery.value = ''\n    appliedFilters.value = {}\n    sortConfig.value = { field: 'name', order: 'asc' }\n    \n    pagination.value = {\n      page: 1,\n      limit: 20,\n      total: 0,\n      totalPages: 0,\n      hasNext: false,\n      hasPrevious: false\n    }\n    \n    Object.keys(loading).forEach(key => {\n      loading[key as keyof typeof loading] = false\n    })\n    \n    clearErrors()\n    clearCache()\n    lastRefreshed.value = null\n  }\n  \n  // ===============================\n  // RETURN STATEMENT\n  // ===============================\n  \n  return {\n    // State\n    organizations,\n    currentOrganization,\n    analyticsData,\n    performanceData,\n    leadScoringData,\n    dashboardMetrics,\n    interactions,\n    documents,\n    searchQuery,\n    appliedFilters,\n    sortConfig,\n    pagination,\n    lastRefreshed,\n    \n    // Loading states\n    loading,\n    isLoading,\n    \n    // Error states\n    errors,\n    hasErrors,\n    currentError,\n    \n    // Computed\n    hasOrganizations,\n    totalOrganizations,\n    organizationStats,\n    topPerformingOrganizations,\n    organizationsByStatus,\n    recentOrganizations,\n    \n    // Core CRUD operations\n    fetchOrganizations,\n    fetchOrganization,\n    createOrganization,\n    updateOrganization,\n    deleteOrganization,\n    \n    // Search and filtering\n    searchOrganizations,\n    clearSearch,\n    applyFilters,\n    clearFilters,\n    setSorting,\n    \n    // Pagination\n    setPage,\n    nextPage,\n    previousPage,\n    \n    // Analytics and metrics\n    fetchDashboardMetrics,\n    fetchAnalytics,\n    fetchPerformanceData,\n    fetchLeadScoringData,\n    \n    // Interaction management\n    fetchInteractions,\n    createInteraction,\n    \n    // Document management\n    fetchDocuments,\n    createDocument,\n    \n    // Bulk operations\n    performBulkOperation,\n    \n    // Utility methods\n    getOrganizationById,\n    organizationExists,\n    refreshAllData,\n    resetStore,\n    clearErrors,\n    clearError,\n    clearCache\n  }\n})"],"names":["render","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","DEFAULT_THRESHOLDS","usePerformanceMonitoring","metrics","ref","isRecording","activeOperations","reactive","statistics","computed","result","type","typeMetrics","m","durations","a","b","successCount","p95Index","p99Index","sum","d","overallStatistics","recentMetrics","oneHourAgo","slowRequests","metric","threshold","performanceIssues","issues","stats","startOperation","operationId","name","endOperation","success","metadata","operation","duration","recordMetric","measureFunction","fn","error","measureSyncFunction","start","clearMetrics","exportMetrics","getMetricsByTimeRange","startTime","endTime","getAverageResponseTimeByHour","hours","now","hourlyData","i","hourStart","hourEnd","hourMetrics","metricTime","averageTime","startRecording","stopRecording","useErrorTracking","errors","alertRules","isTracking","lastAlerts","errorGroups","groups","existing","severityLevels","recentErrors","e","bySource","bySeverity","resolvedErrors","avgResolutionTime","resolutionTime","criticalErrors","unresolvedErrors","generateFingerprint","message","stack","source","stackLines","content","hash","char","recordError","options","checkAlertRules","recordJavaScriptError","context","recordApiError","statusCode","endpoint","severity","recordDatabaseError","query","recordUserActionError","action","resolveError","errorId","resolvedBy","resolveErrorGroup","fingerprint","addTag","tag","removeTag","t","rule","lastTriggered","cooldownEnd","shouldTrigger","windowStart","countWindowStart","triggerAlert","triggeringError","_a","addAlertRule","newRule","removeAlertRule","ruleId","index","r","clearErrors","exportErrors","filters","filteredErrors","getErrorTrend","hourErrors","errorTime","uniqueFingerprints","startTracking","stopTracking","setupGlobalErrorHandlers","event","useOrganizationStore","defineStore","organizations","currentOrganization","analyticsData","performanceData","leadScoringData","dashboardMetrics","interactions","documents","loading","searchQuery","appliedFilters","sortConfig","pagination","lastRefreshed","dataCache","hasOrganizations","totalOrganizations","isLoading","state","hasErrors","currentError","firstError","key","organizationStats","topPerformingOrganizations","org","organizationsByStatus","acc","status","recentOrganizations","thirtyDaysAgo","clearError","setError","isCacheValid","cached","getCachedData","setCacheData","data","ttlMs","clearCache","k","fetchOrganizations","cacheKey","supabase","searchTerm","ascending","offset","count","transformedData","item","response","fetchOrganization","id","orgData","orgError","contactsResult","interactionsResult","documentsResult","detailData","_b","_c","interaction","c","createOrganization","organizationData","updateOrganization","updates","deleteOrganization","searchOrganizations","clearSearch","applyFilters","clearFilters","setSorting","field","order","setPage","page","nextPage","previousPage","fetchDashboardMetrics","totalResult","activeResult","prospectResult","customerResult","partnerResult","revenueResult","firstDayOfMonth","monthResult","totalRevenue","averageLeadScore","fetchAnalytics","fetchPerformanceData","fetchLeadScoringData","fetchInteractions","organizationId","orgId","createInteraction","interactionData","fetchDocuments","documentData","processedCount","errorCount","o"],"mappings":"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","x_google_ignoreList":[0]}